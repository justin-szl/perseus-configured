{"ast":null,"code":"/**\n * The resulting parse tree nodes of the parse tree.\n *\n * It is possible to provide position information, so that a ParseNode can\n * fulfil a role similar to a Token in error reporting.\n * For details on the corresponding properties see Token constructor.\n * Providing such information can lead to better error reporting.\n *\n * @param {string}  type       type of node, like e.g. \"ordgroup\"\n * @param {?object} value      type-specific representation of the node\n * @param {string}  mode       parse mode in action for this node,\n *                             \"math\" or \"text\"\n * @param {Token=} firstToken  first token of the input for this node,\n *                             will omit position information if unset\n * @param {Token=} lastToken   last token of the input for this node,\n *                             will default to firstToken if unset\n */\nfunction ParseNode(type, value, mode, firstToken, lastToken) {\n  this.type = type;\n  this.value = value;\n  this.mode = mode;\n\n  if (firstToken && (!lastToken || lastToken.lexer === firstToken.lexer)) {\n    this.lexer = firstToken.lexer;\n    this.start = firstToken.start;\n    this.end = (lastToken || firstToken).end;\n  }\n}\n\nmodule.exports = {\n  ParseNode: ParseNode\n};","map":{"version":3,"sources":["/Users/justinf/perseus-configured/node_modules/katex/src/parseData.js"],"names":["ParseNode","type","value","mode","firstToken","lastToken","lexer","start","end","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,UAAtC,EAAkDC,SAAlD,EAA6D;AACzD,OAAKJ,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;;AACA,MAAIC,UAAU,KAAK,CAACC,SAAD,IAAcA,SAAS,CAACC,KAAV,KAAoBF,UAAU,CAACE,KAAlD,CAAd,EAAwE;AACpE,SAAKA,KAAL,GAAaF,UAAU,CAACE,KAAxB;AACA,SAAKC,KAAL,GAAaH,UAAU,CAACG,KAAxB;AACA,SAAKC,GAAL,GAAW,CAACH,SAAS,IAAID,UAAd,EAA0BI,GAArC;AACH;AACJ;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACbV,EAAAA,SAAS,EAAEA;AADE,CAAjB","sourcesContent":["/**\n * The resulting parse tree nodes of the parse tree.\n *\n * It is possible to provide position information, so that a ParseNode can\n * fulfil a role similar to a Token in error reporting.\n * For details on the corresponding properties see Token constructor.\n * Providing such information can lead to better error reporting.\n *\n * @param {string}  type       type of node, like e.g. \"ordgroup\"\n * @param {?object} value      type-specific representation of the node\n * @param {string}  mode       parse mode in action for this node,\n *                             \"math\" or \"text\"\n * @param {Token=} firstToken  first token of the input for this node,\n *                             will omit position information if unset\n * @param {Token=} lastToken   last token of the input for this node,\n *                             will default to firstToken if unset\n */\nfunction ParseNode(type, value, mode, firstToken, lastToken) {\n    this.type = type;\n    this.value = value;\n    this.mode = mode;\n    if (firstToken && (!lastToken || lastToken.lexer === firstToken.lexer)) {\n        this.lexer = firstToken.lexer;\n        this.start = firstToken.start;\n        this.end = (lastToken || firstToken).end;\n    }\n}\n\nmodule.exports = {\n    ParseNode: ParseNode\n};\n\n"]},"metadata":{},"sourceType":"script"}