{"ast":null,"code":"/**\n * This is the ParseError class, which is the main error thrown by KaTeX\n * functions when something has gone wrong. This is used to distinguish internal\n * errors from errors in the expression that the user provided.\n *\n * If possible, a caller should provide a Token or ParseNode with information\n * about where in the source string the problem occurred.\n *\n * @param {string} message  The error message\n * @param {(Token|ParseNode)=} token  An object providing position information\n */\nfunction ParseError(message, token) {\n  var error = \"KaTeX parse error: \" + message;\n  var start;\n  var end;\n\n  if (token && token.lexer && token.start <= token.end) {\n    // If we have the input and a position, make the error a bit fancier\n    // Get the input\n    var input = token.lexer.input; // Prepend some information\n\n    start = token.start;\n    end = token.end;\n\n    if (start === input.length) {\n      error += \" at end of input: \";\n    } else {\n      error += \" at position \" + (start + 1) + \": \";\n    } // Underline token in question using combining underscores\n\n\n    var underlined = input.slice(start, end).replace(/[^]/g, \"$&\\u0332\"); // Extract some context from the input and add it to the error\n\n    var left;\n\n    if (start > 15) {\n      left = \"…\" + input.slice(start - 15, start);\n    } else {\n      left = input.slice(0, start);\n    }\n\n    var right;\n\n    if (end + 15 < input.length) {\n      right = input.slice(end, end + 15) + \"…\";\n    } else {\n      right = input.slice(end);\n    }\n\n    error += left + underlined + right;\n  } // Some hackery to make ParseError a prototype of Error\n  // See http://stackoverflow.com/a/8460753\n\n\n  var self = new Error(error);\n  self.name = \"ParseError\";\n  self.__proto__ = ParseError.prototype;\n  self.position = start;\n  return self;\n} // More hackery\n\n\nParseError.prototype.__proto__ = Error.prototype;\nmodule.exports = ParseError;","map":{"version":3,"sources":["/Users/justinf/perseus-configured/node_modules/katex/src/ParseError.js"],"names":["ParseError","message","token","error","start","end","lexer","input","length","underlined","slice","replace","left","right","self","Error","name","__proto__","prototype","position","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,CAAoBC,OAApB,EAA6BC,KAA7B,EAAoC;AAChC,MAAIC,KAAK,GAAG,wBAAwBF,OAApC;AACA,MAAIG,KAAJ;AACA,MAAIC,GAAJ;;AAEA,MAAIH,KAAK,IAAIA,KAAK,CAACI,KAAf,IAAwBJ,KAAK,CAACE,KAAN,IAAeF,KAAK,CAACG,GAAjD,EAAsD;AAClD;AAEA;AACA,QAAIE,KAAK,GAAGL,KAAK,CAACI,KAAN,CAAYC,KAAxB,CAJkD,CAMlD;;AACAH,IAAAA,KAAK,GAAGF,KAAK,CAACE,KAAd;AACAC,IAAAA,GAAG,GAAGH,KAAK,CAACG,GAAZ;;AACA,QAAID,KAAK,KAAKG,KAAK,CAACC,MAApB,EAA4B;AACxBL,MAAAA,KAAK,IAAI,oBAAT;AACH,KAFD,MAEO;AACHA,MAAAA,KAAK,IAAI,mBAAmBC,KAAK,GAAG,CAA3B,IAAgC,IAAzC;AACH,KAbiD,CAelD;;;AACA,QAAIK,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAYN,KAAZ,EAAmBC,GAAnB,EAAwBM,OAAxB,CAAgC,MAAhC,EAAwC,UAAxC,CAAjB,CAhBkD,CAkBlD;;AACA,QAAIC,IAAJ;;AACA,QAAIR,KAAK,GAAG,EAAZ,EAAgB;AACZQ,MAAAA,IAAI,GAAG,MAAML,KAAK,CAACG,KAAN,CAAYN,KAAK,GAAG,EAApB,EAAwBA,KAAxB,CAAb;AACH,KAFD,MAEO;AACHQ,MAAAA,IAAI,GAAGL,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeN,KAAf,CAAP;AACH;;AACD,QAAIS,KAAJ;;AACA,QAAIR,GAAG,GAAG,EAAN,GAAWE,KAAK,CAACC,MAArB,EAA6B;AACzBK,MAAAA,KAAK,GAAGN,KAAK,CAACG,KAAN,CAAYL,GAAZ,EAAiBA,GAAG,GAAG,EAAvB,IAA6B,GAArC;AACH,KAFD,MAEO;AACHQ,MAAAA,KAAK,GAAGN,KAAK,CAACG,KAAN,CAAYL,GAAZ,CAAR;AACH;;AACDF,IAAAA,KAAK,IAAIS,IAAI,GAAGH,UAAP,GAAoBI,KAA7B;AACH,GArC+B,CAuChC;AACA;;;AACA,MAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUZ,KAAV,CAAX;AACAW,EAAAA,IAAI,CAACE,IAAL,GAAY,YAAZ;AACAF,EAAAA,IAAI,CAACG,SAAL,GAAiBjB,UAAU,CAACkB,SAA5B;AAEAJ,EAAAA,IAAI,CAACK,QAAL,GAAgBf,KAAhB;AACA,SAAOU,IAAP;AACH,C,CAED;;;AACAd,UAAU,CAACkB,SAAX,CAAqBD,SAArB,GAAiCF,KAAK,CAACG,SAAvC;AAEAE,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["/**\n * This is the ParseError class, which is the main error thrown by KaTeX\n * functions when something has gone wrong. This is used to distinguish internal\n * errors from errors in the expression that the user provided.\n *\n * If possible, a caller should provide a Token or ParseNode with information\n * about where in the source string the problem occurred.\n *\n * @param {string} message  The error message\n * @param {(Token|ParseNode)=} token  An object providing position information\n */\nfunction ParseError(message, token) {\n    var error = \"KaTeX parse error: \" + message;\n    var start;\n    var end;\n\n    if (token && token.lexer && token.start <= token.end) {\n        // If we have the input and a position, make the error a bit fancier\n\n        // Get the input\n        var input = token.lexer.input;\n\n        // Prepend some information\n        start = token.start;\n        end = token.end;\n        if (start === input.length) {\n            error += \" at end of input: \";\n        } else {\n            error += \" at position \" + (start + 1) + \": \";\n        }\n\n        // Underline token in question using combining underscores\n        var underlined = input.slice(start, end).replace(/[^]/g, \"$&\\u0332\");\n\n        // Extract some context from the input and add it to the error\n        var left;\n        if (start > 15) {\n            left = \"…\" + input.slice(start - 15, start);\n        } else {\n            left = input.slice(0, start);\n        }\n        var right;\n        if (end + 15 < input.length) {\n            right = input.slice(end, end + 15) + \"…\";\n        } else {\n            right = input.slice(end);\n        }\n        error += left + underlined + right;\n    }\n\n    // Some hackery to make ParseError a prototype of Error\n    // See http://stackoverflow.com/a/8460753\n    var self = new Error(error);\n    self.name = \"ParseError\";\n    self.__proto__ = ParseError.prototype;\n\n    self.position = start;\n    return self;\n}\n\n// More hackery\nParseError.prototype.__proto__ = Error.prototype;\n\nmodule.exports = ParseError;\n"]},"metadata":{},"sourceType":"script"}