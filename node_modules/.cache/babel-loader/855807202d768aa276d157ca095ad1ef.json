{"ast":null,"code":"/**\n * This file contains information about the options that the Parser carries\n * around with it while parsing. Data is held in an `Options` object, and when\n * recursing, a new `Options` object can be created with the `.with*` and\n * `.reset` functions.\n */\n\n/**\n * This is the main options class. It contains the style, size, color, and font\n * of the current parse level. It also contains the style and size of the parent\n * parse level, so size changes can be handled efficiently.\n *\n * Each of the `.with*` and `.reset` functions passes its current style and size\n * as the parentStyle and parentSize of the new options class, so parent\n * handling is taken care of automatically.\n */\nfunction Options(data) {\n  this.style = data.style;\n  this.color = data.color;\n  this.size = data.size;\n  this.phantom = data.phantom;\n  this.font = data.font;\n\n  if (data.parentStyle === undefined) {\n    this.parentStyle = data.style;\n  } else {\n    this.parentStyle = data.parentStyle;\n  }\n\n  if (data.parentSize === undefined) {\n    this.parentSize = data.size;\n  } else {\n    this.parentSize = data.parentSize;\n  }\n}\n/**\n * Returns a new options object with the same properties as \"this\".  Properties\n * from \"extension\" will be copied to the new options object.\n */\n\n\nOptions.prototype.extend = function (extension) {\n  var data = {\n    style: this.style,\n    size: this.size,\n    color: this.color,\n    parentStyle: this.style,\n    parentSize: this.size,\n    phantom: this.phantom,\n    font: this.font\n  };\n\n  for (var key in extension) {\n    if (extension.hasOwnProperty(key)) {\n      data[key] = extension[key];\n    }\n  }\n\n  return new Options(data);\n};\n/**\n * Create a new options object with the given style.\n */\n\n\nOptions.prototype.withStyle = function (style) {\n  return this.extend({\n    style: style\n  });\n};\n/**\n * Create a new options object with the given size.\n */\n\n\nOptions.prototype.withSize = function (size) {\n  return this.extend({\n    size: size\n  });\n};\n/**\n * Create a new options object with the given color.\n */\n\n\nOptions.prototype.withColor = function (color) {\n  return this.extend({\n    color: color\n  });\n};\n/**\n * Create a new options object with \"phantom\" set to true.\n */\n\n\nOptions.prototype.withPhantom = function () {\n  return this.extend({\n    phantom: true\n  });\n};\n/**\n * Create a new options objects with the give font.\n */\n\n\nOptions.prototype.withFont = function (font) {\n  return this.extend({\n    font: font || this.font\n  });\n};\n/**\n * Create a new options object with the same style, size, and color. This is\n * used so that parent style and size changes are handled correctly.\n */\n\n\nOptions.prototype.reset = function () {\n  return this.extend({});\n};\n/**\n * A map of color names to CSS colors.\n * TODO(emily): Remove this when we have real macros\n */\n\n\nvar colorMap = {\n  \"katex-blue\": \"#6495ed\",\n  \"katex-orange\": \"#ffa500\",\n  \"katex-pink\": \"#ff00af\",\n  \"katex-red\": \"#df0030\",\n  \"katex-green\": \"#28ae7b\",\n  \"katex-gray\": \"gray\",\n  \"katex-purple\": \"#9d38bd\",\n  \"katex-blueA\": \"#ccfaff\",\n  \"katex-blueB\": \"#80f6ff\",\n  \"katex-blueC\": \"#63d9ea\",\n  \"katex-blueD\": \"#11accd\",\n  \"katex-blueE\": \"#0c7f99\",\n  \"katex-tealA\": \"#94fff5\",\n  \"katex-tealB\": \"#26edd5\",\n  \"katex-tealC\": \"#01d1c1\",\n  \"katex-tealD\": \"#01a995\",\n  \"katex-tealE\": \"#208170\",\n  \"katex-greenA\": \"#b6ffb0\",\n  \"katex-greenB\": \"#8af281\",\n  \"katex-greenC\": \"#74cf70\",\n  \"katex-greenD\": \"#1fab54\",\n  \"katex-greenE\": \"#0d923f\",\n  \"katex-goldA\": \"#ffd0a9\",\n  \"katex-goldB\": \"#ffbb71\",\n  \"katex-goldC\": \"#ff9c39\",\n  \"katex-goldD\": \"#e07d10\",\n  \"katex-goldE\": \"#a75a05\",\n  \"katex-redA\": \"#fca9a9\",\n  \"katex-redB\": \"#ff8482\",\n  \"katex-redC\": \"#f9685d\",\n  \"katex-redD\": \"#e84d39\",\n  \"katex-redE\": \"#bc2612\",\n  \"katex-maroonA\": \"#ffbde0\",\n  \"katex-maroonB\": \"#ff92c6\",\n  \"katex-maroonC\": \"#ed5fa6\",\n  \"katex-maroonD\": \"#ca337c\",\n  \"katex-maroonE\": \"#9e034e\",\n  \"katex-purpleA\": \"#ddd7ff\",\n  \"katex-purpleB\": \"#c6b9fc\",\n  \"katex-purpleC\": \"#aa87ff\",\n  \"katex-purpleD\": \"#7854ab\",\n  \"katex-purpleE\": \"#543b78\",\n  \"katex-mintA\": \"#f5f9e8\",\n  \"katex-mintB\": \"#edf2df\",\n  \"katex-mintC\": \"#e0e5cc\",\n  \"katex-grayA\": \"#f6f7f7\",\n  \"katex-grayB\": \"#f0f1f2\",\n  \"katex-grayC\": \"#e3e5e6\",\n  \"katex-grayD\": \"#d6d8da\",\n  \"katex-grayE\": \"#babec2\",\n  \"katex-grayF\": \"#888d93\",\n  \"katex-grayG\": \"#626569\",\n  \"katex-grayH\": \"#3b3e40\",\n  \"katex-grayI\": \"#21242c\",\n  \"katex-kaBlue\": \"#314453\",\n  \"katex-kaGreen\": \"#71B307\"\n};\n/**\n * Gets the CSS color of the current options object, accounting for the\n * `colorMap`.\n */\n\nOptions.prototype.getColor = function () {\n  if (this.phantom) {\n    return \"transparent\";\n  } else {\n    return colorMap[this.color] || this.color;\n  }\n};\n\nmodule.exports = Options;","map":{"version":3,"sources":["/Users/justinf/perseus-configured/node_modules/katex/src/Options.js"],"names":["Options","data","style","color","size","phantom","font","parentStyle","undefined","parentSize","prototype","extend","extension","key","hasOwnProperty","withStyle","withSize","withColor","withPhantom","withFont","reset","colorMap","getColor","module","exports"],"mappings":"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","sourcesContent":["/**\n * This file contains information about the options that the Parser carries\n * around with it while parsing. Data is held in an `Options` object, and when\n * recursing, a new `Options` object can be created with the `.with*` and\n * `.reset` functions.\n */\n\n/**\n * This is the main options class. It contains the style, size, color, and font\n * of the current parse level. It also contains the style and size of the parent\n * parse level, so size changes can be handled efficiently.\n *\n * Each of the `.with*` and `.reset` functions passes its current style and size\n * as the parentStyle and parentSize of the new options class, so parent\n * handling is taken care of automatically.\n */\nfunction Options(data) {\n    this.style = data.style;\n    this.color = data.color;\n    this.size = data.size;\n    this.phantom = data.phantom;\n    this.font = data.font;\n\n    if (data.parentStyle === undefined) {\n        this.parentStyle = data.style;\n    } else {\n        this.parentStyle = data.parentStyle;\n    }\n\n    if (data.parentSize === undefined) {\n        this.parentSize = data.size;\n    } else {\n        this.parentSize = data.parentSize;\n    }\n}\n\n/**\n * Returns a new options object with the same properties as \"this\".  Properties\n * from \"extension\" will be copied to the new options object.\n */\nOptions.prototype.extend = function(extension) {\n    var data = {\n        style: this.style,\n        size: this.size,\n        color: this.color,\n        parentStyle: this.style,\n        parentSize: this.size,\n        phantom: this.phantom,\n        font: this.font\n    };\n\n    for (var key in extension) {\n        if (extension.hasOwnProperty(key)) {\n            data[key] = extension[key];\n        }\n    }\n\n    return new Options(data);\n};\n\n/**\n * Create a new options object with the given style.\n */\nOptions.prototype.withStyle = function(style) {\n    return this.extend({\n        style: style\n    });\n};\n\n/**\n * Create a new options object with the given size.\n */\nOptions.prototype.withSize = function(size) {\n    return this.extend({\n        size: size\n    });\n};\n\n/**\n * Create a new options object with the given color.\n */\nOptions.prototype.withColor = function(color) {\n    return this.extend({\n        color: color\n    });\n};\n\n/**\n * Create a new options object with \"phantom\" set to true.\n */\nOptions.prototype.withPhantom = function() {\n    return this.extend({\n        phantom: true\n    });\n};\n\n/**\n * Create a new options objects with the give font.\n */\nOptions.prototype.withFont = function(font) {\n    return this.extend({\n        font: font || this.font\n    });\n};\n\n/**\n * Create a new options object with the same style, size, and color. This is\n * used so that parent style and size changes are handled correctly.\n */\nOptions.prototype.reset = function() {\n    return this.extend({});\n};\n\n/**\n * A map of color names to CSS colors.\n * TODO(emily): Remove this when we have real macros\n */\nvar colorMap = {\n    \"katex-blue\": \"#6495ed\",\n    \"katex-orange\": \"#ffa500\",\n    \"katex-pink\": \"#ff00af\",\n    \"katex-red\": \"#df0030\",\n    \"katex-green\": \"#28ae7b\",\n    \"katex-gray\": \"gray\",\n    \"katex-purple\": \"#9d38bd\",\n    \"katex-blueA\": \"#ccfaff\",\n    \"katex-blueB\": \"#80f6ff\",\n    \"katex-blueC\": \"#63d9ea\",\n    \"katex-blueD\": \"#11accd\",\n    \"katex-blueE\": \"#0c7f99\",\n    \"katex-tealA\": \"#94fff5\",\n    \"katex-tealB\": \"#26edd5\",\n    \"katex-tealC\": \"#01d1c1\",\n    \"katex-tealD\": \"#01a995\",\n    \"katex-tealE\": \"#208170\",\n    \"katex-greenA\": \"#b6ffb0\",\n    \"katex-greenB\": \"#8af281\",\n    \"katex-greenC\": \"#74cf70\",\n    \"katex-greenD\": \"#1fab54\",\n    \"katex-greenE\": \"#0d923f\",\n    \"katex-goldA\": \"#ffd0a9\",\n    \"katex-goldB\": \"#ffbb71\",\n    \"katex-goldC\": \"#ff9c39\",\n    \"katex-goldD\": \"#e07d10\",\n    \"katex-goldE\": \"#a75a05\",\n    \"katex-redA\": \"#fca9a9\",\n    \"katex-redB\": \"#ff8482\",\n    \"katex-redC\": \"#f9685d\",\n    \"katex-redD\": \"#e84d39\",\n    \"katex-redE\": \"#bc2612\",\n    \"katex-maroonA\": \"#ffbde0\",\n    \"katex-maroonB\": \"#ff92c6\",\n    \"katex-maroonC\": \"#ed5fa6\",\n    \"katex-maroonD\": \"#ca337c\",\n    \"katex-maroonE\": \"#9e034e\",\n    \"katex-purpleA\": \"#ddd7ff\",\n    \"katex-purpleB\": \"#c6b9fc\",\n    \"katex-purpleC\": \"#aa87ff\",\n    \"katex-purpleD\": \"#7854ab\",\n    \"katex-purpleE\": \"#543b78\",\n    \"katex-mintA\": \"#f5f9e8\",\n    \"katex-mintB\": \"#edf2df\",\n    \"katex-mintC\": \"#e0e5cc\",\n    \"katex-grayA\": \"#f6f7f7\",\n    \"katex-grayB\": \"#f0f1f2\",\n    \"katex-grayC\": \"#e3e5e6\",\n    \"katex-grayD\": \"#d6d8da\",\n    \"katex-grayE\": \"#babec2\",\n    \"katex-grayF\": \"#888d93\",\n    \"katex-grayG\": \"#626569\",\n    \"katex-grayH\": \"#3b3e40\",\n    \"katex-grayI\": \"#21242c\",\n    \"katex-kaBlue\": \"#314453\",\n    \"katex-kaGreen\": \"#71B307\"\n};\n\n/**\n * Gets the CSS color of the current options object, accounting for the\n * `colorMap`.\n */\nOptions.prototype.getColor = function() {\n    if (this.phantom) {\n        return \"transparent\";\n    } else {\n        return colorMap[this.color] || this.color;\n    }\n};\n\nmodule.exports = Options;\n"]},"metadata":{},"sourceType":"script"}