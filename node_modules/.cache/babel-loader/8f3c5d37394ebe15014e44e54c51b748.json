{"ast":null,"code":"/* eslint no-console:0 */\n\n/**\n * This file does the main work of building a domTree structure from a parse\n * tree. The entry point is the `buildHTML` function, which takes a parse tree.\n * Then, the buildExpression, buildGroup, and various groupTypes functions are\n * called, to produce a final HTML tree.\n */\nvar ParseError = require(\"./ParseError\");\n\nvar Style = require(\"./Style\");\n\nvar buildCommon = require(\"./buildCommon\");\n\nvar delimiter = require(\"./delimiter\");\n\nvar domTree = require(\"./domTree\");\n\nvar fontMetrics = require(\"./fontMetrics\");\n\nvar utils = require(\"./utils\");\n\nvar makeSpan = buildCommon.makeSpan;\n\nvar isSpace = function (node) {\n  return node instanceof domTree.span && node.classes[0] === \"mspace\";\n}; // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)\n// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,\n// and the text before Rule 19.\n\n\nvar isBin = function (node) {\n  return node && node.classes[0] === \"mbin\";\n};\n\nvar isBinLeftCanceller = function (node, isRealGroup) {\n  // TODO: This code assumes that a node's math class is the first element\n  // of its `classes` array. A later cleanup should ensure this, for\n  // instance by changing the signature of `makeSpan`.\n  if (node) {\n    return utils.contains([\"mbin\", \"mopen\", \"mrel\", \"mop\", \"mpunct\"], node.classes[0]);\n  } else {\n    return isRealGroup;\n  }\n};\n\nvar isBinRightCanceller = function (node, isRealGroup) {\n  if (node) {\n    return utils.contains([\"mrel\", \"mclose\", \"mpunct\"], node.classes[0]);\n  } else {\n    return isRealGroup;\n  }\n};\n/**\n * Take a list of nodes, build them in order, and return a list of the built\n * nodes. documentFragments are flattened into their contents, so the\n * returned list contains no fragments. `isRealGroup` is true if `expression`\n * is a real group (no atoms will be added on either side), as opposed to\n * a partial group (e.g. one created by \\color).\n */\n\n\nvar buildExpression = function (expression, options, isRealGroup) {\n  // Parse expressions into `groups`.\n  var groups = [];\n\n  for (var i = 0; i < expression.length; i++) {\n    var group = expression[i];\n    var output = buildGroup(group, options);\n\n    if (output instanceof domTree.documentFragment) {\n      Array.prototype.push.apply(groups, output.children);\n    } else {\n      groups.push(output);\n    }\n  } // At this point `groups` consists entirely of `symbolNode`s and `span`s.\n  // Explicit spaces (e.g., \\;, \\,) should be ignored with respect to atom\n  // spacing (e.g., \"add thick space between mord and mrel\"). Since CSS\n  // adjacency rules implement atom spacing, spaces should be invisible to\n  // CSS. So we splice them out of `groups` and into the atoms themselves.\n\n\n  var spaces = null;\n\n  for (i = 0; i < groups.length; i++) {\n    if (isSpace(groups[i])) {\n      spaces = spaces || [];\n      spaces.push(groups[i]);\n      groups.splice(i, 1);\n      i--;\n    } else if (spaces) {\n      if (groups[i] instanceof domTree.symbolNode) {\n        groups[i] = makeSpan([].concat(groups[i].classes), [groups[i]]);\n      }\n\n      buildCommon.prependChildren(groups[i], spaces);\n      spaces = null;\n    }\n  }\n\n  if (spaces) {\n    Array.prototype.push.apply(groups, spaces);\n  } // Binary operators change to ordinary symbols in some contexts.\n\n\n  for (i = 0; i < groups.length; i++) {\n    if (isBin(groups[i]) && (isBinLeftCanceller(groups[i - 1], isRealGroup) || isBinRightCanceller(groups[i + 1], isRealGroup))) {\n      groups[i].classes[0] = \"mord\";\n    }\n  }\n\n  return groups;\n}; // Return math atom class (mclass) of a domTree.\n\n\nvar getTypeOfDomTree = function (node) {\n  if (node instanceof domTree.documentFragment) {\n    if (node.children.length) {\n      return getTypeOfDomTree(node.children[node.children.length - 1]);\n    }\n  } else {\n    if (utils.contains([\"mord\", \"mop\", \"mbin\", \"mrel\", \"mopen\", \"mclose\", \"mpunct\", \"minner\"], node.classes[0])) {\n      return node.classes[0];\n    }\n  }\n\n  return null;\n};\n/**\n * Sometimes, groups perform special rules when they have superscripts or\n * subscripts attached to them. This function lets the `supsub` group know that\n * its inner element should handle the superscripts and subscripts instead of\n * handling them itself.\n */\n\n\nvar shouldHandleSupSub = function (group, options) {\n  if (!group) {\n    return false;\n  } else if (group.type === \"op\") {\n    // Operators handle supsubs differently when they have limits\n    // (e.g. `\\displaystyle\\sum_2^3`)\n    return group.value.limits && (options.style.size === Style.DISPLAY.size || group.value.alwaysHandleSupSub);\n  } else if (group.type === \"accent\") {\n    return isCharacterBox(group.value.base);\n  } else {\n    return null;\n  }\n};\n/**\n * Sometimes we want to pull out the innermost element of a group. In most\n * cases, this will just be the group itself, but when ordgroups and colors have\n * a single element, we want to pull that out.\n */\n\n\nvar getBaseElem = function (group) {\n  if (!group) {\n    return false;\n  } else if (group.type === \"ordgroup\") {\n    if (group.value.length === 1) {\n      return getBaseElem(group.value[0]);\n    } else {\n      return group;\n    }\n  } else if (group.type === \"color\") {\n    if (group.value.value.length === 1) {\n      return getBaseElem(group.value.value[0]);\n    } else {\n      return group;\n    }\n  } else if (group.type === \"font\") {\n    return getBaseElem(group.value.body);\n  } else {\n    return group;\n  }\n};\n/**\n * TeXbook algorithms often reference \"character boxes\", which are simply groups\n * with a single character in them. To decide if something is a character box,\n * we find its innermost group, and see if it is a single character.\n */\n\n\nvar isCharacterBox = function (group) {\n  var baseElem = getBaseElem(group); // These are all they types of groups which hold single characters\n\n  return baseElem.type === \"mathord\" || baseElem.type === \"textord\" || baseElem.type === \"bin\" || baseElem.type === \"rel\" || baseElem.type === \"inner\" || baseElem.type === \"open\" || baseElem.type === \"close\" || baseElem.type === \"punct\";\n};\n\nvar makeNullDelimiter = function (options, classes) {\n  return makeSpan(classes.concat([\"sizing\", \"reset-\" + options.size, \"size5\", options.style.reset(), Style.TEXT.cls(), \"nulldelimiter\"]));\n};\n/**\n * This is a map of group types to the function used to handle that type.\n * Simpler types come at the beginning, while complicated types come afterwards.\n */\n\n\nvar groupTypes = {};\n\ngroupTypes.mathord = function (group, options) {\n  return buildCommon.makeOrd(group, options, \"mathord\");\n};\n\ngroupTypes.textord = function (group, options) {\n  return buildCommon.makeOrd(group, options, \"textord\");\n};\n\ngroupTypes.bin = function (group, options) {\n  return buildCommon.mathsym(group.value, group.mode, options, [\"mbin\"]);\n};\n\ngroupTypes.rel = function (group, options) {\n  return buildCommon.mathsym(group.value, group.mode, options, [\"mrel\"]);\n};\n\ngroupTypes.open = function (group, options) {\n  return buildCommon.mathsym(group.value, group.mode, options, [\"mopen\"]);\n};\n\ngroupTypes.close = function (group, options) {\n  return buildCommon.mathsym(group.value, group.mode, options, [\"mclose\"]);\n};\n\ngroupTypes.inner = function (group, options) {\n  return buildCommon.mathsym(group.value, group.mode, options, [\"minner\"]);\n};\n\ngroupTypes.punct = function (group, options) {\n  return buildCommon.mathsym(group.value, group.mode, options, [\"mpunct\"]);\n};\n\ngroupTypes.ordgroup = function (group, options) {\n  return makeSpan([\"mord\", options.style.cls()], buildExpression(group.value, options.reset(), true), options);\n};\n\ngroupTypes.text = function (group, options) {\n  var newOptions = options.withFont(group.value.style);\n  var inner = buildExpression(group.value.body, newOptions, true);\n\n  for (var i = 0; i < inner.length - 1; i++) {\n    if (inner[i].tryCombine(inner[i + 1])) {\n      inner.splice(i + 1, 1);\n      i--;\n    }\n  }\n\n  return makeSpan([\"mord\", \"text\", newOptions.style.cls()], inner, newOptions);\n};\n\ngroupTypes.color = function (group, options) {\n  var elements = buildExpression(group.value.value, options.withColor(group.value.color), false); // \\color isn't supposed to affect the type of the elements it contains.\n  // To accomplish this, we wrap the results in a fragment, so the inner\n  // elements will be able to directly interact with their neighbors. For\n  // example, `\\color{red}{2 +} 3` has the same spacing as `2 + 3`\n\n  return new buildCommon.makeFragment(elements);\n};\n\ngroupTypes.supsub = function (group, options) {\n  // Superscript and subscripts are handled in the TeXbook on page\n  // 445-446, rules 18(a-f).\n  // Here is where we defer to the inner group if it should handle\n  // superscripts and subscripts itself.\n  if (shouldHandleSupSub(group.value.base, options)) {\n    return groupTypes[group.value.base.type](group, options);\n  }\n\n  var base = buildGroup(group.value.base, options.reset());\n  var supmid;\n  var submid;\n  var sup;\n  var sub;\n  var style = options.style;\n  var newOptions;\n\n  if (group.value.sup) {\n    newOptions = options.withStyle(style.sup());\n    sup = buildGroup(group.value.sup, newOptions);\n    supmid = makeSpan([style.reset(), style.sup().cls()], [sup], newOptions);\n  }\n\n  if (group.value.sub) {\n    newOptions = options.withStyle(style.sub());\n    sub = buildGroup(group.value.sub, newOptions);\n    submid = makeSpan([style.reset(), style.sub().cls()], [sub], newOptions);\n  } // Rule 18a\n\n\n  var supShift;\n  var subShift;\n\n  if (isCharacterBox(group.value.base)) {\n    supShift = 0;\n    subShift = 0;\n  } else {\n    supShift = base.height - style.metrics.supDrop;\n    subShift = base.depth + style.metrics.subDrop;\n  } // Rule 18c\n\n\n  var minSupShift;\n\n  if (style === Style.DISPLAY) {\n    minSupShift = style.metrics.sup1;\n  } else if (style.cramped) {\n    minSupShift = style.metrics.sup3;\n  } else {\n    minSupShift = style.metrics.sup2;\n  } // scriptspace is a font-size-independent size, so scale it\n  // appropriately\n\n\n  var multiplier = Style.TEXT.sizeMultiplier * style.sizeMultiplier;\n  var scriptspace = 0.5 / fontMetrics.metrics.ptPerEm / multiplier + \"em\";\n  var supsub;\n\n  if (!group.value.sup) {\n    // Rule 18b\n    subShift = Math.max(subShift, style.metrics.sub1, sub.height - 0.8 * style.metrics.xHeight);\n    supsub = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: submid\n    }], \"shift\", subShift, options);\n    supsub.children[0].style.marginRight = scriptspace; // Subscripts shouldn't be shifted by the base's italic correction.\n    // Account for that by shifting the subscript back the appropriate\n    // amount. Note we only do this when the base is a single symbol.\n\n    if (base instanceof domTree.symbolNode) {\n      supsub.children[0].style.marginLeft = -base.italic + \"em\";\n    }\n  } else if (!group.value.sub) {\n    // Rule 18c, d\n    supShift = Math.max(supShift, minSupShift, sup.depth + 0.25 * style.metrics.xHeight);\n    supsub = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: supmid\n    }], \"shift\", -supShift, options);\n    supsub.children[0].style.marginRight = scriptspace;\n  } else {\n    supShift = Math.max(supShift, minSupShift, sup.depth + 0.25 * style.metrics.xHeight);\n    subShift = Math.max(subShift, style.metrics.sub2);\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness; // Rule 18e\n\n    if (supShift - sup.depth - (sub.height - subShift) < 4 * ruleWidth) {\n      subShift = 4 * ruleWidth - (supShift - sup.depth) + sub.height;\n      var psi = 0.8 * style.metrics.xHeight - (supShift - sup.depth);\n\n      if (psi > 0) {\n        supShift += psi;\n        subShift -= psi;\n      }\n    }\n\n    supsub = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: submid,\n      shift: subShift\n    }, {\n      type: \"elem\",\n      elem: supmid,\n      shift: -supShift\n    }], \"individualShift\", null, options); // See comment above about subscripts not being shifted\n\n    if (base instanceof domTree.symbolNode) {\n      supsub.children[0].style.marginLeft = -base.italic + \"em\";\n    }\n\n    supsub.children[0].style.marginRight = scriptspace;\n    supsub.children[1].style.marginRight = scriptspace;\n  } // We ensure to wrap the supsub vlist in a span.msupsub to reset text-align\n\n\n  var mclass = getTypeOfDomTree(base) || \"mord\";\n  return makeSpan([mclass], [base, makeSpan([\"msupsub\"], [supsub])], options);\n};\n\ngroupTypes.genfrac = function (group, options) {\n  // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).\n  // Figure out what style this fraction should be in based on the\n  // function used\n  var style = options.style;\n\n  if (group.value.size === \"display\") {\n    style = Style.DISPLAY;\n  } else if (group.value.size === \"text\") {\n    style = Style.TEXT;\n  }\n\n  var nstyle = style.fracNum();\n  var dstyle = style.fracDen();\n  var newOptions;\n  newOptions = options.withStyle(nstyle);\n  var numer = buildGroup(group.value.numer, newOptions);\n  var numerreset = makeSpan([style.reset(), nstyle.cls()], [numer], newOptions);\n  newOptions = options.withStyle(dstyle);\n  var denom = buildGroup(group.value.denom, newOptions);\n  var denomreset = makeSpan([style.reset(), dstyle.cls()], [denom], newOptions);\n  var ruleWidth;\n\n  if (group.value.hasBarLine) {\n    ruleWidth = fontMetrics.metrics.defaultRuleThickness / options.style.sizeMultiplier;\n  } else {\n    ruleWidth = 0;\n  } // Rule 15b\n\n\n  var numShift;\n  var clearance;\n  var denomShift;\n\n  if (style.size === Style.DISPLAY.size) {\n    numShift = style.metrics.num1;\n\n    if (ruleWidth > 0) {\n      clearance = 3 * ruleWidth;\n    } else {\n      clearance = 7 * fontMetrics.metrics.defaultRuleThickness;\n    }\n\n    denomShift = style.metrics.denom1;\n  } else {\n    if (ruleWidth > 0) {\n      numShift = style.metrics.num2;\n      clearance = ruleWidth;\n    } else {\n      numShift = style.metrics.num3;\n      clearance = 3 * fontMetrics.metrics.defaultRuleThickness;\n    }\n\n    denomShift = style.metrics.denom2;\n  }\n\n  var frac;\n\n  if (ruleWidth === 0) {\n    // Rule 15c\n    var candidateClearance = numShift - numer.depth - (denom.height - denomShift);\n\n    if (candidateClearance < clearance) {\n      numShift += 0.5 * (clearance - candidateClearance);\n      denomShift += 0.5 * (clearance - candidateClearance);\n    }\n\n    frac = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: denomreset,\n      shift: denomShift\n    }, {\n      type: \"elem\",\n      elem: numerreset,\n      shift: -numShift\n    }], \"individualShift\", null, options);\n  } else {\n    // Rule 15d\n    var axisHeight = style.metrics.axisHeight;\n\n    if (numShift - numer.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {\n      numShift += clearance - (numShift - numer.depth - (axisHeight + 0.5 * ruleWidth));\n    }\n\n    if (axisHeight - 0.5 * ruleWidth - (denom.height - denomShift) < clearance) {\n      denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denom.height - denomShift));\n    }\n\n    var mid = makeSpan([options.style.reset(), Style.TEXT.cls(), \"frac-line\"]); // Manually set the height of the line because its height is\n    // created in CSS\n\n    mid.height = ruleWidth;\n    var midShift = -(axisHeight - 0.5 * ruleWidth);\n    frac = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: denomreset,\n      shift: denomShift\n    }, {\n      type: \"elem\",\n      elem: mid,\n      shift: midShift\n    }, {\n      type: \"elem\",\n      elem: numerreset,\n      shift: -numShift\n    }], \"individualShift\", null, options);\n  } // Since we manually change the style sometimes (with \\dfrac or \\tfrac),\n  // account for the possible size change here.\n\n\n  frac.height *= style.sizeMultiplier / options.style.sizeMultiplier;\n  frac.depth *= style.sizeMultiplier / options.style.sizeMultiplier; // Rule 15e\n\n  var delimSize;\n\n  if (style.size === Style.DISPLAY.size) {\n    delimSize = style.metrics.delim1;\n  } else {\n    delimSize = style.metrics.delim2;\n  }\n\n  var leftDelim;\n  var rightDelim;\n\n  if (group.value.leftDelim == null) {\n    leftDelim = makeNullDelimiter(options, [\"mopen\"]);\n  } else {\n    leftDelim = delimiter.customSizedDelim(group.value.leftDelim, delimSize, true, options.withStyle(style), group.mode, [\"mopen\"]);\n  }\n\n  if (group.value.rightDelim == null) {\n    rightDelim = makeNullDelimiter(options, [\"mclose\"]);\n  } else {\n    rightDelim = delimiter.customSizedDelim(group.value.rightDelim, delimSize, true, options.withStyle(style), group.mode, [\"mclose\"]);\n  }\n\n  return makeSpan([\"mord\", options.style.reset(), style.cls()], [leftDelim, makeSpan([\"mfrac\"], [frac]), rightDelim], options);\n};\n\nvar calculateSize = function (sizeValue, style) {\n  var x = sizeValue.number;\n\n  if (sizeValue.unit === \"ex\") {\n    x *= style.metrics.emPerEx;\n  } else if (sizeValue.unit === \"mu\") {\n    x /= 18;\n  }\n\n  return x;\n};\n\ngroupTypes.array = function (group, options) {\n  var r;\n  var c;\n  var nr = group.value.body.length;\n  var nc = 0;\n  var body = new Array(nr);\n  var style = options.style; // Horizontal spacing\n\n  var pt = 1 / fontMetrics.metrics.ptPerEm;\n  var arraycolsep = 5 * pt; // \\arraycolsep in article.cls\n  // Vertical spacing\n\n  var baselineskip = 12 * pt; // see size10.clo\n  // Default \\arraystretch from lttab.dtx\n  // TODO(gagern): may get redefined once we have user-defined macros\n\n  var arraystretch = utils.deflt(group.value.arraystretch, 1);\n  var arrayskip = arraystretch * baselineskip;\n  var arstrutHeight = 0.7 * arrayskip; // \\strutbox in ltfsstrc.dtx and\n\n  var arstrutDepth = 0.3 * arrayskip; // \\@arstrutbox in lttab.dtx\n\n  var totalHeight = 0;\n\n  for (r = 0; r < group.value.body.length; ++r) {\n    var inrow = group.value.body[r];\n    var height = arstrutHeight; // \\@array adds an \\@arstrut\n\n    var depth = arstrutDepth; // to each tow (via the template)\n\n    if (nc < inrow.length) {\n      nc = inrow.length;\n    }\n\n    var outrow = new Array(inrow.length);\n\n    for (c = 0; c < inrow.length; ++c) {\n      var elt = buildGroup(inrow[c], options);\n\n      if (depth < elt.depth) {\n        depth = elt.depth;\n      }\n\n      if (height < elt.height) {\n        height = elt.height;\n      }\n\n      outrow[c] = elt;\n    }\n\n    var gap = 0;\n\n    if (group.value.rowGaps[r]) {\n      gap = calculateSize(group.value.rowGaps[r].value, style);\n\n      if (gap > 0) {\n        // \\@argarraycr\n        gap += arstrutDepth;\n\n        if (depth < gap) {\n          depth = gap; // \\@xargarraycr\n        }\n\n        gap = 0;\n      }\n    }\n\n    outrow.height = height;\n    outrow.depth = depth;\n    totalHeight += height;\n    outrow.pos = totalHeight;\n    totalHeight += depth + gap; // \\@yargarraycr\n\n    body[r] = outrow;\n  }\n\n  var offset = totalHeight / 2 + style.metrics.axisHeight;\n  var colDescriptions = group.value.cols || [];\n  var cols = [];\n  var colSep;\n  var colDescrNum;\n\n  for (c = 0, colDescrNum = 0; // Continue while either there are more columns or more column\n  // descriptions, so trailing separators don't get lost.\n  c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {\n    var colDescr = colDescriptions[colDescrNum] || {};\n    var firstSeparator = true;\n\n    while (colDescr.type === \"separator\") {\n      // If there is more than one separator in a row, add a space\n      // between them.\n      if (!firstSeparator) {\n        colSep = makeSpan([\"arraycolsep\"], []);\n        colSep.style.width = fontMetrics.metrics.doubleRuleSep + \"em\";\n        cols.push(colSep);\n      }\n\n      if (colDescr.separator === \"|\") {\n        var separator = makeSpan([\"vertical-separator\"], []);\n        separator.style.height = totalHeight + \"em\";\n        separator.style.verticalAlign = -(totalHeight - offset) + \"em\";\n        cols.push(separator);\n      } else {\n        throw new ParseError(\"Invalid separator type: \" + colDescr.separator);\n      }\n\n      colDescrNum++;\n      colDescr = colDescriptions[colDescrNum] || {};\n      firstSeparator = false;\n    }\n\n    if (c >= nc) {\n      continue;\n    }\n\n    var sepwidth;\n\n    if (c > 0 || group.value.hskipBeforeAndAfter) {\n      sepwidth = utils.deflt(colDescr.pregap, arraycolsep);\n\n      if (sepwidth !== 0) {\n        colSep = makeSpan([\"arraycolsep\"], []);\n        colSep.style.width = sepwidth + \"em\";\n        cols.push(colSep);\n      }\n    }\n\n    var col = [];\n\n    for (r = 0; r < nr; ++r) {\n      var row = body[r];\n      var elem = row[c];\n\n      if (!elem) {\n        continue;\n      }\n\n      var shift = row.pos - offset;\n      elem.depth = row.depth;\n      elem.height = row.height;\n      col.push({\n        type: \"elem\",\n        elem: elem,\n        shift: shift\n      });\n    }\n\n    col = buildCommon.makeVList(col, \"individualShift\", null, options);\n    col = makeSpan([\"col-align-\" + (colDescr.align || \"c\")], [col]);\n    cols.push(col);\n\n    if (c < nc - 1 || group.value.hskipBeforeAndAfter) {\n      sepwidth = utils.deflt(colDescr.postgap, arraycolsep);\n\n      if (sepwidth !== 0) {\n        colSep = makeSpan([\"arraycolsep\"], []);\n        colSep.style.width = sepwidth + \"em\";\n        cols.push(colSep);\n      }\n    }\n  }\n\n  body = makeSpan([\"mtable\"], cols);\n  return makeSpan([\"mord\"], [body], options);\n};\n\ngroupTypes.spacing = function (group, options) {\n  if (group.value === \"\\\\ \" || group.value === \"\\\\space\" || group.value === \" \" || group.value === \"~\") {\n    // Spaces are generated by adding an actual space. Each of these\n    // things has an entry in the symbols table, so these will be turned\n    // into appropriate outputs.\n    if (group.mode === \"text\") {\n      return buildCommon.makeOrd(group, options, \"textord\");\n    } else {\n      return makeSpan([\"mspace\"], [buildCommon.mathsym(group.value, group.mode, options)], options);\n    }\n  } else {\n    // Other kinds of spaces are of arbitrary width. We use CSS to\n    // generate these.\n    return makeSpan([\"mspace\", buildCommon.spacingFunctions[group.value].className], [], options);\n  }\n};\n\ngroupTypes.llap = function (group, options) {\n  var inner = makeSpan([\"inner\"], [buildGroup(group.value.body, options.reset())]);\n  var fix = makeSpan([\"fix\"], []);\n  return makeSpan([\"mord\", \"llap\", options.style.cls()], [inner, fix], options);\n};\n\ngroupTypes.rlap = function (group, options) {\n  var inner = makeSpan([\"inner\"], [buildGroup(group.value.body, options.reset())]);\n  var fix = makeSpan([\"fix\"], []);\n  return makeSpan([\"mord\", \"rlap\", options.style.cls()], [inner, fix], options);\n};\n\ngroupTypes.op = function (group, options) {\n  // Operators are handled in the TeXbook pg. 443-444, rule 13(a).\n  var supGroup;\n  var subGroup;\n  var hasLimits = false;\n\n  if (group.type === \"supsub\") {\n    // If we have limits, supsub will pass us its group to handle. Pull\n    // out the superscript and subscript and set the group to the op in\n    // its base.\n    supGroup = group.value.sup;\n    subGroup = group.value.sub;\n    group = group.value.base;\n    hasLimits = true;\n  }\n\n  var style = options.style; // Most operators have a large successor symbol, but these don't.\n\n  var noSuccessor = [\"\\\\smallint\"];\n  var large = false;\n\n  if (style.size === Style.DISPLAY.size && group.value.symbol && !utils.contains(noSuccessor, group.value.body)) {\n    // Most symbol operators get larger in displaystyle (rule 13)\n    large = true;\n  }\n\n  var base;\n  var baseShift = 0;\n  var slant = 0;\n\n  if (group.value.symbol) {\n    // If this is a symbol, create the symbol.\n    var fontName = large ? \"Size2-Regular\" : \"Size1-Regular\";\n    base = buildCommon.makeSymbol(group.value.body, fontName, \"math\", options, [\"mop\", \"op-symbol\", large ? \"large-op\" : \"small-op\"]); // Shift the symbol so its center lies on the axis (rule 13). It\n    // appears that our fonts have the centers of the symbols already\n    // almost on the axis, so these numbers are very small. Note we\n    // don't actually apply this here, but instead it is used either in\n    // the vlist creation or separately when there are no limits.\n\n    baseShift = (base.height - base.depth) / 2 - style.metrics.axisHeight * style.sizeMultiplier; // The slant of the symbol is just its italic correction.\n\n    slant = base.italic;\n  } else if (group.value.value) {\n    // If this is a list, compose that list.\n    var inner = buildExpression(group.value.value, options, true);\n    base = makeSpan([\"mop\"], inner, options);\n  } else {\n    // Otherwise, this is a text operator. Build the text from the\n    // operator's name.\n    // TODO(emily): Add a space in the middle of some of these\n    // operators, like \\limsup\n    var output = [];\n\n    for (var i = 1; i < group.value.body.length; i++) {\n      output.push(buildCommon.mathsym(group.value.body[i], group.mode));\n    }\n\n    base = makeSpan([\"mop\"], output, options);\n  }\n\n  if (hasLimits) {\n    // IE 8 clips \\int if it is in a display: inline-block. We wrap it\n    // in a new span so it is an inline, and works.\n    base = makeSpan([], [base]);\n    var supmid;\n    var supKern;\n    var submid;\n    var subKern;\n    var newOptions; // We manually have to handle the superscripts and subscripts. This,\n    // aside from the kern calculations, is copied from supsub.\n\n    if (supGroup) {\n      newOptions = options.withStyle(style.sup());\n      var sup = buildGroup(supGroup, newOptions);\n      supmid = makeSpan([style.reset(), style.sup().cls()], [sup], newOptions);\n      supKern = Math.max(fontMetrics.metrics.bigOpSpacing1, fontMetrics.metrics.bigOpSpacing3 - sup.depth);\n    }\n\n    if (subGroup) {\n      newOptions = options.withStyle(style.sub());\n      var sub = buildGroup(subGroup, newOptions);\n      submid = makeSpan([style.reset(), style.sub().cls()], [sub], newOptions);\n      subKern = Math.max(fontMetrics.metrics.bigOpSpacing2, fontMetrics.metrics.bigOpSpacing4 - sub.height);\n    } // Build the final group as a vlist of the possible subscript, base,\n    // and possible superscript.\n\n\n    var finalGroup;\n    var top;\n    var bottom;\n\n    if (!supGroup) {\n      top = base.height - baseShift;\n      finalGroup = buildCommon.makeVList([{\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }, {\n        type: \"elem\",\n        elem: submid\n      }, {\n        type: \"kern\",\n        size: subKern\n      }, {\n        type: \"elem\",\n        elem: base\n      }], \"top\", top, options); // Here, we shift the limits by the slant of the symbol. Note\n      // that we are supposed to shift the limits by 1/2 of the slant,\n      // but since we are centering the limits adding a full slant of\n      // margin will shift by 1/2 that.\n\n      finalGroup.children[0].style.marginLeft = -slant + \"em\";\n    } else if (!subGroup) {\n      bottom = base.depth + baseShift;\n      finalGroup = buildCommon.makeVList([{\n        type: \"elem\",\n        elem: base\n      }, {\n        type: \"kern\",\n        size: supKern\n      }, {\n        type: \"elem\",\n        elem: supmid\n      }, {\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }], \"bottom\", bottom, options); // See comment above about slants\n\n      finalGroup.children[1].style.marginLeft = slant + \"em\";\n    } else if (!supGroup && !subGroup) {\n      // This case probably shouldn't occur (this would mean the\n      // supsub was sending us a group with no superscript or\n      // subscript) but be safe.\n      return base;\n    } else {\n      bottom = fontMetrics.metrics.bigOpSpacing5 + submid.height + submid.depth + subKern + base.depth + baseShift;\n      finalGroup = buildCommon.makeVList([{\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }, {\n        type: \"elem\",\n        elem: submid\n      }, {\n        type: \"kern\",\n        size: subKern\n      }, {\n        type: \"elem\",\n        elem: base\n      }, {\n        type: \"kern\",\n        size: supKern\n      }, {\n        type: \"elem\",\n        elem: supmid\n      }, {\n        type: \"kern\",\n        size: fontMetrics.metrics.bigOpSpacing5\n      }], \"bottom\", bottom, options); // See comment above about slants\n\n      finalGroup.children[0].style.marginLeft = -slant + \"em\";\n      finalGroup.children[2].style.marginLeft = slant + \"em\";\n    }\n\n    return makeSpan([\"mop\", \"op-limits\"], [finalGroup], options);\n  } else {\n    if (group.value.symbol) {\n      base.style.top = baseShift + \"em\";\n    }\n\n    return base;\n  }\n};\n\ngroupTypes.mod = function (group, options) {\n  var inner = [];\n\n  if (group.value.modType === \"bmod\") {\n    // “\\nonscript\\mskip-\\medmuskip\\mkern5mu”\n    if (!options.style.isTight()) {\n      inner.push(makeSpan([\"mspace\", \"negativemediumspace\"], [], options));\n    }\n\n    inner.push(makeSpan([\"mspace\", \"thickspace\"], [], options));\n  } else if (options.style.size === Style.DISPLAY.size) {\n    inner.push(makeSpan([\"mspace\", \"quad\"], [], options));\n  } else if (group.value.modType === \"mod\") {\n    inner.push(makeSpan([\"mspace\", \"twelvemuspace\"], [], options));\n  } else {\n    inner.push(makeSpan([\"mspace\", \"eightmuspace\"], [], options));\n  }\n\n  if (group.value.modType === \"pod\" || group.value.modType === \"pmod\") {\n    inner.push(buildCommon.mathsym(\"(\", group.mode));\n  }\n\n  if (group.value.modType !== \"pod\") {\n    var modInner = [buildCommon.mathsym(\"m\", group.mode), buildCommon.mathsym(\"o\", group.mode), buildCommon.mathsym(\"d\", group.mode)];\n\n    if (group.value.modType === \"bmod\") {\n      inner.push(makeSpan([\"mbin\"], modInner, options)); // “\\mkern5mu\\nonscript\\mskip-\\medmuskip”\n\n      inner.push(makeSpan([\"mspace\", \"thickspace\"], [], options));\n\n      if (!options.style.isTight()) {\n        inner.push(makeSpan([\"mspace\", \"negativemediumspace\"], [], options));\n      }\n    } else {\n      Array.prototype.push.apply(inner, modInner);\n      inner.push(makeSpan([\"mspace\", \"sixmuspace\"], [], options));\n    }\n  }\n\n  if (group.value.value) {\n    Array.prototype.push.apply(inner, buildExpression(group.value.value, options, false));\n  }\n\n  if (group.value.modType === \"pod\" || group.value.modType === \"pmod\") {\n    inner.push(buildCommon.mathsym(\")\", group.mode));\n  }\n\n  return buildCommon.makeFragment(inner);\n};\n\ngroupTypes.katex = function (group, options) {\n  // The KaTeX logo. The offsets for the K and a were chosen to look\n  // good, but the offsets for the T, E, and X were taken from the\n  // definition of \\TeX in TeX (see TeXbook pg. 356)\n  var k = makeSpan([\"k\"], [buildCommon.mathsym(\"K\", group.mode)], options);\n  var a = makeSpan([\"a\"], [buildCommon.mathsym(\"A\", group.mode)], options);\n  a.height = (a.height + 0.2) * 0.75;\n  a.depth = (a.height - 0.2) * 0.75;\n  var t = makeSpan([\"t\"], [buildCommon.mathsym(\"T\", group.mode)], options);\n  var e = makeSpan([\"e\"], [buildCommon.mathsym(\"E\", group.mode)], options);\n  e.height = e.height - 0.2155;\n  e.depth = e.depth + 0.2155;\n  var x = makeSpan([\"x\"], [buildCommon.mathsym(\"X\", group.mode)], options);\n  return makeSpan([\"mord\", \"katex-logo\"], [k, a, t, e, x], options);\n};\n\ngroupTypes.overline = function (group, options) {\n  // Overlines are handled in the TeXbook pg 443, Rule 9.\n  var style = options.style; // Build the inner group in the cramped style.\n\n  var innerGroup = buildGroup(group.value.body, options.withStyle(style.cramp()));\n  var ruleWidth = fontMetrics.metrics.defaultRuleThickness / style.sizeMultiplier; // Create the line above the body\n\n  var line = makeSpan([style.reset(), Style.TEXT.cls(), \"overline-line\"]);\n  line.height = ruleWidth;\n  line.maxFontSize = 1.0; // Generate the vlist, with the appropriate kerns\n\n  var vlist = buildCommon.makeVList([{\n    type: \"elem\",\n    elem: innerGroup\n  }, {\n    type: \"kern\",\n    size: 3 * ruleWidth\n  }, {\n    type: \"elem\",\n    elem: line\n  }, {\n    type: \"kern\",\n    size: ruleWidth\n  }], \"firstBaseline\", null, options);\n  return makeSpan([\"mord\", \"overline\"], [vlist], options);\n};\n\ngroupTypes.underline = function (group, options) {\n  // Underlines are handled in the TeXbook pg 443, Rule 10.\n  var style = options.style; // Build the inner group.\n\n  var innerGroup = buildGroup(group.value.body, options);\n  var ruleWidth = fontMetrics.metrics.defaultRuleThickness / style.sizeMultiplier; // Create the line above the body\n\n  var line = makeSpan([style.reset(), Style.TEXT.cls(), \"underline-line\"]);\n  line.height = ruleWidth;\n  line.maxFontSize = 1.0; // Generate the vlist, with the appropriate kerns\n\n  var vlist = buildCommon.makeVList([{\n    type: \"kern\",\n    size: ruleWidth\n  }, {\n    type: \"elem\",\n    elem: line\n  }, {\n    type: \"kern\",\n    size: 3 * ruleWidth\n  }, {\n    type: \"elem\",\n    elem: innerGroup\n  }], \"top\", innerGroup.height, options);\n  return makeSpan([\"mord\", \"underline\"], [vlist], options);\n};\n\ngroupTypes.sqrt = function (group, options) {\n  // Square roots are handled in the TeXbook pg. 443, Rule 11.\n  var style = options.style; // First, we do the same steps as in overline to build the inner group\n  // and line\n\n  var inner = buildGroup(group.value.body, options.withStyle(style.cramp()));\n  var ruleWidth = fontMetrics.metrics.defaultRuleThickness / style.sizeMultiplier;\n  var line = makeSpan([style.reset(), Style.TEXT.cls(), \"sqrt-line\"], [], options);\n  line.height = ruleWidth;\n  line.maxFontSize = 1.0;\n  var phi = ruleWidth;\n\n  if (style.id < Style.TEXT.id) {\n    phi = style.metrics.xHeight;\n  } // Calculate the clearance between the body and line\n\n\n  var lineClearance = ruleWidth + phi / 4;\n  var innerHeight = (inner.height + inner.depth) * style.sizeMultiplier;\n  var minDelimiterHeight = innerHeight + lineClearance + ruleWidth; // Create a \\surd delimiter of the required minimum size\n\n  var delim = makeSpan([\"sqrt-sign\"], [delimiter.customSizedDelim(\"\\\\surd\", minDelimiterHeight, false, options, group.mode)], options);\n  var delimDepth = delim.height + delim.depth - ruleWidth; // Adjust the clearance based on the delimiter size\n\n  if (delimDepth > inner.height + inner.depth + lineClearance) {\n    lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;\n  } // Shift the delimiter so that its top lines up with the top of the line\n\n\n  var delimShift = -(inner.height + lineClearance + ruleWidth) + delim.height;\n  delim.style.top = delimShift + \"em\";\n  delim.height -= delimShift;\n  delim.depth += delimShift; // We add a special case here, because even when `inner` is empty, we\n  // still get a line. So, we use a simple heuristic to decide if we\n  // should omit the body entirely. (note this doesn't work for something\n  // like `\\sqrt{\\rlap{x}}`, but if someone is doing that they deserve for\n  // it not to work.\n\n  var body;\n\n  if (inner.height === 0 && inner.depth === 0) {\n    body = makeSpan();\n  } else {\n    body = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: inner\n    }, {\n      type: \"kern\",\n      size: lineClearance\n    }, {\n      type: \"elem\",\n      elem: line\n    }, {\n      type: \"kern\",\n      size: ruleWidth\n    }], \"firstBaseline\", null, options);\n  }\n\n  if (!group.value.index) {\n    return makeSpan([\"mord\", \"sqrt\"], [delim, body], options);\n  } else {\n    // Handle the optional root index\n    // The index is always in scriptscript style\n    var newOptions = options.withStyle(Style.SCRIPTSCRIPT);\n    var root = buildGroup(group.value.index, newOptions);\n    var rootWrap = makeSpan([style.reset(), Style.SCRIPTSCRIPT.cls()], [root], newOptions); // Figure out the height and depth of the inner part\n\n    var innerRootHeight = Math.max(delim.height, body.height);\n    var innerRootDepth = Math.max(delim.depth, body.depth); // The amount the index is shifted by. This is taken from the TeX\n    // source, in the definition of `\\r@@t`.\n\n    var toShift = 0.6 * (innerRootHeight - innerRootDepth); // Build a VList with the superscript shifted up correctly\n\n    var rootVList = buildCommon.makeVList([{\n      type: \"elem\",\n      elem: rootWrap\n    }], \"shift\", -toShift, options); // Add a class surrounding it so we can add on the appropriate\n    // kerning\n\n    var rootVListWrap = makeSpan([\"root\"], [rootVList]);\n    return makeSpan([\"mord\", \"sqrt\"], [rootVListWrap, delim, body], options);\n  }\n};\n\ngroupTypes.sizing = function (group, options) {\n  // Handle sizing operators like \\Huge. Real TeX doesn't actually allow\n  // these functions inside of math expressions, so we do some special\n  // handling.\n  var inner = buildExpression(group.value.value, options.withSize(group.value.size), false); // Compute the correct maxFontSize.\n\n  var style = options.style;\n  var fontSize = buildCommon.sizingMultiplier[group.value.size];\n  fontSize = fontSize * style.sizeMultiplier; // Add size-resetting classes to the inner list and set maxFontSize\n  // manually. Handle nested size changes.\n\n  for (var i = 0; i < inner.length; i++) {\n    var pos = utils.indexOf(inner[i].classes, \"sizing\");\n\n    if (pos < 0) {\n      inner[i].classes.push(\"sizing\", \"reset-\" + options.size, group.value.size, style.cls());\n      inner[i].maxFontSize = fontSize;\n    } else if (inner[i].classes[pos + 1] === \"reset-\" + group.value.size) {\n      // This is a nested size change: e.g., inner[i] is the \"b\" in\n      // `\\Huge a \\small b`. Override the old size (the `reset-` class)\n      // but not the new size.\n      inner[i].classes[pos + 1] = \"reset-\" + options.size;\n    }\n  }\n\n  return buildCommon.makeFragment(inner);\n};\n\ngroupTypes.styling = function (group, options) {\n  // Style changes are handled in the TeXbook on pg. 442, Rule 3.\n  // Figure out what style we're changing to.\n  var styleMap = {\n    \"display\": Style.DISPLAY,\n    \"text\": Style.TEXT,\n    \"script\": Style.SCRIPT,\n    \"scriptscript\": Style.SCRIPTSCRIPT\n  };\n  var newStyle = styleMap[group.value.style];\n  var newOptions = options.withStyle(newStyle); // Build the inner expression in the new style.\n\n  var inner = buildExpression(group.value.value, newOptions, false); // Add style-resetting classes to the inner list. Handle nested changes.\n\n  for (var i = 0; i < inner.length; i++) {\n    var pos = utils.indexOf(inner[i].classes, newStyle.reset());\n\n    if (pos < 0) {\n      inner[i].classes.push(options.style.reset(), newStyle.cls());\n    } else {\n      // This is a nested style change, as `\\textstyle a\\scriptstyle b`.\n      // Only override the old style (the reset class).\n      inner[i].classes[pos] = options.style.reset();\n    }\n  }\n\n  return new buildCommon.makeFragment(inner);\n};\n\ngroupTypes.font = function (group, options) {\n  var font = group.value.font;\n  return buildGroup(group.value.body, options.withFont(font));\n};\n\ngroupTypes.delimsizing = function (group, options) {\n  var delim = group.value.value;\n\n  if (delim === \".\") {\n    // Empty delimiters still count as elements, even though they don't\n    // show anything.\n    return makeSpan([group.value.mclass]);\n  } // Use delimiter.sizedDelim to generate the delimiter.\n\n\n  return delimiter.sizedDelim(delim, group.value.size, options, group.mode, [group.value.mclass]);\n};\n\ngroupTypes.leftright = function (group, options) {\n  // Build the inner expression\n  var inner = buildExpression(group.value.body, options.reset(), true);\n  var innerHeight = 0;\n  var innerDepth = 0;\n  var hadMiddle = false; // Calculate its height and depth\n\n  for (var i = 0; i < inner.length; i++) {\n    if (inner[i].isMiddle) {\n      hadMiddle = true;\n    } else {\n      innerHeight = Math.max(inner[i].height, innerHeight);\n      innerDepth = Math.max(inner[i].depth, innerDepth);\n    }\n  }\n\n  var style = options.style; // The size of delimiters is the same, regardless of what style we are\n  // in. Thus, to correctly calculate the size of delimiter we need around\n  // a group, we scale down the inner size based on the size.\n\n  innerHeight *= style.sizeMultiplier;\n  innerDepth *= style.sizeMultiplier;\n  var leftDelim;\n\n  if (group.value.left === \".\") {\n    // Empty delimiters in \\left and \\right make null delimiter spaces.\n    leftDelim = makeNullDelimiter(options, [\"mopen\"]);\n  } else {\n    // Otherwise, use leftRightDelim to generate the correct sized\n    // delimiter.\n    leftDelim = delimiter.leftRightDelim(group.value.left, innerHeight, innerDepth, options, group.mode, [\"mopen\"]);\n  } // Add it to the beginning of the expression\n\n\n  inner.unshift(leftDelim); // Handle middle delimiters\n\n  if (hadMiddle) {\n    for (i = 1; i < inner.length; i++) {\n      if (inner[i].isMiddle) {\n        // Apply the options that were active when \\middle was called\n        inner[i] = delimiter.leftRightDelim(inner[i].isMiddle.value, innerHeight, innerDepth, inner[i].isMiddle.options, group.mode, []);\n      }\n    }\n  }\n\n  var rightDelim; // Same for the right delimiter\n\n  if (group.value.right === \".\") {\n    rightDelim = makeNullDelimiter(options, [\"mclose\"]);\n  } else {\n    rightDelim = delimiter.leftRightDelim(group.value.right, innerHeight, innerDepth, options, group.mode, [\"mclose\"]);\n  } // Add it to the end of the expression.\n\n\n  inner.push(rightDelim);\n  return makeSpan([\"minner\", style.cls()], inner, options);\n};\n\ngroupTypes.middle = function (group, options) {\n  var middleDelim;\n\n  if (group.value.value === \".\") {\n    middleDelim = makeNullDelimiter(options, []);\n  } else {\n    middleDelim = delimiter.sizedDelim(group.value.value, 1, options, group.mode, []);\n    middleDelim.isMiddle = {\n      value: group.value.value,\n      options: options\n    };\n  }\n\n  return middleDelim;\n};\n\ngroupTypes.rule = function (group, options) {\n  // Make an empty span for the rule\n  var rule = makeSpan([\"mord\", \"rule\"], [], options);\n  var style = options.style; // Calculate the shift, width, and height of the rule, and account for units\n\n  var shift = 0;\n\n  if (group.value.shift) {\n    shift = calculateSize(group.value.shift, style);\n  }\n\n  var width = calculateSize(group.value.width, style);\n  var height = calculateSize(group.value.height, style); // The sizes of rules are absolute, so make it larger if we are in a\n  // smaller style.\n\n  shift /= style.sizeMultiplier;\n  width /= style.sizeMultiplier;\n  height /= style.sizeMultiplier; // Style the rule to the right size\n\n  rule.style.borderRightWidth = width + \"em\";\n  rule.style.borderTopWidth = height + \"em\";\n  rule.style.bottom = shift + \"em\"; // Record the height and width\n\n  rule.width = width;\n  rule.height = height + shift;\n  rule.depth = -shift;\n  return rule;\n};\n\ngroupTypes.kern = function (group, options) {\n  // Make an empty span for the rule\n  var rule = makeSpan([\"mord\", \"rule\"], [], options);\n  var style = options.style;\n  var dimension = 0;\n\n  if (group.value.dimension) {\n    dimension = calculateSize(group.value.dimension, style);\n  }\n\n  dimension /= style.sizeMultiplier;\n  rule.style.marginLeft = dimension + \"em\";\n  return rule;\n};\n\ngroupTypes.accent = function (group, options) {\n  // Accents are handled in the TeXbook pg. 443, rule 12.\n  var base = group.value.base;\n  var style = options.style;\n  var supsubGroup;\n\n  if (group.type === \"supsub\") {\n    // If our base is a character box, and we have superscripts and\n    // subscripts, the supsub will defer to us. In particular, we want\n    // to attach the superscripts and subscripts to the inner body (so\n    // that the position of the superscripts and subscripts won't be\n    // affected by the height of the accent). We accomplish this by\n    // sticking the base of the accent into the base of the supsub, and\n    // rendering that, while keeping track of where the accent is.\n    // The supsub group is the group that was passed in\n    var supsub = group; // The real accent group is the base of the supsub group\n\n    group = supsub.value.base; // The character box is the base of the accent group\n\n    base = group.value.base; // Stick the character box into the base of the supsub group\n\n    supsub.value.base = base; // Rerender the supsub group with its new base, and store that\n    // result.\n\n    supsubGroup = buildGroup(supsub, options.reset());\n  } // Build the base group\n\n\n  var body = buildGroup(base, options.withStyle(style.cramp())); // Calculate the skew of the accent. This is based on the line \"If the\n  // nucleus is not a single character, let s = 0; otherwise set s to the\n  // kern amount for the nucleus followed by the \\skewchar of its font.\"\n  // Note that our skew metrics are just the kern between each character\n  // and the skewchar.\n\n  var skew;\n\n  if (isCharacterBox(base)) {\n    // If the base is a character box, then we want the skew of the\n    // innermost character. To do that, we find the innermost character:\n    var baseChar = getBaseElem(base); // Then, we render its group to get the symbol inside it\n\n    var baseGroup = buildGroup(baseChar, options.withStyle(style.cramp())); // Finally, we pull the skew off of the symbol.\n\n    skew = baseGroup.skew; // Note that we now throw away baseGroup, because the layers we\n    // removed with getBaseElem might contain things like \\color which\n    // we can't get rid of.\n    // TODO(emily): Find a better way to get the skew\n  } else {\n    skew = 0;\n  } // calculate the amount of space between the body and the accent\n\n\n  var clearance = Math.min(body.height, style.metrics.xHeight); // Build the accent\n\n  var accent = buildCommon.makeSymbol(group.value.accent, \"Main-Regular\", \"math\", options); // Remove the italic correction of the accent, because it only serves to\n  // shift the accent over to a place we don't want.\n\n  accent.italic = 0; // The \\vec character that the fonts use is a combining character, and\n  // thus shows up much too far to the left. To account for this, we add a\n  // specific class which shifts the accent over to where we want it.\n  // TODO(emily): Fix this in a better way, like by changing the font\n\n  var vecClass = group.value.accent === \"\\\\vec\" ? \"accent-vec\" : null;\n  var accentBody = makeSpan([\"accent-body\", vecClass], [makeSpan([], [accent])]);\n  accentBody = buildCommon.makeVList([{\n    type: \"elem\",\n    elem: body\n  }, {\n    type: \"kern\",\n    size: -clearance\n  }, {\n    type: \"elem\",\n    elem: accentBody\n  }], \"firstBaseline\", null, options); // Shift the accent over by the skew. Note we shift by twice the skew\n  // because we are centering the accent, so by adding 2*skew to the left,\n  // we shift it to the right by 1*skew.\n\n  accentBody.children[1].style.marginLeft = 2 * skew + \"em\";\n  var accentWrap = makeSpan([\"mord\", \"accent\"], [accentBody], options);\n\n  if (supsubGroup) {\n    // Here, we replace the \"base\" child of the supsub with our newly\n    // generated accent.\n    supsubGroup.children[0] = accentWrap; // Since we don't rerun the height calculation after replacing the\n    // accent, we manually recalculate height.\n\n    supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height); // Accents should always be ords, even when their innards are not.\n\n    supsubGroup.classes[0] = \"mord\";\n    return supsubGroup;\n  } else {\n    return accentWrap;\n  }\n};\n\ngroupTypes.phantom = function (group, options) {\n  var elements = buildExpression(group.value.value, options.withPhantom(), false); // \\phantom isn't supposed to affect the elements it contains.\n  // See \"color\" for more details.\n\n  return new buildCommon.makeFragment(elements);\n};\n\ngroupTypes.mclass = function (group, options) {\n  var elements = buildExpression(group.value.value, options, true);\n  return makeSpan([group.value.mclass], elements, options);\n};\n/**\n * buildGroup is the function that takes a group and calls the correct groupType\n * function for it. It also handles the interaction of size and style changes\n * between parents and children.\n */\n\n\nvar buildGroup = function (group, options) {\n  if (!group) {\n    return makeSpan();\n  }\n\n  if (groupTypes[group.type]) {\n    // Call the groupTypes function\n    var groupNode = groupTypes[group.type](group, options);\n    var multiplier; // If the style changed between the parent and the current group,\n    // account for the size difference\n\n    if (options.style !== options.parentStyle) {\n      multiplier = options.style.sizeMultiplier / options.parentStyle.sizeMultiplier;\n      groupNode.height *= multiplier;\n      groupNode.depth *= multiplier;\n    } // If the size changed between the parent and the current group, account\n    // for that size difference.\n\n\n    if (options.size !== options.parentSize) {\n      multiplier = buildCommon.sizingMultiplier[options.size] / buildCommon.sizingMultiplier[options.parentSize];\n      groupNode.height *= multiplier;\n      groupNode.depth *= multiplier;\n    }\n\n    return groupNode;\n  } else {\n    throw new ParseError(\"Got group of unknown type: '\" + group.type + \"'\");\n  }\n};\n/**\n * Take an entire parse tree, and build it into an appropriate set of HTML\n * nodes.\n */\n\n\nvar buildHTML = function (tree, options) {\n  // buildExpression is destructive, so we need to make a clone\n  // of the incoming tree so that it isn't accidentally changed\n  tree = JSON.parse(JSON.stringify(tree)); // Build the expression contained in the tree\n\n  var expression = buildExpression(tree, options, true);\n  var body = makeSpan([\"base\", options.style.cls()], expression, options); // Add struts, which ensure that the top of the HTML element falls at the\n  // height of the expression, and the bottom of the HTML element falls at the\n  // depth of the expression.\n\n  var topStrut = makeSpan([\"strut\"]);\n  var bottomStrut = makeSpan([\"strut\", \"bottom\"]);\n  topStrut.style.height = body.height + \"em\";\n  bottomStrut.style.height = body.height + body.depth + \"em\"; // We'd like to use `vertical-align: top` but in IE 9 this lowers the\n  // baseline of the box to the bottom of this strut (instead staying in the\n  // normal place) so we use an absolute value for vertical-align instead\n\n  bottomStrut.style.verticalAlign = -body.depth + \"em\"; // Wrap the struts and body together\n\n  var htmlNode = makeSpan([\"katex-html\"], [topStrut, bottomStrut, body]);\n  htmlNode.setAttribute(\"aria-hidden\", \"true\");\n  return htmlNode;\n};\n\nmodule.exports = buildHTML;","map":{"version":3,"sources":["/Users/justinf/perseus-configured/node_modules/katex/src/buildHTML.js"],"names":["ParseError","require","Style","buildCommon","delimiter","domTree","fontMetrics","utils","makeSpan","isSpace","node","span","classes","isBin","isBinLeftCanceller","isRealGroup","contains","isBinRightCanceller","buildExpression","expression","options","groups","i","length","group","output","buildGroup","documentFragment","Array","prototype","push","apply","children","spaces","splice","symbolNode","concat","prependChildren","getTypeOfDomTree","shouldHandleSupSub","type","value","limits","style","size","DISPLAY","alwaysHandleSupSub","isCharacterBox","base","getBaseElem","body","baseElem","makeNullDelimiter","reset","TEXT","cls","groupTypes","mathord","makeOrd","textord","bin","mathsym","mode","rel","open","close","inner","punct","ordgroup","text","newOptions","withFont","tryCombine","color","elements","withColor","makeFragment","supsub","supmid","submid","sup","sub","withStyle","supShift","subShift","height","metrics","supDrop","depth","subDrop","minSupShift","sup1","cramped","sup3","sup2","multiplier","sizeMultiplier","scriptspace","ptPerEm","Math","max","sub1","xHeight","makeVList","elem","marginRight","marginLeft","italic","sub2","ruleWidth","defaultRuleThickness","psi","shift","mclass","genfrac","nstyle","fracNum","dstyle","fracDen","numer","numerreset","denom","denomreset","hasBarLine","numShift","clearance","denomShift","num1","denom1","num2","num3","denom2","frac","candidateClearance","axisHeight","mid","midShift","delimSize","delim1","delim2","leftDelim","rightDelim","customSizedDelim","calculateSize","sizeValue","x","number","unit","emPerEx","array","r","c","nr","nc","pt","arraycolsep","baselineskip","arraystretch","deflt","arrayskip","arstrutHeight","arstrutDepth","totalHeight","inrow","outrow","elt","gap","rowGaps","pos","offset","colDescriptions","cols","colSep","colDescrNum","colDescr","firstSeparator","width","doubleRuleSep","separator","verticalAlign","sepwidth","hskipBeforeAndAfter","pregap","col","row","align","postgap","spacing","spacingFunctions","className","llap","fix","rlap","op","supGroup","subGroup","hasLimits","noSuccessor","large","symbol","baseShift","slant","fontName","makeSymbol","supKern","subKern","bigOpSpacing1","bigOpSpacing3","bigOpSpacing2","bigOpSpacing4","finalGroup","top","bottom","bigOpSpacing5","mod","modType","isTight","modInner","katex","k","a","t","e","overline","innerGroup","cramp","line","maxFontSize","vlist","underline","sqrt","phi","id","lineClearance","innerHeight","minDelimiterHeight","delim","delimDepth","delimShift","index","SCRIPTSCRIPT","root","rootWrap","innerRootHeight","innerRootDepth","toShift","rootVList","rootVListWrap","sizing","withSize","fontSize","sizingMultiplier","indexOf","styling","styleMap","SCRIPT","newStyle","font","delimsizing","sizedDelim","leftright","innerDepth","hadMiddle","isMiddle","left","leftRightDelim","unshift","right","middle","middleDelim","rule","borderRightWidth","borderTopWidth","kern","dimension","accent","supsubGroup","skew","baseChar","baseGroup","min","vecClass","accentBody","accentWrap","phantom","withPhantom","groupNode","parentStyle","parentSize","buildHTML","tree","JSON","parse","stringify","topStrut","bottomStrut","htmlNode","setAttribute","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-console:0 */\n/**\n * This file does the main work of building a domTree structure from a parse\n * tree. The entry point is the `buildHTML` function, which takes a parse tree.\n * Then, the buildExpression, buildGroup, and various groupTypes functions are\n * called, to produce a final HTML tree.\n */\n\nvar ParseError = require(\"./ParseError\");\nvar Style = require(\"./Style\");\n\nvar buildCommon = require(\"./buildCommon\");\nvar delimiter = require(\"./delimiter\");\nvar domTree = require(\"./domTree\");\nvar fontMetrics = require(\"./fontMetrics\");\nvar utils = require(\"./utils\");\n\nvar makeSpan = buildCommon.makeSpan;\n\nvar isSpace = function(node) {\n    return node instanceof domTree.span && node.classes[0] === \"mspace\";\n};\n\n// Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)\n// depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,\n// and the text before Rule 19.\n\nvar isBin = function(node) {\n    return node && node.classes[0] === \"mbin\";\n};\n\nvar isBinLeftCanceller = function(node, isRealGroup) {\n    // TODO: This code assumes that a node's math class is the first element\n    // of its `classes` array. A later cleanup should ensure this, for\n    // instance by changing the signature of `makeSpan`.\n    if (node) {\n        return utils.contains([\"mbin\", \"mopen\", \"mrel\", \"mop\", \"mpunct\"],\n                              node.classes[0]);\n    } else {\n        return isRealGroup;\n    }\n};\n\nvar isBinRightCanceller = function(node, isRealGroup) {\n    if (node) {\n        return utils.contains([\"mrel\", \"mclose\", \"mpunct\"], node.classes[0]);\n    } else {\n        return isRealGroup;\n    }\n};\n\n/**\n * Take a list of nodes, build them in order, and return a list of the built\n * nodes. documentFragments are flattened into their contents, so the\n * returned list contains no fragments. `isRealGroup` is true if `expression`\n * is a real group (no atoms will be added on either side), as opposed to\n * a partial group (e.g. one created by \\color).\n */\nvar buildExpression = function(expression, options, isRealGroup) {\n    // Parse expressions into `groups`.\n    var groups = [];\n    for (var i = 0; i < expression.length; i++) {\n        var group = expression[i];\n        var output = buildGroup(group, options);\n        if (output instanceof domTree.documentFragment) {\n            Array.prototype.push.apply(groups, output.children);\n        } else {\n            groups.push(output);\n        }\n    }\n    // At this point `groups` consists entirely of `symbolNode`s and `span`s.\n\n    // Explicit spaces (e.g., \\;, \\,) should be ignored with respect to atom\n    // spacing (e.g., \"add thick space between mord and mrel\"). Since CSS\n    // adjacency rules implement atom spacing, spaces should be invisible to\n    // CSS. So we splice them out of `groups` and into the atoms themselves.\n    var spaces = null;\n    for (i = 0; i < groups.length; i++) {\n        if (isSpace(groups[i])) {\n            spaces = spaces || [];\n            spaces.push(groups[i]);\n            groups.splice(i, 1);\n            i--;\n        } else if (spaces) {\n            if (groups[i] instanceof domTree.symbolNode) {\n                groups[i] = makeSpan([].concat(groups[i].classes), [groups[i]]);\n            }\n            buildCommon.prependChildren(groups[i], spaces);\n            spaces = null;\n        }\n    }\n    if (spaces) {\n        Array.prototype.push.apply(groups, spaces);\n    }\n\n    // Binary operators change to ordinary symbols in some contexts.\n    for (i = 0; i < groups.length; i++) {\n        if (isBin(groups[i])\n            && (isBinLeftCanceller(groups[i - 1], isRealGroup)\n                || isBinRightCanceller(groups[i + 1], isRealGroup))) {\n            groups[i].classes[0] = \"mord\";\n        }\n    }\n\n    return groups;\n};\n\n// Return math atom class (mclass) of a domTree.\nvar getTypeOfDomTree = function(node) {\n    if (node instanceof domTree.documentFragment) {\n        if (node.children.length) {\n            return getTypeOfDomTree(\n                node.children[node.children.length - 1]);\n        }\n    } else {\n        if (utils.contains([\"mord\", \"mop\", \"mbin\", \"mrel\", \"mopen\", \"mclose\",\n            \"mpunct\", \"minner\"], node.classes[0])) {\n            return node.classes[0];\n        }\n    }\n    return null;\n};\n\n/**\n * Sometimes, groups perform special rules when they have superscripts or\n * subscripts attached to them. This function lets the `supsub` group know that\n * its inner element should handle the superscripts and subscripts instead of\n * handling them itself.\n */\nvar shouldHandleSupSub = function(group, options) {\n    if (!group) {\n        return false;\n    } else if (group.type === \"op\") {\n        // Operators handle supsubs differently when they have limits\n        // (e.g. `\\displaystyle\\sum_2^3`)\n        return group.value.limits &&\n            (options.style.size === Style.DISPLAY.size ||\n            group.value.alwaysHandleSupSub);\n    } else if (group.type === \"accent\") {\n        return isCharacterBox(group.value.base);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Sometimes we want to pull out the innermost element of a group. In most\n * cases, this will just be the group itself, but when ordgroups and colors have\n * a single element, we want to pull that out.\n */\nvar getBaseElem = function(group) {\n    if (!group) {\n        return false;\n    } else if (group.type === \"ordgroup\") {\n        if (group.value.length === 1) {\n            return getBaseElem(group.value[0]);\n        } else {\n            return group;\n        }\n    } else if (group.type === \"color\") {\n        if (group.value.value.length === 1) {\n            return getBaseElem(group.value.value[0]);\n        } else {\n            return group;\n        }\n    } else if (group.type === \"font\") {\n        return getBaseElem(group.value.body);\n    } else {\n        return group;\n    }\n};\n\n/**\n * TeXbook algorithms often reference \"character boxes\", which are simply groups\n * with a single character in them. To decide if something is a character box,\n * we find its innermost group, and see if it is a single character.\n */\nvar isCharacterBox = function(group) {\n    var baseElem = getBaseElem(group);\n\n    // These are all they types of groups which hold single characters\n    return baseElem.type === \"mathord\" ||\n        baseElem.type === \"textord\" ||\n        baseElem.type === \"bin\" ||\n        baseElem.type === \"rel\" ||\n        baseElem.type === \"inner\" ||\n        baseElem.type === \"open\" ||\n        baseElem.type === \"close\" ||\n        baseElem.type === \"punct\";\n};\n\nvar makeNullDelimiter = function(options, classes) {\n    return makeSpan(classes.concat([\n        \"sizing\", \"reset-\" + options.size, \"size5\",\n        options.style.reset(), Style.TEXT.cls(),\n        \"nulldelimiter\"]));\n};\n\n/**\n * This is a map of group types to the function used to handle that type.\n * Simpler types come at the beginning, while complicated types come afterwards.\n */\nvar groupTypes = {};\n\ngroupTypes.mathord = function(group, options) {\n    return buildCommon.makeOrd(group, options, \"mathord\");\n};\n\ngroupTypes.textord = function(group, options) {\n    return buildCommon.makeOrd(group, options, \"textord\");\n};\n\ngroupTypes.bin = function(group, options) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options, [\"mbin\"]);\n};\n\ngroupTypes.rel = function(group, options) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options, [\"mrel\"]);\n};\n\ngroupTypes.open = function(group, options) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options, [\"mopen\"]);\n};\n\ngroupTypes.close = function(group, options) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options, [\"mclose\"]);\n};\n\ngroupTypes.inner = function(group, options) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options, [\"minner\"]);\n};\n\ngroupTypes.punct = function(group, options) {\n    return buildCommon.mathsym(\n        group.value, group.mode, options, [\"mpunct\"]);\n};\n\ngroupTypes.ordgroup = function(group, options) {\n    return makeSpan(\n        [\"mord\", options.style.cls()],\n        buildExpression(group.value, options.reset(), true),\n        options\n    );\n};\n\ngroupTypes.text = function(group, options) {\n    var newOptions = options.withFont(group.value.style);\n    var inner = buildExpression(group.value.body, newOptions, true);\n    for (var i = 0; i < inner.length - 1; i++) {\n        if (inner[i].tryCombine(inner[i + 1])) {\n            inner.splice(i + 1, 1);\n            i--;\n        }\n    }\n    return makeSpan([\"mord\", \"text\", newOptions.style.cls()],\n        inner, newOptions);\n};\n\ngroupTypes.color = function(group, options) {\n    var elements = buildExpression(\n        group.value.value,\n        options.withColor(group.value.color),\n        false\n    );\n\n    // \\color isn't supposed to affect the type of the elements it contains.\n    // To accomplish this, we wrap the results in a fragment, so the inner\n    // elements will be able to directly interact with their neighbors. For\n    // example, `\\color{red}{2 +} 3` has the same spacing as `2 + 3`\n    return new buildCommon.makeFragment(elements);\n};\n\ngroupTypes.supsub = function(group, options) {\n    // Superscript and subscripts are handled in the TeXbook on page\n    // 445-446, rules 18(a-f).\n\n    // Here is where we defer to the inner group if it should handle\n    // superscripts and subscripts itself.\n    if (shouldHandleSupSub(group.value.base, options)) {\n        return groupTypes[group.value.base.type](group, options);\n    }\n\n    var base = buildGroup(group.value.base, options.reset());\n    var supmid;\n    var submid;\n    var sup;\n    var sub;\n\n    var style = options.style;\n    var newOptions;\n\n    if (group.value.sup) {\n        newOptions = options.withStyle(style.sup());\n        sup = buildGroup(group.value.sup, newOptions);\n        supmid = makeSpan([style.reset(), style.sup().cls()],\n            [sup], newOptions);\n    }\n\n    if (group.value.sub) {\n        newOptions = options.withStyle(style.sub());\n        sub = buildGroup(group.value.sub, newOptions);\n        submid = makeSpan([style.reset(), style.sub().cls()],\n            [sub], newOptions);\n    }\n\n    // Rule 18a\n    var supShift;\n    var subShift;\n    if (isCharacterBox(group.value.base)) {\n        supShift = 0;\n        subShift = 0;\n    } else {\n        supShift = base.height - style.metrics.supDrop;\n        subShift = base.depth + style.metrics.subDrop;\n    }\n\n    // Rule 18c\n    var minSupShift;\n    if (style === Style.DISPLAY) {\n        minSupShift = style.metrics.sup1;\n    } else if (style.cramped) {\n        minSupShift = style.metrics.sup3;\n    } else {\n        minSupShift = style.metrics.sup2;\n    }\n\n    // scriptspace is a font-size-independent size, so scale it\n    // appropriately\n    var multiplier = Style.TEXT.sizeMultiplier *\n            style.sizeMultiplier;\n    var scriptspace =\n        (0.5 / fontMetrics.metrics.ptPerEm) / multiplier + \"em\";\n\n    var supsub;\n    if (!group.value.sup) {\n        // Rule 18b\n        subShift = Math.max(\n            subShift, style.metrics.sub1,\n            sub.height - 0.8 * style.metrics.xHeight);\n\n        supsub = buildCommon.makeVList([\n            {type: \"elem\", elem: submid}\n        ], \"shift\", subShift, options);\n\n        supsub.children[0].style.marginRight = scriptspace;\n\n        // Subscripts shouldn't be shifted by the base's italic correction.\n        // Account for that by shifting the subscript back the appropriate\n        // amount. Note we only do this when the base is a single symbol.\n        if (base instanceof domTree.symbolNode) {\n            supsub.children[0].style.marginLeft = -base.italic + \"em\";\n        }\n    } else if (!group.value.sub) {\n        // Rule 18c, d\n        supShift = Math.max(supShift, minSupShift,\n            sup.depth + 0.25 * style.metrics.xHeight);\n\n        supsub = buildCommon.makeVList([\n            {type: \"elem\", elem: supmid}\n        ], \"shift\", -supShift, options);\n\n        supsub.children[0].style.marginRight = scriptspace;\n    } else {\n        supShift = Math.max(\n            supShift, minSupShift, sup.depth + 0.25 * style.metrics.xHeight);\n        subShift = Math.max(subShift, style.metrics.sub2);\n\n        var ruleWidth = fontMetrics.metrics.defaultRuleThickness;\n\n        // Rule 18e\n        if ((supShift - sup.depth) - (sub.height - subShift) <\n                4 * ruleWidth) {\n            subShift = 4 * ruleWidth - (supShift - sup.depth) + sub.height;\n            var psi = 0.8 * style.metrics.xHeight - (supShift - sup.depth);\n            if (psi > 0) {\n                supShift += psi;\n                subShift -= psi;\n            }\n        }\n\n        supsub = buildCommon.makeVList([\n            {type: \"elem\", elem: submid, shift: subShift},\n            {type: \"elem\", elem: supmid, shift: -supShift}\n        ], \"individualShift\", null, options);\n\n        // See comment above about subscripts not being shifted\n        if (base instanceof domTree.symbolNode) {\n            supsub.children[0].style.marginLeft = -base.italic + \"em\";\n        }\n\n        supsub.children[0].style.marginRight = scriptspace;\n        supsub.children[1].style.marginRight = scriptspace;\n    }\n\n    // We ensure to wrap the supsub vlist in a span.msupsub to reset text-align\n    var mclass = getTypeOfDomTree(base) || \"mord\";\n    return makeSpan([mclass],\n        [base, makeSpan([\"msupsub\"], [supsub])],\n        options);\n};\n\ngroupTypes.genfrac = function(group, options) {\n    // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).\n    // Figure out what style this fraction should be in based on the\n    // function used\n    var style = options.style;\n    if (group.value.size === \"display\") {\n        style = Style.DISPLAY;\n    } else if (group.value.size === \"text\") {\n        style = Style.TEXT;\n    }\n\n    var nstyle = style.fracNum();\n    var dstyle = style.fracDen();\n    var newOptions;\n\n    newOptions = options.withStyle(nstyle);\n    var numer = buildGroup(group.value.numer, newOptions);\n    var numerreset = makeSpan([style.reset(), nstyle.cls()],\n        [numer], newOptions);\n\n    newOptions = options.withStyle(dstyle);\n    var denom = buildGroup(group.value.denom, newOptions);\n    var denomreset = makeSpan([style.reset(), dstyle.cls()],\n        [denom], newOptions);\n\n    var ruleWidth;\n    if (group.value.hasBarLine) {\n        ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n            options.style.sizeMultiplier;\n    } else {\n        ruleWidth = 0;\n    }\n\n    // Rule 15b\n    var numShift;\n    var clearance;\n    var denomShift;\n    if (style.size === Style.DISPLAY.size) {\n        numShift = style.metrics.num1;\n        if (ruleWidth > 0) {\n            clearance = 3 * ruleWidth;\n        } else {\n            clearance = 7 * fontMetrics.metrics.defaultRuleThickness;\n        }\n        denomShift = style.metrics.denom1;\n    } else {\n        if (ruleWidth > 0) {\n            numShift = style.metrics.num2;\n            clearance = ruleWidth;\n        } else {\n            numShift = style.metrics.num3;\n            clearance = 3 * fontMetrics.metrics.defaultRuleThickness;\n        }\n        denomShift = style.metrics.denom2;\n    }\n\n    var frac;\n    if (ruleWidth === 0) {\n        // Rule 15c\n        var candidateClearance =\n            (numShift - numer.depth) - (denom.height - denomShift);\n        if (candidateClearance < clearance) {\n            numShift += 0.5 * (clearance - candidateClearance);\n            denomShift += 0.5 * (clearance - candidateClearance);\n        }\n\n        frac = buildCommon.makeVList([\n            {type: \"elem\", elem: denomreset, shift: denomShift},\n            {type: \"elem\", elem: numerreset, shift: -numShift}\n        ], \"individualShift\", null, options);\n    } else {\n        // Rule 15d\n        var axisHeight = style.metrics.axisHeight;\n\n        if ((numShift - numer.depth) - (axisHeight + 0.5 * ruleWidth) <\n                clearance) {\n            numShift +=\n                clearance - ((numShift - numer.depth) -\n                             (axisHeight + 0.5 * ruleWidth));\n        }\n\n        if ((axisHeight - 0.5 * ruleWidth) - (denom.height - denomShift) <\n                clearance) {\n            denomShift +=\n                clearance - ((axisHeight - 0.5 * ruleWidth) -\n                             (denom.height - denomShift));\n        }\n\n        var mid = makeSpan(\n            [options.style.reset(), Style.TEXT.cls(), \"frac-line\"]);\n        // Manually set the height of the line because its height is\n        // created in CSS\n        mid.height = ruleWidth;\n\n        var midShift = -(axisHeight - 0.5 * ruleWidth);\n\n        frac = buildCommon.makeVList([\n            {type: \"elem\", elem: denomreset, shift: denomShift},\n            {type: \"elem\", elem: mid,        shift: midShift},\n            {type: \"elem\", elem: numerreset, shift: -numShift}\n        ], \"individualShift\", null, options);\n    }\n\n    // Since we manually change the style sometimes (with \\dfrac or \\tfrac),\n    // account for the possible size change here.\n    frac.height *= style.sizeMultiplier / options.style.sizeMultiplier;\n    frac.depth *= style.sizeMultiplier / options.style.sizeMultiplier;\n\n    // Rule 15e\n    var delimSize;\n    if (style.size === Style.DISPLAY.size) {\n        delimSize = style.metrics.delim1;\n    } else {\n        delimSize = style.metrics.delim2;\n    }\n\n    var leftDelim;\n    var rightDelim;\n    if (group.value.leftDelim == null) {\n        leftDelim = makeNullDelimiter(options, [\"mopen\"]);\n    } else {\n        leftDelim = delimiter.customSizedDelim(\n            group.value.leftDelim, delimSize, true,\n            options.withStyle(style), group.mode, [\"mopen\"]);\n    }\n    if (group.value.rightDelim == null) {\n        rightDelim = makeNullDelimiter(options, [\"mclose\"]);\n    } else {\n        rightDelim = delimiter.customSizedDelim(\n            group.value.rightDelim, delimSize, true,\n            options.withStyle(style), group.mode, [\"mclose\"]);\n    }\n\n    return makeSpan(\n        [\"mord\", options.style.reset(), style.cls()],\n        [leftDelim, makeSpan([\"mfrac\"], [frac]), rightDelim],\n        options);\n};\n\nvar calculateSize = function(sizeValue, style) {\n    var x = sizeValue.number;\n    if (sizeValue.unit === \"ex\") {\n        x *= style.metrics.emPerEx;\n    } else if (sizeValue.unit === \"mu\") {\n        x /= 18;\n    }\n    return x;\n};\n\ngroupTypes.array = function(group, options) {\n    var r;\n    var c;\n    var nr = group.value.body.length;\n    var nc = 0;\n    var body = new Array(nr);\n\n    var style = options.style;\n\n    // Horizontal spacing\n    var pt = 1 / fontMetrics.metrics.ptPerEm;\n    var arraycolsep = 5 * pt; // \\arraycolsep in article.cls\n\n    // Vertical spacing\n    var baselineskip = 12 * pt; // see size10.clo\n    // Default \\arraystretch from lttab.dtx\n    // TODO(gagern): may get redefined once we have user-defined macros\n    var arraystretch = utils.deflt(group.value.arraystretch, 1);\n    var arrayskip = arraystretch * baselineskip;\n    var arstrutHeight = 0.7 * arrayskip; // \\strutbox in ltfsstrc.dtx and\n    var arstrutDepth = 0.3 * arrayskip;  // \\@arstrutbox in lttab.dtx\n\n    var totalHeight = 0;\n    for (r = 0; r < group.value.body.length; ++r) {\n        var inrow = group.value.body[r];\n        var height = arstrutHeight; // \\@array adds an \\@arstrut\n        var depth = arstrutDepth;   // to each tow (via the template)\n\n        if (nc < inrow.length) {\n            nc = inrow.length;\n        }\n\n        var outrow = new Array(inrow.length);\n        for (c = 0; c < inrow.length; ++c) {\n            var elt = buildGroup(inrow[c], options);\n            if (depth < elt.depth) {\n                depth = elt.depth;\n            }\n            if (height < elt.height) {\n                height = elt.height;\n            }\n            outrow[c] = elt;\n        }\n\n        var gap = 0;\n        if (group.value.rowGaps[r]) {\n            gap = calculateSize(group.value.rowGaps[r].value, style);\n            if (gap > 0) { // \\@argarraycr\n                gap += arstrutDepth;\n                if (depth < gap) {\n                    depth = gap; // \\@xargarraycr\n                }\n                gap = 0;\n            }\n        }\n\n        outrow.height = height;\n        outrow.depth = depth;\n        totalHeight += height;\n        outrow.pos = totalHeight;\n        totalHeight += depth + gap; // \\@yargarraycr\n        body[r] = outrow;\n    }\n\n    var offset = totalHeight / 2 + style.metrics.axisHeight;\n    var colDescriptions = group.value.cols || [];\n    var cols = [];\n    var colSep;\n    var colDescrNum;\n    for (c = 0, colDescrNum = 0;\n         // Continue while either there are more columns or more column\n         // descriptions, so trailing separators don't get lost.\n         c < nc || colDescrNum < colDescriptions.length;\n         ++c, ++colDescrNum) {\n\n        var colDescr = colDescriptions[colDescrNum] || {};\n\n        var firstSeparator = true;\n        while (colDescr.type === \"separator\") {\n            // If there is more than one separator in a row, add a space\n            // between them.\n            if (!firstSeparator) {\n                colSep = makeSpan([\"arraycolsep\"], []);\n                colSep.style.width =\n                    fontMetrics.metrics.doubleRuleSep + \"em\";\n                cols.push(colSep);\n            }\n\n            if (colDescr.separator === \"|\") {\n                var separator = makeSpan(\n                    [\"vertical-separator\"],\n                    []);\n                separator.style.height = totalHeight + \"em\";\n                separator.style.verticalAlign =\n                    -(totalHeight - offset) + \"em\";\n\n                cols.push(separator);\n            } else {\n                throw new ParseError(\n                    \"Invalid separator type: \" + colDescr.separator);\n            }\n\n            colDescrNum++;\n            colDescr = colDescriptions[colDescrNum] || {};\n            firstSeparator = false;\n        }\n\n        if (c >= nc) {\n            continue;\n        }\n\n        var sepwidth;\n        if (c > 0 || group.value.hskipBeforeAndAfter) {\n            sepwidth = utils.deflt(colDescr.pregap, arraycolsep);\n            if (sepwidth !== 0) {\n                colSep = makeSpan([\"arraycolsep\"], []);\n                colSep.style.width = sepwidth + \"em\";\n                cols.push(colSep);\n            }\n        }\n\n        var col = [];\n        for (r = 0; r < nr; ++r) {\n            var row = body[r];\n            var elem = row[c];\n            if (!elem) {\n                continue;\n            }\n            var shift = row.pos - offset;\n            elem.depth = row.depth;\n            elem.height = row.height;\n            col.push({type: \"elem\", elem: elem, shift: shift});\n        }\n\n        col = buildCommon.makeVList(col, \"individualShift\", null, options);\n        col = makeSpan(\n            [\"col-align-\" + (colDescr.align || \"c\")],\n            [col]);\n        cols.push(col);\n\n        if (c < nc - 1 || group.value.hskipBeforeAndAfter) {\n            sepwidth = utils.deflt(colDescr.postgap, arraycolsep);\n            if (sepwidth !== 0) {\n                colSep = makeSpan([\"arraycolsep\"], []);\n                colSep.style.width = sepwidth + \"em\";\n                cols.push(colSep);\n            }\n        }\n    }\n    body = makeSpan([\"mtable\"], cols);\n    return makeSpan([\"mord\"], [body], options);\n};\n\ngroupTypes.spacing = function(group, options) {\n    if (group.value === \"\\\\ \" || group.value === \"\\\\space\" ||\n        group.value === \" \" || group.value === \"~\") {\n        // Spaces are generated by adding an actual space. Each of these\n        // things has an entry in the symbols table, so these will be turned\n        // into appropriate outputs.\n        if (group.mode === \"text\") {\n            return buildCommon.makeOrd(group, options, \"textord\");\n        } else {\n            return makeSpan([\"mspace\"],\n                [buildCommon.mathsym(group.value, group.mode, options)],\n                options);\n        }\n    } else {\n        // Other kinds of spaces are of arbitrary width. We use CSS to\n        // generate these.\n        return makeSpan(\n            [\"mspace\",\n                buildCommon.spacingFunctions[group.value].className],\n            [], options);\n    }\n};\n\ngroupTypes.llap = function(group, options) {\n    var inner = makeSpan(\n        [\"inner\"], [buildGroup(group.value.body, options.reset())]);\n    var fix = makeSpan([\"fix\"], []);\n    return makeSpan(\n        [\"mord\", \"llap\", options.style.cls()], [inner, fix], options);\n};\n\ngroupTypes.rlap = function(group, options) {\n    var inner = makeSpan(\n        [\"inner\"], [buildGroup(group.value.body, options.reset())]);\n    var fix = makeSpan([\"fix\"], []);\n    return makeSpan(\n        [\"mord\", \"rlap\", options.style.cls()], [inner, fix], options);\n};\n\ngroupTypes.op = function(group, options) {\n    // Operators are handled in the TeXbook pg. 443-444, rule 13(a).\n    var supGroup;\n    var subGroup;\n    var hasLimits = false;\n    if (group.type === \"supsub\") {\n        // If we have limits, supsub will pass us its group to handle. Pull\n        // out the superscript and subscript and set the group to the op in\n        // its base.\n        supGroup = group.value.sup;\n        subGroup = group.value.sub;\n        group = group.value.base;\n        hasLimits = true;\n    }\n\n    var style = options.style;\n\n    // Most operators have a large successor symbol, but these don't.\n    var noSuccessor = [\n        \"\\\\smallint\"\n    ];\n\n    var large = false;\n    if (style.size === Style.DISPLAY.size &&\n        group.value.symbol &&\n        !utils.contains(noSuccessor, group.value.body)) {\n\n        // Most symbol operators get larger in displaystyle (rule 13)\n        large = true;\n    }\n\n    var base;\n    var baseShift = 0;\n    var slant = 0;\n    if (group.value.symbol) {\n        // If this is a symbol, create the symbol.\n        var fontName = large ? \"Size2-Regular\" : \"Size1-Regular\";\n        base = buildCommon.makeSymbol(\n            group.value.body, fontName, \"math\", options,\n            [\"mop\", \"op-symbol\", large ? \"large-op\" : \"small-op\"]);\n\n        // Shift the symbol so its center lies on the axis (rule 13). It\n        // appears that our fonts have the centers of the symbols already\n        // almost on the axis, so these numbers are very small. Note we\n        // don't actually apply this here, but instead it is used either in\n        // the vlist creation or separately when there are no limits.\n        baseShift = (base.height - base.depth) / 2 -\n            style.metrics.axisHeight * style.sizeMultiplier;\n\n        // The slant of the symbol is just its italic correction.\n        slant = base.italic;\n    } else if (group.value.value) {\n        // If this is a list, compose that list.\n        var inner = buildExpression(group.value.value, options, true);\n\n        base = makeSpan([\"mop\"], inner, options);\n    } else {\n        // Otherwise, this is a text operator. Build the text from the\n        // operator's name.\n        // TODO(emily): Add a space in the middle of some of these\n        // operators, like \\limsup\n        var output = [];\n        for (var i = 1; i < group.value.body.length; i++) {\n            output.push(buildCommon.mathsym(group.value.body[i], group.mode));\n        }\n        base = makeSpan([\"mop\"], output, options);\n    }\n\n    if (hasLimits) {\n        // IE 8 clips \\int if it is in a display: inline-block. We wrap it\n        // in a new span so it is an inline, and works.\n        base = makeSpan([], [base]);\n\n        var supmid;\n        var supKern;\n        var submid;\n        var subKern;\n        var newOptions;\n        // We manually have to handle the superscripts and subscripts. This,\n        // aside from the kern calculations, is copied from supsub.\n        if (supGroup) {\n            newOptions = options.withStyle(style.sup());\n            var sup = buildGroup(supGroup, newOptions);\n            supmid = makeSpan([style.reset(), style.sup().cls()],\n                [sup], newOptions);\n\n            supKern = Math.max(\n                fontMetrics.metrics.bigOpSpacing1,\n                fontMetrics.metrics.bigOpSpacing3 - sup.depth);\n        }\n\n        if (subGroup) {\n            newOptions = options.withStyle(style.sub());\n            var sub = buildGroup(subGroup, newOptions);\n            submid = makeSpan([style.reset(), style.sub().cls()],\n                [sub], newOptions);\n\n            subKern = Math.max(\n                fontMetrics.metrics.bigOpSpacing2,\n                fontMetrics.metrics.bigOpSpacing4 - sub.height);\n        }\n\n        // Build the final group as a vlist of the possible subscript, base,\n        // and possible superscript.\n        var finalGroup;\n        var top;\n        var bottom;\n        if (!supGroup) {\n            top = base.height - baseShift;\n\n            finalGroup = buildCommon.makeVList([\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5},\n                {type: \"elem\", elem: submid},\n                {type: \"kern\", size: subKern},\n                {type: \"elem\", elem: base}\n            ], \"top\", top, options);\n\n            // Here, we shift the limits by the slant of the symbol. Note\n            // that we are supposed to shift the limits by 1/2 of the slant,\n            // but since we are centering the limits adding a full slant of\n            // margin will shift by 1/2 that.\n            finalGroup.children[0].style.marginLeft = -slant + \"em\";\n        } else if (!subGroup) {\n            bottom = base.depth + baseShift;\n\n            finalGroup = buildCommon.makeVList([\n                {type: \"elem\", elem: base},\n                {type: \"kern\", size: supKern},\n                {type: \"elem\", elem: supmid},\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5}\n            ], \"bottom\", bottom, options);\n\n            // See comment above about slants\n            finalGroup.children[1].style.marginLeft = slant + \"em\";\n        } else if (!supGroup && !subGroup) {\n            // This case probably shouldn't occur (this would mean the\n            // supsub was sending us a group with no superscript or\n            // subscript) but be safe.\n            return base;\n        } else {\n            bottom = fontMetrics.metrics.bigOpSpacing5 +\n                submid.height + submid.depth +\n                subKern +\n                base.depth + baseShift;\n\n            finalGroup = buildCommon.makeVList([\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5},\n                {type: \"elem\", elem: submid},\n                {type: \"kern\", size: subKern},\n                {type: \"elem\", elem: base},\n                {type: \"kern\", size: supKern},\n                {type: \"elem\", elem: supmid},\n                {type: \"kern\", size: fontMetrics.metrics.bigOpSpacing5}\n            ], \"bottom\", bottom, options);\n\n            // See comment above about slants\n            finalGroup.children[0].style.marginLeft = -slant + \"em\";\n            finalGroup.children[2].style.marginLeft = slant + \"em\";\n        }\n\n        return makeSpan([\"mop\", \"op-limits\"], [finalGroup], options);\n    } else {\n        if (group.value.symbol) {\n            base.style.top = baseShift + \"em\";\n        }\n\n        return base;\n    }\n};\n\ngroupTypes.mod = function(group, options) {\n    var inner = [];\n\n    if (group.value.modType === \"bmod\") {\n        // “\\nonscript\\mskip-\\medmuskip\\mkern5mu”\n        if (!options.style.isTight()) {\n            inner.push(makeSpan(\n                [\"mspace\", \"negativemediumspace\"], [], options));\n        }\n        inner.push(makeSpan([\"mspace\", \"thickspace\"], [], options));\n    } else if (options.style.size === Style.DISPLAY.size) {\n        inner.push(makeSpan([\"mspace\", \"quad\"], [], options));\n    } else if (group.value.modType === \"mod\") {\n        inner.push(makeSpan([\"mspace\", \"twelvemuspace\"], [], options));\n    } else {\n        inner.push(makeSpan([\"mspace\", \"eightmuspace\"], [], options));\n    }\n\n    if (group.value.modType === \"pod\" || group.value.modType === \"pmod\") {\n        inner.push(buildCommon.mathsym(\"(\", group.mode));\n    }\n\n    if (group.value.modType !== \"pod\") {\n        var modInner = [\n            buildCommon.mathsym(\"m\", group.mode),\n            buildCommon.mathsym(\"o\", group.mode),\n            buildCommon.mathsym(\"d\", group.mode)];\n        if (group.value.modType === \"bmod\") {\n            inner.push(makeSpan([\"mbin\"], modInner, options));\n            // “\\mkern5mu\\nonscript\\mskip-\\medmuskip”\n            inner.push(makeSpan([\"mspace\", \"thickspace\"], [], options));\n            if (!options.style.isTight()) {\n                inner.push(makeSpan(\n                    [\"mspace\", \"negativemediumspace\"], [], options));\n            }\n        } else {\n            Array.prototype.push.apply(inner, modInner);\n            inner.push(makeSpan([\"mspace\", \"sixmuspace\"], [], options));\n        }\n    }\n\n    if (group.value.value) {\n        Array.prototype.push.apply(inner,\n            buildExpression(group.value.value, options, false));\n    }\n\n    if (group.value.modType === \"pod\" || group.value.modType === \"pmod\") {\n        inner.push(buildCommon.mathsym(\")\", group.mode));\n    }\n\n    return buildCommon.makeFragment(inner);\n};\n\ngroupTypes.katex = function(group, options) {\n    // The KaTeX logo. The offsets for the K and a were chosen to look\n    // good, but the offsets for the T, E, and X were taken from the\n    // definition of \\TeX in TeX (see TeXbook pg. 356)\n    var k = makeSpan(\n        [\"k\"], [buildCommon.mathsym(\"K\", group.mode)], options);\n    var a = makeSpan(\n        [\"a\"], [buildCommon.mathsym(\"A\", group.mode)], options);\n\n    a.height = (a.height + 0.2) * 0.75;\n    a.depth = (a.height - 0.2) * 0.75;\n\n    var t = makeSpan(\n        [\"t\"], [buildCommon.mathsym(\"T\", group.mode)], options);\n    var e = makeSpan(\n        [\"e\"], [buildCommon.mathsym(\"E\", group.mode)], options);\n\n    e.height = (e.height - 0.2155);\n    e.depth = (e.depth + 0.2155);\n\n    var x = makeSpan(\n        [\"x\"], [buildCommon.mathsym(\"X\", group.mode)], options);\n\n    return makeSpan(\n        [\"mord\", \"katex-logo\"], [k, a, t, e, x], options);\n};\n\ngroupTypes.overline = function(group, options) {\n    // Overlines are handled in the TeXbook pg 443, Rule 9.\n    var style = options.style;\n\n    // Build the inner group in the cramped style.\n    var innerGroup = buildGroup(group.value.body,\n            options.withStyle(style.cramp()));\n\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n        style.sizeMultiplier;\n\n    // Create the line above the body\n    var line = makeSpan(\n        [style.reset(), Style.TEXT.cls(), \"overline-line\"]);\n    line.height = ruleWidth;\n    line.maxFontSize = 1.0;\n\n    // Generate the vlist, with the appropriate kerns\n    var vlist = buildCommon.makeVList([\n        {type: \"elem\", elem: innerGroup},\n        {type: \"kern\", size: 3 * ruleWidth},\n        {type: \"elem\", elem: line},\n        {type: \"kern\", size: ruleWidth}\n    ], \"firstBaseline\", null, options);\n\n    return makeSpan([\"mord\", \"overline\"], [vlist], options);\n};\n\ngroupTypes.underline = function(group, options) {\n    // Underlines are handled in the TeXbook pg 443, Rule 10.\n    var style = options.style;\n\n    // Build the inner group.\n    var innerGroup = buildGroup(group.value.body, options);\n\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n        style.sizeMultiplier;\n\n    // Create the line above the body\n    var line = makeSpan([style.reset(), Style.TEXT.cls(), \"underline-line\"]);\n    line.height = ruleWidth;\n    line.maxFontSize = 1.0;\n\n    // Generate the vlist, with the appropriate kerns\n    var vlist = buildCommon.makeVList([\n        {type: \"kern\", size: ruleWidth},\n        {type: \"elem\", elem: line},\n        {type: \"kern\", size: 3 * ruleWidth},\n        {type: \"elem\", elem: innerGroup}\n    ], \"top\", innerGroup.height, options);\n\n    return makeSpan([\"mord\", \"underline\"], [vlist], options);\n};\n\ngroupTypes.sqrt = function(group, options) {\n    // Square roots are handled in the TeXbook pg. 443, Rule 11.\n    var style = options.style;\n\n    // First, we do the same steps as in overline to build the inner group\n    // and line\n    var inner = buildGroup(group.value.body, options.withStyle(style.cramp()));\n\n    var ruleWidth = fontMetrics.metrics.defaultRuleThickness /\n        style.sizeMultiplier;\n\n    var line = makeSpan(\n        [style.reset(), Style.TEXT.cls(), \"sqrt-line\"], [],\n        options);\n    line.height = ruleWidth;\n    line.maxFontSize = 1.0;\n\n    var phi = ruleWidth;\n    if (style.id < Style.TEXT.id) {\n        phi = style.metrics.xHeight;\n    }\n\n    // Calculate the clearance between the body and line\n    var lineClearance = ruleWidth + phi / 4;\n\n    var innerHeight = (inner.height + inner.depth) * style.sizeMultiplier;\n    var minDelimiterHeight = innerHeight + lineClearance + ruleWidth;\n\n    // Create a \\surd delimiter of the required minimum size\n    var delim = makeSpan([\"sqrt-sign\"], [\n        delimiter.customSizedDelim(\"\\\\surd\", minDelimiterHeight,\n                                   false, options, group.mode)],\n                         options);\n\n    var delimDepth = (delim.height + delim.depth) - ruleWidth;\n\n    // Adjust the clearance based on the delimiter size\n    if (delimDepth > inner.height + inner.depth + lineClearance) {\n        lineClearance =\n            (lineClearance + delimDepth - inner.height - inner.depth) / 2;\n    }\n\n    // Shift the delimiter so that its top lines up with the top of the line\n    var delimShift = -(inner.height + lineClearance + ruleWidth) + delim.height;\n    delim.style.top = delimShift + \"em\";\n    delim.height -= delimShift;\n    delim.depth += delimShift;\n\n    // We add a special case here, because even when `inner` is empty, we\n    // still get a line. So, we use a simple heuristic to decide if we\n    // should omit the body entirely. (note this doesn't work for something\n    // like `\\sqrt{\\rlap{x}}`, but if someone is doing that they deserve for\n    // it not to work.\n    var body;\n    if (inner.height === 0 && inner.depth === 0) {\n        body = makeSpan();\n    } else {\n        body = buildCommon.makeVList([\n            {type: \"elem\", elem: inner},\n            {type: \"kern\", size: lineClearance},\n            {type: \"elem\", elem: line},\n            {type: \"kern\", size: ruleWidth}\n        ], \"firstBaseline\", null, options);\n    }\n\n    if (!group.value.index) {\n        return makeSpan([\"mord\", \"sqrt\"], [delim, body], options);\n    } else {\n        // Handle the optional root index\n\n        // The index is always in scriptscript style\n        var newOptions = options.withStyle(Style.SCRIPTSCRIPT);\n        var root = buildGroup(group.value.index, newOptions);\n        var rootWrap = makeSpan(\n            [style.reset(), Style.SCRIPTSCRIPT.cls()],\n            [root],\n            newOptions);\n\n        // Figure out the height and depth of the inner part\n        var innerRootHeight = Math.max(delim.height, body.height);\n        var innerRootDepth = Math.max(delim.depth, body.depth);\n\n        // The amount the index is shifted by. This is taken from the TeX\n        // source, in the definition of `\\r@@t`.\n        var toShift = 0.6 * (innerRootHeight - innerRootDepth);\n\n        // Build a VList with the superscript shifted up correctly\n        var rootVList = buildCommon.makeVList(\n            [{type: \"elem\", elem: rootWrap}],\n            \"shift\", -toShift, options);\n        // Add a class surrounding it so we can add on the appropriate\n        // kerning\n        var rootVListWrap = makeSpan([\"root\"], [rootVList]);\n\n        return makeSpan([\"mord\", \"sqrt\"],\n            [rootVListWrap, delim, body], options);\n    }\n};\n\ngroupTypes.sizing = function(group, options) {\n    // Handle sizing operators like \\Huge. Real TeX doesn't actually allow\n    // these functions inside of math expressions, so we do some special\n    // handling.\n    var inner = buildExpression(group.value.value,\n            options.withSize(group.value.size), false);\n\n    // Compute the correct maxFontSize.\n    var style = options.style;\n    var fontSize = buildCommon.sizingMultiplier[group.value.size];\n    fontSize = fontSize * style.sizeMultiplier;\n\n    // Add size-resetting classes to the inner list and set maxFontSize\n    // manually. Handle nested size changes.\n    for (var i = 0; i < inner.length; i++) {\n        var pos = utils.indexOf(inner[i].classes, \"sizing\");\n        if (pos < 0) {\n            inner[i].classes.push(\"sizing\", \"reset-\" + options.size,\n                                  group.value.size, style.cls());\n            inner[i].maxFontSize = fontSize;\n        } else if (inner[i].classes[pos + 1] === \"reset-\" + group.value.size) {\n            // This is a nested size change: e.g., inner[i] is the \"b\" in\n            // `\\Huge a \\small b`. Override the old size (the `reset-` class)\n            // but not the new size.\n            inner[i].classes[pos + 1] = \"reset-\" + options.size;\n        }\n    }\n\n    return buildCommon.makeFragment(inner);\n};\n\ngroupTypes.styling = function(group, options) {\n    // Style changes are handled in the TeXbook on pg. 442, Rule 3.\n\n    // Figure out what style we're changing to.\n    var styleMap = {\n        \"display\": Style.DISPLAY,\n        \"text\": Style.TEXT,\n        \"script\": Style.SCRIPT,\n        \"scriptscript\": Style.SCRIPTSCRIPT\n    };\n\n    var newStyle = styleMap[group.value.style];\n    var newOptions = options.withStyle(newStyle);\n\n    // Build the inner expression in the new style.\n    var inner = buildExpression(\n        group.value.value, newOptions, false);\n\n    // Add style-resetting classes to the inner list. Handle nested changes.\n    for (var i = 0; i < inner.length; i++) {\n        var pos = utils.indexOf(inner[i].classes, newStyle.reset());\n        if (pos < 0) {\n            inner[i].classes.push(options.style.reset(), newStyle.cls());\n        } else {\n            // This is a nested style change, as `\\textstyle a\\scriptstyle b`.\n            // Only override the old style (the reset class).\n            inner[i].classes[pos] = options.style.reset();\n        }\n    }\n\n    return new buildCommon.makeFragment(inner);\n};\n\ngroupTypes.font = function(group, options) {\n    var font = group.value.font;\n    return buildGroup(group.value.body, options.withFont(font));\n};\n\ngroupTypes.delimsizing = function(group, options) {\n    var delim = group.value.value;\n\n    if (delim === \".\") {\n        // Empty delimiters still count as elements, even though they don't\n        // show anything.\n        return makeSpan([group.value.mclass]);\n    }\n\n    // Use delimiter.sizedDelim to generate the delimiter.\n    return delimiter.sizedDelim(\n            delim, group.value.size, options, group.mode,\n            [group.value.mclass]);\n};\n\ngroupTypes.leftright = function(group, options) {\n    // Build the inner expression\n    var inner = buildExpression(group.value.body, options.reset(), true);\n\n    var innerHeight = 0;\n    var innerDepth = 0;\n    var hadMiddle = false;\n\n    // Calculate its height and depth\n    for (var i = 0; i < inner.length; i++) {\n        if (inner[i].isMiddle) {\n            hadMiddle = true;\n        } else {\n            innerHeight = Math.max(inner[i].height, innerHeight);\n            innerDepth = Math.max(inner[i].depth, innerDepth);\n        }\n    }\n\n    var style = options.style;\n\n    // The size of delimiters is the same, regardless of what style we are\n    // in. Thus, to correctly calculate the size of delimiter we need around\n    // a group, we scale down the inner size based on the size.\n    innerHeight *= style.sizeMultiplier;\n    innerDepth *= style.sizeMultiplier;\n\n    var leftDelim;\n    if (group.value.left === \".\") {\n        // Empty delimiters in \\left and \\right make null delimiter spaces.\n        leftDelim = makeNullDelimiter(options, [\"mopen\"]);\n    } else {\n        // Otherwise, use leftRightDelim to generate the correct sized\n        // delimiter.\n        leftDelim = delimiter.leftRightDelim(\n            group.value.left, innerHeight, innerDepth, options,\n            group.mode, [\"mopen\"]);\n    }\n    // Add it to the beginning of the expression\n    inner.unshift(leftDelim);\n\n    // Handle middle delimiters\n    if (hadMiddle) {\n        for (i = 1; i < inner.length; i++) {\n            if (inner[i].isMiddle) {\n                // Apply the options that were active when \\middle was called\n                inner[i] = delimiter.leftRightDelim(\n                    inner[i].isMiddle.value, innerHeight, innerDepth,\n                    inner[i].isMiddle.options, group.mode, []);\n            }\n        }\n    }\n\n    var rightDelim;\n    // Same for the right delimiter\n    if (group.value.right === \".\") {\n        rightDelim = makeNullDelimiter(options, [\"mclose\"]);\n    } else {\n        rightDelim = delimiter.leftRightDelim(\n            group.value.right, innerHeight, innerDepth, options,\n            group.mode, [\"mclose\"]);\n    }\n    // Add it to the end of the expression.\n    inner.push(rightDelim);\n\n    return makeSpan(\n        [\"minner\", style.cls()], inner, options);\n};\n\ngroupTypes.middle = function(group, options) {\n    var middleDelim;\n    if (group.value.value === \".\") {\n        middleDelim = makeNullDelimiter(options, []);\n    } else {\n        middleDelim = delimiter.sizedDelim(\n            group.value.value, 1, options,\n            group.mode, []);\n        middleDelim.isMiddle = {value: group.value.value, options: options};\n    }\n    return middleDelim;\n};\n\ngroupTypes.rule = function(group, options) {\n    // Make an empty span for the rule\n    var rule = makeSpan([\"mord\", \"rule\"], [], options);\n    var style = options.style;\n\n    // Calculate the shift, width, and height of the rule, and account for units\n    var shift = 0;\n    if (group.value.shift) {\n        shift = calculateSize(group.value.shift, style);\n    }\n\n    var width = calculateSize(group.value.width, style);\n    var height = calculateSize(group.value.height, style);\n\n    // The sizes of rules are absolute, so make it larger if we are in a\n    // smaller style.\n    shift /= style.sizeMultiplier;\n    width /= style.sizeMultiplier;\n    height /= style.sizeMultiplier;\n\n    // Style the rule to the right size\n    rule.style.borderRightWidth = width + \"em\";\n    rule.style.borderTopWidth = height + \"em\";\n    rule.style.bottom = shift + \"em\";\n\n    // Record the height and width\n    rule.width = width;\n    rule.height = height + shift;\n    rule.depth = -shift;\n\n    return rule;\n};\n\ngroupTypes.kern = function(group, options) {\n    // Make an empty span for the rule\n    var rule = makeSpan([\"mord\", \"rule\"], [], options);\n    var style = options.style;\n\n    var dimension = 0;\n    if (group.value.dimension) {\n        dimension = calculateSize(group.value.dimension, style);\n    }\n\n    dimension /= style.sizeMultiplier;\n\n    rule.style.marginLeft = dimension + \"em\";\n\n    return rule;\n};\n\ngroupTypes.accent = function(group, options) {\n    // Accents are handled in the TeXbook pg. 443, rule 12.\n    var base = group.value.base;\n    var style = options.style;\n\n    var supsubGroup;\n    if (group.type === \"supsub\") {\n        // If our base is a character box, and we have superscripts and\n        // subscripts, the supsub will defer to us. In particular, we want\n        // to attach the superscripts and subscripts to the inner body (so\n        // that the position of the superscripts and subscripts won't be\n        // affected by the height of the accent). We accomplish this by\n        // sticking the base of the accent into the base of the supsub, and\n        // rendering that, while keeping track of where the accent is.\n\n        // The supsub group is the group that was passed in\n        var supsub = group;\n        // The real accent group is the base of the supsub group\n        group = supsub.value.base;\n        // The character box is the base of the accent group\n        base = group.value.base;\n        // Stick the character box into the base of the supsub group\n        supsub.value.base = base;\n\n        // Rerender the supsub group with its new base, and store that\n        // result.\n        supsubGroup = buildGroup(\n            supsub, options.reset());\n    }\n\n    // Build the base group\n    var body = buildGroup(\n        base, options.withStyle(style.cramp()));\n\n    // Calculate the skew of the accent. This is based on the line \"If the\n    // nucleus is not a single character, let s = 0; otherwise set s to the\n    // kern amount for the nucleus followed by the \\skewchar of its font.\"\n    // Note that our skew metrics are just the kern between each character\n    // and the skewchar.\n    var skew;\n    if (isCharacterBox(base)) {\n        // If the base is a character box, then we want the skew of the\n        // innermost character. To do that, we find the innermost character:\n        var baseChar = getBaseElem(base);\n        // Then, we render its group to get the symbol inside it\n        var baseGroup = buildGroup(\n            baseChar, options.withStyle(style.cramp()));\n        // Finally, we pull the skew off of the symbol.\n        skew = baseGroup.skew;\n        // Note that we now throw away baseGroup, because the layers we\n        // removed with getBaseElem might contain things like \\color which\n        // we can't get rid of.\n        // TODO(emily): Find a better way to get the skew\n    } else {\n        skew = 0;\n    }\n\n    // calculate the amount of space between the body and the accent\n    var clearance = Math.min(\n        body.height,\n        style.metrics.xHeight);\n\n    // Build the accent\n    var accent = buildCommon.makeSymbol(\n        group.value.accent, \"Main-Regular\", \"math\", options);\n    // Remove the italic correction of the accent, because it only serves to\n    // shift the accent over to a place we don't want.\n    accent.italic = 0;\n\n    // The \\vec character that the fonts use is a combining character, and\n    // thus shows up much too far to the left. To account for this, we add a\n    // specific class which shifts the accent over to where we want it.\n    // TODO(emily): Fix this in a better way, like by changing the font\n    var vecClass = group.value.accent === \"\\\\vec\" ? \"accent-vec\" : null;\n\n    var accentBody = makeSpan([\"accent-body\", vecClass], [\n        makeSpan([], [accent])]);\n\n    accentBody = buildCommon.makeVList([\n        {type: \"elem\", elem: body},\n        {type: \"kern\", size: -clearance},\n        {type: \"elem\", elem: accentBody}\n    ], \"firstBaseline\", null, options);\n\n    // Shift the accent over by the skew. Note we shift by twice the skew\n    // because we are centering the accent, so by adding 2*skew to the left,\n    // we shift it to the right by 1*skew.\n    accentBody.children[1].style.marginLeft = 2 * skew + \"em\";\n\n    var accentWrap = makeSpan([\"mord\", \"accent\"], [accentBody], options);\n\n    if (supsubGroup) {\n        // Here, we replace the \"base\" child of the supsub with our newly\n        // generated accent.\n        supsubGroup.children[0] = accentWrap;\n\n        // Since we don't rerun the height calculation after replacing the\n        // accent, we manually recalculate height.\n        supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height);\n\n        // Accents should always be ords, even when their innards are not.\n        supsubGroup.classes[0] = \"mord\";\n\n        return supsubGroup;\n    } else {\n        return accentWrap;\n    }\n};\n\ngroupTypes.phantom = function(group, options) {\n    var elements = buildExpression(\n        group.value.value,\n        options.withPhantom(),\n        false\n    );\n\n    // \\phantom isn't supposed to affect the elements it contains.\n    // See \"color\" for more details.\n    return new buildCommon.makeFragment(elements);\n};\n\ngroupTypes.mclass = function(group, options) {\n    var elements = buildExpression(group.value.value, options, true);\n\n    return makeSpan([group.value.mclass], elements, options);\n};\n\n/**\n * buildGroup is the function that takes a group and calls the correct groupType\n * function for it. It also handles the interaction of size and style changes\n * between parents and children.\n */\nvar buildGroup = function(group, options) {\n    if (!group) {\n        return makeSpan();\n    }\n\n    if (groupTypes[group.type]) {\n        // Call the groupTypes function\n        var groupNode = groupTypes[group.type](group, options);\n        var multiplier;\n\n        // If the style changed between the parent and the current group,\n        // account for the size difference\n        if (options.style !== options.parentStyle) {\n            multiplier = options.style.sizeMultiplier /\n                    options.parentStyle.sizeMultiplier;\n\n            groupNode.height *= multiplier;\n            groupNode.depth *= multiplier;\n        }\n\n        // If the size changed between the parent and the current group, account\n        // for that size difference.\n        if (options.size !== options.parentSize) {\n            multiplier = buildCommon.sizingMultiplier[options.size] /\n                    buildCommon.sizingMultiplier[options.parentSize];\n\n            groupNode.height *= multiplier;\n            groupNode.depth *= multiplier;\n        }\n\n        return groupNode;\n    } else {\n        throw new ParseError(\n            \"Got group of unknown type: '\" + group.type + \"'\");\n    }\n};\n\n/**\n * Take an entire parse tree, and build it into an appropriate set of HTML\n * nodes.\n */\nvar buildHTML = function(tree, options) {\n    // buildExpression is destructive, so we need to make a clone\n    // of the incoming tree so that it isn't accidentally changed\n    tree = JSON.parse(JSON.stringify(tree));\n\n    // Build the expression contained in the tree\n    var expression = buildExpression(tree, options, true);\n    var body = makeSpan([\"base\", options.style.cls()], expression, options);\n\n    // Add struts, which ensure that the top of the HTML element falls at the\n    // height of the expression, and the bottom of the HTML element falls at the\n    // depth of the expression.\n    var topStrut = makeSpan([\"strut\"]);\n    var bottomStrut = makeSpan([\"strut\", \"bottom\"]);\n\n    topStrut.style.height = body.height + \"em\";\n    bottomStrut.style.height = (body.height + body.depth) + \"em\";\n    // We'd like to use `vertical-align: top` but in IE 9 this lowers the\n    // baseline of the box to the bottom of this strut (instead staying in the\n    // normal place) so we use an absolute value for vertical-align instead\n    bottomStrut.style.verticalAlign = -body.depth + \"em\";\n\n    // Wrap the struts and body together\n    var htmlNode = makeSpan([\"katex-html\"], [topStrut, bottomStrut, body]);\n\n    htmlNode.setAttribute(\"aria-hidden\", \"true\");\n\n    return htmlNode;\n};\n\nmodule.exports = buildHTML;\n"]},"metadata":{},"sourceType":"script"}