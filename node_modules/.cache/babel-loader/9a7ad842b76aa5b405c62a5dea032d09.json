{"ast":null,"code":"function getRelocatable(re) {\n  // In the future, this could use a WeakMap instead of an expando.\n  if (!re.__matchAtRelocatable) {\n    // Disjunctions are the lowest-precedence operator, so we can make any\n    // pattern match the empty string by appending `|()` to it:\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns\n    var source = re.source + '|()'; // We always make the new regex global.\n\n    var flags = 'g' + (re.ignoreCase ? 'i' : '') + (re.multiline ? 'm' : '') + (re.unicode ? 'u' : '') // sticky (/.../y) doesn't make sense in conjunction with our relocation\n    // logic, so we ignore it here.\n    ;\n    re.__matchAtRelocatable = new RegExp(source, flags);\n  }\n\n  return re.__matchAtRelocatable;\n}\n\nfunction matchAt(re, str, pos) {\n  if (re.global || re.sticky) {\n    throw new Error('matchAt(...): Only non-global regexes are supported');\n  }\n\n  var reloc = getRelocatable(re);\n  reloc.lastIndex = pos;\n  var match = reloc.exec(str); // Last capturing group is our sentinel that indicates whether the regex\n  // matched at the given location.\n\n  if (match[match.length - 1] == null) {\n    // Original regex matched.\n    match.length = match.length - 1;\n    return match;\n  } else {\n    return null;\n  }\n}\n\nmodule.exports = matchAt;","map":{"version":3,"sources":["/Users/justinf/perseus-configured/node_modules/match-at/lib/matchAt.js"],"names":["getRelocatable","re","__matchAtRelocatable","source","flags","ignoreCase","multiline","unicode","RegExp","matchAt","str","pos","global","sticky","Error","reloc","lastIndex","match","exec","length","module","exports"],"mappings":"AAAA,SAASA,cAAT,CAAwBC,EAAxB,EAA4B;AAC1B;AACA,MAAI,CAACA,EAAE,CAACC,oBAAR,EAA8B;AAC5B;AACA;AACA;AACA,QAAIC,MAAM,GAAGF,EAAE,CAACE,MAAH,GAAY,KAAzB,CAJ4B,CAM5B;;AACA,QAAIC,KAAK,GAAG,OAAOH,EAAE,CAACI,UAAH,GAAgB,GAAhB,GAAsB,EAA7B,KAAoCJ,EAAE,CAACK,SAAH,GAAe,GAAf,GAAqB,EAAzD,KAAgEL,EAAE,CAACM,OAAH,GAAa,GAAb,GAAmB,EAAnF,CAAZ,CACA;AACA;AAFA;AAKAN,IAAAA,EAAE,CAACC,oBAAH,GAA0B,IAAIM,MAAJ,CAAWL,MAAX,EAAmBC,KAAnB,CAA1B;AACD;;AACD,SAAOH,EAAE,CAACC,oBAAV;AACD;;AAED,SAASO,OAAT,CAAiBR,EAAjB,EAAqBS,GAArB,EAA0BC,GAA1B,EAA+B;AAC7B,MAAIV,EAAE,CAACW,MAAH,IAAaX,EAAE,CAACY,MAApB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,MAAIC,KAAK,GAAGf,cAAc,CAACC,EAAD,CAA1B;AACAc,EAAAA,KAAK,CAACC,SAAN,GAAkBL,GAAlB;AACA,MAAIM,KAAK,GAAGF,KAAK,CAACG,IAAN,CAAWR,GAAX,CAAZ,CAN6B,CAO7B;AACA;;AACA,MAAIO,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAL,IAA2B,IAA/B,EAAqC;AACnC;AACAF,IAAAA,KAAK,CAACE,MAAN,GAAeF,KAAK,CAACE,MAAN,GAAe,CAA9B;AACA,WAAOF,KAAP;AACD,GAJD,MAIO;AACL,WAAO,IAAP;AACD;AACF;;AAEDG,MAAM,CAACC,OAAP,GAAiBZ,OAAjB","sourcesContent":["function getRelocatable(re) {\n  // In the future, this could use a WeakMap instead of an expando.\n  if (!re.__matchAtRelocatable) {\n    // Disjunctions are the lowest-precedence operator, so we can make any\n    // pattern match the empty string by appending `|()` to it:\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns\n    var source = re.source + '|()';\n\n    // We always make the new regex global.\n    var flags = 'g' + (re.ignoreCase ? 'i' : '') + (re.multiline ? 'm' : '') + (re.unicode ? 'u' : '')\n    // sticky (/.../y) doesn't make sense in conjunction with our relocation\n    // logic, so we ignore it here.\n    ;\n\n    re.__matchAtRelocatable = new RegExp(source, flags);\n  }\n  return re.__matchAtRelocatable;\n}\n\nfunction matchAt(re, str, pos) {\n  if (re.global || re.sticky) {\n    throw new Error('matchAt(...): Only non-global regexes are supported');\n  }\n  var reloc = getRelocatable(re);\n  reloc.lastIndex = pos;\n  var match = reloc.exec(str);\n  // Last capturing group is our sentinel that indicates whether the regex\n  // matched at the given location.\n  if (match[match.length - 1] == null) {\n    // Original regex matched.\n    match.length = match.length - 1;\n    return match;\n  } else {\n    return null;\n  }\n}\n\nmodule.exports = matchAt;"]},"metadata":{},"sourceType":"script"}