{"ast":null,"code":"/*! KAS | https://github.com/Khan/KAS */\n// This is a @generated file\n\n/* eslint-disable */\nwindow.KAS = {};\n\n(function (KAS) {\n  /* parser generated by jison 0.4.15 */\n\n  /*\n    Returns a Parser object of the following structure:\n  \n    Parser: {\n      yy: {}\n    }\n  \n    Parser.prototype: {\n      yy: {},\n      trace: function(),\n      symbols_: {associative list: name ==> number},\n      terminals_: {associative list: number ==> name},\n      productions_: [...],\n      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n      table: [...],\n      defaultActions: {...},\n      parseError: function(str, hash),\n      parse: function(input),\n  \n      lexer: {\n          EOF: 1,\n          parseError: function(str, hash),\n          setInput: function(input),\n          input: function(),\n          unput: function(str),\n          more: function(),\n          less: function(n),\n          pastInput: function(),\n          upcomingInput: function(),\n          showPosition: function(),\n          test_match: function(regex_match_array, rule_index),\n          next: function(),\n          lex: function(),\n          begin: function(condition),\n          popState: function(),\n          _currentRules: function(),\n          topState: function(),\n          pushState: function(condition),\n  \n          options: {\n              ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n              flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n              backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n          },\n  \n          performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n          rules: [...],\n          conditions: {associative list: name ==> set},\n      }\n    }\n  \n  \n    token location info (@$, _$, etc.): {\n      first_line: n,\n      last_line: n,\n      first_column: n,\n      last_column: n,\n      range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n    }\n  \n  \n    the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n      text:        (matched text)\n      token:       (the produced terminal token, if any)\n      line:        (yylineno)\n    }\n    while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n      loc:         (yylloc)\n      expected:    (string describing the set of expected tokens)\n      recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n    }\n  */\n  var parser = function () {\n    var o = function (k, v, o, l) {\n      for (o = o || {}, l = k.length; l--; o[k[l]] = v);\n\n      return o;\n    },\n        $V0 = [1, 7],\n        $V1 = [1, 17],\n        $V2 = [1, 13],\n        $V3 = [1, 14],\n        $V4 = [1, 15],\n        $V5 = [1, 32],\n        $V6 = [1, 22],\n        $V7 = [1, 23],\n        $V8 = [1, 24],\n        $V9 = [1, 25],\n        $Va = [1, 26],\n        $Vb = [1, 33],\n        $Vc = [1, 27],\n        $Vd = [1, 28],\n        $Ve = [1, 29],\n        $Vf = [1, 30],\n        $Vg = [1, 20],\n        $Vh = [1, 36],\n        $Vi = [1, 37],\n        $Vj = [5, 6, 8, 10, 33, 35, 41, 43, 45],\n        $Vk = [1, 39],\n        $Vl = [1, 40],\n        $Vm = [5, 6, 8, 10, 12, 14, 16, 19, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46],\n        $Vn = [10, 16, 19, 21, 22, 28, 29, 30, 31, 32, 34, 37, 39, 42, 43, 44, 46],\n        $Vo = [5, 6, 8, 10, 12, 14, 16, 18, 19, 21, 22, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46];\n\n    var parser = {\n      trace: function trace() {},\n      yy: {},\n      symbols_: {\n        \"error\": 2,\n        \"equation\": 3,\n        \"expression\": 4,\n        \"SIGN\": 5,\n        \"EOF\": 6,\n        \"additive\": 7,\n        \"+\": 8,\n        \"multiplicative\": 9,\n        \"-\": 10,\n        \"triglog\": 11,\n        \"*\": 12,\n        \"negative\": 13,\n        \"/\": 14,\n        \"trig\": 15,\n        \"TRIG\": 16,\n        \"trigfunc\": 17,\n        \"^\": 18,\n        \"TRIGINV\": 19,\n        \"logbase\": 20,\n        \"ln\": 21,\n        \"log\": 22,\n        \"_\": 23,\n        \"subscriptable\": 24,\n        \"power\": 25,\n        \"primitive\": 26,\n        \"variable\": 27,\n        \"VAR\": 28,\n        \"CONST\": 29,\n        \"INT\": 30,\n        \"FLOAT\": 31,\n        \"{\": 32,\n        \"}\": 33,\n        \"(\": 34,\n        \")\": 35,\n        \"function\": 36,\n        \"FUNC\": 37,\n        \"invocation\": 38,\n        \"sqrt\": 39,\n        \"[\": 40,\n        \"]\": 41,\n        \"abs\": 42,\n        \"|\": 43,\n        \"LEFT|\": 44,\n        \"RIGHT|\": 45,\n        \"FRAC\": 46,\n        \"$accept\": 0,\n        \"$end\": 1\n      },\n      terminals_: {\n        2: \"error\",\n        5: \"SIGN\",\n        6: \"EOF\",\n        8: \"+\",\n        10: \"-\",\n        12: \"*\",\n        14: \"/\",\n        16: \"TRIG\",\n        18: \"^\",\n        19: \"TRIGINV\",\n        21: \"ln\",\n        22: \"log\",\n        23: \"_\",\n        28: \"VAR\",\n        29: \"CONST\",\n        30: \"INT\",\n        31: \"FLOAT\",\n        32: \"{\",\n        33: \"}\",\n        34: \"(\",\n        35: \")\",\n        37: \"FUNC\",\n        39: \"sqrt\",\n        40: \"[\",\n        41: \"]\",\n        42: \"abs\",\n        43: \"|\",\n        44: \"LEFT|\",\n        45: \"RIGHT|\",\n        46: \"FRAC\"\n      },\n      productions_: [0, [3, 4], [3, 2], [3, 1], [4, 1], [7, 3], [7, 3], [7, 1], [9, 2], [9, 3], [9, 3], [9, 1], [13, 2], [13, 1], [15, 1], [17, 1], [17, 3], [17, 1], [20, 1], [20, 1], [20, 3], [11, 2], [11, 2], [11, 1], [25, 3], [25, 1], [27, 1], [24, 3], [24, 1], [24, 1], [24, 1], [24, 1], [24, 3], [24, 3], [36, 1], [38, 4], [38, 4], [38, 7], [38, 4], [38, 3], [38, 3], [38, 4], [26, 1], [26, 1], [26, 7]],\n      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n      /* action[1] */\n      , $$\n      /* vstack */\n      , _$\n      /* lstack */\n      ) {\n        /* this == yyval */\n        var $0 = $$.length - 1;\n\n        switch (yystate) {\n          case 1:\n            return new yy.Eq($$[$0 - 3], $$[$0 - 2], $$[$0 - 1]);\n            break;\n\n          case 2:\n            return $$[$0 - 1];\n            break;\n\n          case 3:\n            return new yy.Add([]);\n            break;\n\n          case 4:\n          case 7:\n          case 11:\n          case 13:\n          case 15:\n          case 20:\n          case 23:\n          case 25:\n          case 42:\n          case 43:\n            this.$ = $$[$0];\n            break;\n\n          case 5:\n            this.$ = yy.Add.createOrAppend($$[$0 - 2], $$[$0]);\n            break;\n\n          case 6:\n            this.$ = yy.Add.createOrAppend($$[$0 - 2], yy.Mul.handleNegative($$[$0], \"subtract\"));\n            break;\n\n          case 8:\n            this.$ = yy.Mul.fold(yy.Mul.createOrAppend($$[$0 - 1], $$[$0]));\n            break;\n\n          case 9:\n            this.$ = yy.Mul.fold(yy.Mul.createOrAppend($$[$0 - 2], $$[$0]));\n            break;\n\n          case 10:\n            this.$ = yy.Mul.fold(yy.Mul.handleDivide($$[$0 - 2], $$[$0]));\n            break;\n\n          case 12:\n            this.$ = yy.Mul.handleNegative($$[$0]);\n            break;\n\n          case 14:\n          case 17:\n            this.$ = [yytext];\n            break;\n\n          case 16:\n            this.$ = $$[$0 - 2].concat($$[$0]);\n            break;\n\n          case 18:\n            this.$ = yy.Log.natural();\n            break;\n\n          case 19:\n            this.$ = yy.Log.common();\n            break;\n\n          case 21:\n            this.$ = yy.Trig.create($$[$0 - 1], $$[$0]);\n            break;\n\n          case 22:\n            this.$ = yy.Log.create($$[$0 - 1], $$[$0]);\n            break;\n\n          case 24:\n            this.$ = new yy.Pow($$[$0 - 2], $$[$0]);\n            break;\n\n          case 26:\n          case 34:\n            this.$ = yytext;\n            break;\n\n          case 27:\n            this.$ = new yy.Var($$[$0 - 2], $$[$0]);\n            break;\n\n          case 28:\n            this.$ = new yy.Var($$[$0]);\n            break;\n\n          case 29:\n            this.$ = new yy.Const(yytext.toLowerCase());\n            break;\n\n          case 30:\n            this.$ = yy.Int.create(Number(yytext));\n            break;\n\n          case 31:\n            this.$ = yy.Float.create(Number(yytext));\n            break;\n\n          case 32:\n            this.$ = $$[$0 - 1].completeParse();\n            break;\n\n          case 33:\n            this.$ = $$[$0 - 1].completeParse().addHint('parens');\n            break;\n\n          case 35:\n          case 36:\n            this.$ = yy.Pow.sqrt($$[$0 - 1]);\n            break;\n\n          case 37:\n            this.$ = new yy.Pow.nthroot($$[$0 - 1], $$[$0 - 4]);\n            break;\n\n          case 38:\n          case 39:\n          case 40:\n            this.$ = new yy.Abs($$[$0 - 1]);\n            break;\n\n          case 41:\n            this.$ = new yy.Func($$[$0 - 3], $$[$0 - 1]);\n            break;\n\n          case 44:\n            this.$ = yy.Mul.handleDivide($$[$0 - 4], $$[$0 - 1]);\n            break;\n        }\n      },\n      table: [{\n        3: 1,\n        4: 2,\n        6: [1, 3],\n        7: 4,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        1: [3]\n      }, {\n        5: [1, 34],\n        6: [1, 35]\n      }, {\n        1: [2, 3]\n      }, o([5, 6], [2, 4], {\n        8: $Vh,\n        10: $Vi\n      }), o($Vj, [2, 7], {\n        17: 9,\n        20: 10,\n        25: 11,\n        15: 12,\n        26: 16,\n        24: 18,\n        38: 19,\n        27: 21,\n        36: 31,\n        11: 38,\n        12: $Vk,\n        14: $Vl,\n        16: $V1,\n        19: $V2,\n        21: $V3,\n        22: $V4,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        37: $Vb,\n        39: $Vc,\n        42: $Vd,\n        44: $Vf,\n        46: $Vg\n      }), o($Vm, [2, 11]), {\n        10: $V0,\n        11: 8,\n        13: 41,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, o($Vm, [2, 13]), {\n        10: $V0,\n        11: 8,\n        13: 42,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        10: $V0,\n        11: 8,\n        13: 43,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, o($Vm, [2, 23]), o($Vn, [2, 15], {\n        18: [1, 44]\n      }), o($Vn, [2, 17]), o($Vn, [2, 18]), o($Vn, [2, 19], {\n        23: [1, 45]\n      }), o($Vm, [2, 25], {\n        18: [1, 46]\n      }), o([10, 16, 18, 19, 21, 22, 28, 29, 30, 31, 32, 34, 37, 39, 42, 43, 44, 46], [2, 14]), o($Vo, [2, 42]), o($Vo, [2, 43]), {\n        32: [1, 47]\n      }, o($Vo, [2, 28], {\n        23: [1, 48]\n      }), o($Vo, [2, 29]), o($Vo, [2, 30]), o($Vo, [2, 31]), {\n        7: 49,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        7: 50,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        32: [1, 52],\n        34: [1, 51],\n        40: [1, 53]\n      }, {\n        34: [1, 54]\n      }, {\n        7: 55,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        7: 56,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        34: [1, 57]\n      }, o([5, 6, 8, 10, 12, 14, 16, 18, 19, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41, 42, 43, 44, 45, 46], [2, 26]), {\n        34: [2, 34]\n      }, {\n        4: 58,\n        7: 4,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        1: [2, 2]\n      }, {\n        9: 59,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        9: 60,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, o($Vm, [2, 8]), {\n        10: $V0,\n        11: 8,\n        13: 61,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        10: $V0,\n        11: 8,\n        13: 62,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, o($Vm, [2, 12]), o($Vm, [2, 21]), o($Vm, [2, 22]), {\n        10: $V0,\n        11: 8,\n        13: 63,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        24: 64,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va\n      }, {\n        10: $V0,\n        11: 8,\n        13: 65,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        7: 66,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        24: 67,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va\n      }, {\n        8: $Vh,\n        10: $Vi,\n        33: [1, 68]\n      }, {\n        8: $Vh,\n        10: $Vi,\n        35: [1, 69]\n      }, {\n        7: 70,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        7: 71,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        7: 72,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        7: 73,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        8: $Vh,\n        10: $Vi,\n        43: [1, 74]\n      }, {\n        8: $Vh,\n        10: $Vi,\n        45: [1, 75]\n      }, {\n        7: 76,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        6: [1, 77]\n      }, o($Vj, [2, 5], {\n        17: 9,\n        20: 10,\n        25: 11,\n        15: 12,\n        26: 16,\n        24: 18,\n        38: 19,\n        27: 21,\n        36: 31,\n        11: 38,\n        12: $Vk,\n        14: $Vl,\n        16: $V1,\n        19: $V2,\n        21: $V3,\n        22: $V4,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        37: $Vb,\n        39: $Vc,\n        42: $Vd,\n        44: $Vf,\n        46: $Vg\n      }), o($Vj, [2, 6], {\n        17: 9,\n        20: 10,\n        25: 11,\n        15: 12,\n        26: 16,\n        24: 18,\n        38: 19,\n        27: 21,\n        36: 31,\n        11: 38,\n        12: $Vk,\n        14: $Vl,\n        16: $V1,\n        19: $V2,\n        21: $V3,\n        22: $V4,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        37: $Vb,\n        39: $Vc,\n        42: $Vd,\n        44: $Vf,\n        46: $Vg\n      }), o($Vm, [2, 9]), o($Vm, [2, 10]), o($Vn, [2, 16]), o($Vn, [2, 20]), o($Vm, [2, 24]), {\n        8: $Vh,\n        10: $Vi,\n        33: [1, 78]\n      }, o($Vo, [2, 27]), o($Vo, [2, 32]), o($Vo, [2, 33]), {\n        8: $Vh,\n        10: $Vi,\n        35: [1, 79]\n      }, {\n        8: $Vh,\n        10: $Vi,\n        33: [1, 80]\n      }, {\n        8: $Vh,\n        10: $Vi,\n        41: [1, 81]\n      }, {\n        8: $Vh,\n        10: $Vi,\n        35: [1, 82]\n      }, o($Vo, [2, 39]), o($Vo, [2, 40]), {\n        8: $Vh,\n        10: $Vi,\n        35: [1, 83]\n      }, {\n        1: [2, 1]\n      }, {\n        32: [1, 84]\n      }, o($Vo, [2, 35]), o($Vo, [2, 36]), {\n        32: [1, 85]\n      }, o($Vo, [2, 38]), o($Vo, [2, 41]), {\n        7: 86,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        7: 87,\n        9: 5,\n        10: $V0,\n        11: 8,\n        13: 6,\n        15: 12,\n        16: $V1,\n        17: 9,\n        19: $V2,\n        20: 10,\n        21: $V3,\n        22: $V4,\n        24: 18,\n        25: 11,\n        26: 16,\n        27: 21,\n        28: $V5,\n        29: $V6,\n        30: $V7,\n        31: $V8,\n        32: $V9,\n        34: $Va,\n        36: 31,\n        37: $Vb,\n        38: 19,\n        39: $Vc,\n        42: $Vd,\n        43: $Ve,\n        44: $Vf,\n        46: $Vg\n      }, {\n        8: $Vh,\n        10: $Vi,\n        33: [1, 88]\n      }, {\n        8: $Vh,\n        10: $Vi,\n        33: [1, 89]\n      }, o($Vo, [2, 44]), o($Vo, [2, 37])],\n      defaultActions: {\n        3: [2, 3],\n        33: [2, 34],\n        35: [2, 2],\n        77: [2, 1]\n      },\n      parseError: function parseError(str, hash) {\n        if (hash.recoverable) {\n          this.trace(str);\n        } else {\n          throw new Error(str);\n        }\n      },\n      parse: function parse(input) {\n        var self = this,\n            stack = [0],\n            tstack = [],\n            vstack = [null],\n            lstack = [],\n            table = this.table,\n            yytext = '',\n            yylineno = 0,\n            yyleng = 0,\n            recovering = 0,\n            TERROR = 2,\n            EOF = 1;\n        var args = lstack.slice.call(arguments, 1);\n        var lexer = Object.create(this.lexer);\n        var sharedState = {\n          yy: {}\n        };\n\n        for (var k in this.yy) {\n          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n          }\n        }\n\n        lexer.setInput(input, sharedState.yy);\n        sharedState.yy.lexer = lexer;\n        sharedState.yy.parser = this;\n\n        if (typeof lexer.yylloc == 'undefined') {\n          lexer.yylloc = {};\n        }\n\n        var yyloc = lexer.yylloc;\n        lstack.push(yyloc);\n        var ranges = lexer.options && lexer.options.ranges;\n\n        if (typeof sharedState.yy.parseError === 'function') {\n          this.parseError = sharedState.yy.parseError;\n        } else {\n          this.parseError = Object.getPrototypeOf(this).parseError;\n        }\n\n        function popStack(n) {\n          stack.length = stack.length - 2 * n;\n          vstack.length = vstack.length - n;\n          lstack.length = lstack.length - n;\n        }\n\n        function lex() {\n          var token;\n          token = lexer.lex() || EOF;\n\n          if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n          }\n\n          return token;\n        }\n\n        var symbol,\n            preErrorSymbol,\n            state,\n            action,\n            a,\n            r,\n            yyval = {},\n            p,\n            len,\n            newState,\n            expected;\n\n        while (true) {\n          state = stack[stack.length - 1];\n\n          if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n          } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n              symbol = lex();\n            }\n\n            action = table[state] && table[state][symbol];\n          }\n\n          if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var errStr = '';\n            expected = [];\n\n            for (p in table[state]) {\n              if (this.terminals_[p] && p > TERROR) {\n                expected.push('\\'' + this.terminals_[p] + '\\'');\n              }\n            }\n\n            if (lexer.showPosition) {\n              errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n            } else {\n              errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n            }\n\n            this.parseError(errStr, {\n              text: lexer.match,\n              token: this.terminals_[symbol] || symbol,\n              line: lexer.yylineno,\n              loc: yyloc,\n              expected: expected\n            });\n          }\n\n          if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n          }\n\n          switch (action[0]) {\n            case 1:\n              stack.push(symbol);\n              vstack.push(lexer.yytext);\n              lstack.push(lexer.yylloc);\n              stack.push(action[1]);\n              symbol = null;\n\n              if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n\n                if (recovering > 0) {\n                  recovering--;\n                }\n              } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n              }\n\n              break;\n\n            case 2:\n              len = this.productions_[action[1]][1];\n              yyval.$ = vstack[vstack.length - len];\n              yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n              };\n\n              if (ranges) {\n                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n              }\n\n              r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n              if (typeof r !== 'undefined') {\n                return r;\n              }\n\n              if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n              }\n\n              stack.push(this.productions_[action[1]][0]);\n              vstack.push(yyval.$);\n              lstack.push(yyval._$);\n              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n              stack.push(newState);\n              break;\n\n            case 3:\n              return true;\n          }\n        }\n\n        return true;\n      }\n    };\n    /* generated by jison-lex 0.3.4 */\n\n    var lexer = function () {\n      var lexer = {\n        EOF: 1,\n        parseError: function parseError(str, hash) {\n          if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n          } else {\n            throw new Error(str);\n          }\n        },\n        // resets the lexer, sets new input\n        setInput: function (input, yy) {\n          this.yy = yy || this.yy || {};\n          this._input = input;\n          this._more = this._backtrack = this.done = false;\n          this.yylineno = this.yyleng = 0;\n          this.yytext = this.matched = this.match = '';\n          this.conditionStack = ['INITIAL'];\n          this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n          };\n\n          if (this.options.ranges) {\n            this.yylloc.range = [0, 0];\n          }\n\n          this.offset = 0;\n          return this;\n        },\n        // consumes and returns one char from the input\n        input: function () {\n          var ch = this._input[0];\n          this.yytext += ch;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch;\n          this.matched += ch;\n          var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n          if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n          } else {\n            this.yylloc.last_column++;\n          }\n\n          if (this.options.ranges) {\n            this.yylloc.range[1]++;\n          }\n\n          this._input = this._input.slice(1);\n          return ch;\n        },\n        // unshifts one char (or a string) into the input\n        unput: function (ch) {\n          var len = ch.length;\n          var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n          this._input = ch + this._input;\n          this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n          this.offset -= len;\n          var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n          this.match = this.match.substr(0, this.match.length - 1);\n          this.matched = this.matched.substr(0, this.matched.length - 1);\n\n          if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n          }\n\n          var r = this.yylloc.range;\n          this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n          };\n\n          if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n          }\n\n          this.yyleng = this.yytext.length;\n          return this;\n        },\n        // When called from action, caches matched text and appends it on next action\n        more: function () {\n          this._more = true;\n          return this;\n        },\n        // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n        reject: function () {\n          if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n          } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n              text: \"\",\n              token: null,\n              line: this.yylineno\n            });\n          }\n\n          return this;\n        },\n        // retain first n characters of the match\n        less: function (n) {\n          this.unput(this.match.slice(n));\n        },\n        // displays already matched input, i.e. for error messages\n        pastInput: function () {\n          var past = this.matched.substr(0, this.matched.length - this.match.length);\n          return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n        },\n        // displays upcoming input, i.e. for error messages\n        upcomingInput: function () {\n          var next = this.match;\n\n          if (next.length < 20) {\n            next += this._input.substr(0, 20 - next.length);\n          }\n\n          return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n        },\n        // displays the character position where the lexing error occurred, i.e. for error messages\n        showPosition: function () {\n          var pre = this.pastInput();\n          var c = new Array(pre.length + 1).join(\"-\");\n          return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n        },\n        // test the lexed token: return FALSE when not a match, otherwise return token\n        test_match: function (match, indexed_rule) {\n          var token, lines, backup;\n\n          if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n              yylineno: this.yylineno,\n              yylloc: {\n                first_line: this.yylloc.first_line,\n                last_line: this.last_line,\n                first_column: this.yylloc.first_column,\n                last_column: this.yylloc.last_column\n              },\n              yytext: this.yytext,\n              match: this.match,\n              matches: this.matches,\n              matched: this.matched,\n              yyleng: this.yyleng,\n              offset: this.offset,\n              _more: this._more,\n              _input: this._input,\n              yy: this.yy,\n              conditionStack: this.conditionStack.slice(0),\n              done: this.done\n            };\n\n            if (this.options.ranges) {\n              backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n          }\n\n          lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n          if (lines) {\n            this.yylineno += lines.length;\n          }\n\n          this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n          };\n          this.yytext += match[0];\n          this.match += match[0];\n          this.matches = match;\n          this.yyleng = this.yytext.length;\n\n          if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n          }\n\n          this._more = false;\n          this._backtrack = false;\n          this._input = this._input.slice(match[0].length);\n          this.matched += match[0];\n          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n          if (this.done && this._input) {\n            this.done = false;\n          }\n\n          if (token) {\n            return token;\n          } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n              this[k] = backup[k];\n            }\n\n            return false; // rule action called reject() implying the next rule should be tested instead.\n          }\n\n          return false;\n        },\n        // return next match in input\n        next: function () {\n          if (this.done) {\n            return this.EOF;\n          }\n\n          if (!this._input) {\n            this.done = true;\n          }\n\n          var token, match, tempMatch, index;\n\n          if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n          }\n\n          var rules = this._currentRules();\n\n          for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n              match = tempMatch;\n              index = i;\n\n              if (this.options.backtrack_lexer) {\n                token = this.test_match(tempMatch, rules[i]);\n\n                if (token !== false) {\n                  return token;\n                } else if (this._backtrack) {\n                  match = false;\n                  continue; // rule action called reject() implying a rule MISmatch.\n                } else {\n                  // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                  return false;\n                }\n              } else if (!this.options.flex) {\n                break;\n              }\n            }\n          }\n\n          if (match) {\n            token = this.test_match(match, rules[index]);\n\n            if (token !== false) {\n              return token;\n            } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n            return false;\n          }\n\n          if (this._input === \"\") {\n            return this.EOF;\n          } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n              text: \"\",\n              token: null,\n              line: this.yylineno\n            });\n          }\n        },\n        // return next match that has a token\n        lex: function lex() {\n          var r = this.next();\n\n          if (r) {\n            return r;\n          } else {\n            return this.lex();\n          }\n        },\n        // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n        begin: function begin(condition) {\n          this.conditionStack.push(condition);\n        },\n        // pop the previously active lexer condition state off the condition stack\n        popState: function popState() {\n          var n = this.conditionStack.length - 1;\n\n          if (n > 0) {\n            return this.conditionStack.pop();\n          } else {\n            return this.conditionStack[0];\n          }\n        },\n        // produce the lexer rule set which is active for the currently active lexer condition state\n        _currentRules: function _currentRules() {\n          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n          } else {\n            return this.conditions[\"INITIAL\"].rules;\n          }\n        },\n        // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n        topState: function topState(n) {\n          n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n          if (n >= 0) {\n            return this.conditionStack[n];\n          } else {\n            return \"INITIAL\";\n          }\n        },\n        // alias for begin(condition)\n        pushState: function pushState(condition) {\n          this.begin(condition);\n        },\n        // return the number of states currently on the stack\n        stateStackSize: function stateStackSize() {\n          return this.conditionStack.length;\n        },\n        options: {\n          \"flex\": true\n        },\n        performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n          var YYSTATE = YY_START;\n\n          switch ($avoiding_name_collisions) {\n            case 0:\n              /* skip whitespace */\n              break;\n\n            case 1:\n              /* skip \\space */\n              break;\n\n            case 2:\n              /* skip '\\ ' */\n              break;\n\n            case 3:\n              return \"INT\";\n              break;\n\n            case 4:\n              return \"FLOAT\";\n              break;\n\n            case 5:\n              return \"^\";\n              break;\n\n            case 6:\n              return \"*\";\n              break;\n\n            case 7:\n              return \"*\";\n              break;\n\n            case 8:\n              return \"*\";\n              break;\n\n            case 9:\n              return \"*\";\n              break;\n\n            case 10:\n              return \"/\";\n              break;\n\n            case 11:\n              return \"/\";\n              break;\n\n            case 12:\n              return \"-\";\n              break;\n\n            case 13:\n              return \"-\";\n              break;\n\n            case 14:\n              return \"+\";\n              break;\n\n            case 15:\n              return \"^\";\n              break;\n\n            case 16:\n              return \"(\";\n              break;\n\n            case 17:\n              return \")\";\n              break;\n\n            case 18:\n              return \"(\";\n              break;\n\n            case 19:\n              return \")\";\n              break;\n\n            case 20:\n              return \"[\";\n              break;\n\n            case 21:\n              return \"]\";\n              break;\n\n            case 22:\n              return \"{\";\n              break;\n\n            case 23:\n              return \"}\";\n              break;\n\n            case 24:\n              return \"{\";\n              break;\n\n            case 25:\n              return \"}\";\n              break;\n\n            case 26:\n              return \"_\";\n              break;\n\n            case 27:\n              return \"|\";\n              break;\n\n            case 28:\n              return \"LEFT|\";\n              break;\n\n            case 29:\n              return \"RIGHT|\";\n              break;\n\n            case 30:\n              return \"!\";\n              break;\n\n            case 31:\n              return \"SIGN\";\n              break;\n\n            case 32:\n              yy_.yytext = \"<=\";\n              return \"SIGN\";\n              break;\n\n            case 33:\n              yy_.yytext = \">=\";\n              return \"SIGN\";\n              break;\n\n            case 34:\n              yy_.yytext = \"<=\";\n              return \"SIGN\";\n              break;\n\n            case 35:\n              yy_.yytext = \">=\";\n              return \"SIGN\";\n              break;\n\n            case 36:\n              yy_.yytext = \"<>\";\n              return \"SIGN\";\n              break;\n\n            case 37:\n              yy_.yytext = \"<>\";\n              return \"SIGN\";\n              break;\n\n            case 38:\n              yy_.yytext = \"<>\";\n              return \"SIGN\";\n              break;\n\n            case 39:\n              yy_.yytext = \"<>\";\n              return \"SIGN\";\n              break;\n\n            case 40:\n              yy_.yytext = \"<=\";\n              return \"SIGN\";\n              break;\n\n            case 41:\n              yy_.yytext = \">=\";\n              return \"SIGN\";\n              break;\n\n            case 42:\n              return \"FRAC\";\n              break;\n\n            case 43:\n              return \"FRAC\";\n              break;\n\n            case 44:\n              return \"sqrt\";\n              break;\n\n            case 45:\n              return \"abs\";\n              break;\n\n            case 46:\n              return \"ln\";\n              break;\n\n            case 47:\n              return \"log\";\n              break;\n\n            case 48:\n              return \"TRIG\";\n              break;\n\n            case 49:\n              return \"TRIG\";\n              break;\n\n            case 50:\n              return \"TRIG\";\n              break;\n\n            case 51:\n              return \"TRIG\";\n              break;\n\n            case 52:\n              yy_.yytext = \"sin\";\n              return \"TRIG\";\n              break;\n\n            case 53:\n              yy_.yytext = \"cos\";\n              return \"TRIG\";\n              break;\n\n            case 54:\n              yy_.yytext = \"tan\";\n              return \"TRIG\";\n              break;\n\n            case 55:\n              yy_.yytext = \"csc\";\n              return \"TRIG\";\n              break;\n\n            case 56:\n              yy_.yytext = \"sec\";\n              return \"TRIG\";\n              break;\n\n            case 57:\n              yy_.yytext = \"cot\";\n              return \"TRIG\";\n              break;\n\n            case 58:\n              yy_.yytext = \"arcsin\";\n              return \"TRIG\";\n              break;\n\n            case 59:\n              yy_.yytext = \"arccos\";\n              return \"TRIG\";\n              break;\n\n            case 60:\n              yy_.yytext = \"arctan\";\n              return \"TRIG\";\n              break;\n\n            case 61:\n              yy_.yytext = \"arccsc\";\n              return \"TRIG\";\n              break;\n\n            case 62:\n              yy_.yytext = \"arcsec\";\n              return \"TRIG\";\n              break;\n\n            case 63:\n              yy_.yytext = \"arccot\";\n              return \"TRIG\";\n              break;\n\n            case 64:\n              return \"TRIGINV\";\n              break;\n\n            case 65:\n              return \"TRIGINV\";\n              break;\n\n            case 66:\n              yy_.yytext = \"sinh\";\n              return \"TRIG\";\n              break;\n\n            case 67:\n              yy_.yytext = \"cosh\";\n              return \"TRIG\";\n              break;\n\n            case 68:\n              yy_.yytext = \"tanh\";\n              return \"TRIG\";\n              break;\n\n            case 69:\n              yy_.yytext = \"csch\";\n              return \"TRIG\";\n              break;\n\n            case 70:\n              yy_.yytext = \"sech\";\n              return \"TRIG\";\n              break;\n\n            case 71:\n              yy_.yytext = \"tanh\";\n              return \"TRIG\";\n              break;\n\n            case 72:\n              return \"CONST\";\n              break;\n\n            case 73:\n              yy_.yytext = \"pi\";\n              return \"CONST\";\n              break;\n\n            case 74:\n              yy_.yytext = \"pi\";\n              return \"CONST\";\n              break;\n\n            case 75:\n              return \"VAR\";\n              break;\n\n            case 76:\n              yy_.yytext = \"theta\";\n              return \"VAR\";\n              break;\n\n            case 77:\n              yy_.yytext = \"theta\";\n              return \"VAR\";\n              break;\n\n            case 78:\n              return \"VAR\";\n              break;\n\n            case 79:\n              yy_.yytext = \"phi\";\n              return \"VAR\";\n              break;\n\n            case 80:\n              yy_.yytext = \"phi\";\n              return \"VAR\";\n              break;\n\n            case 81:\n              return yy.symbolLexer(yy_.yytext);\n              break;\n\n            case 82:\n              return \"EOF\";\n              break;\n\n            case 83:\n              return \"INVALID\";\n              break;\n\n            case 84:\n              console.log(yy_.yytext);\n              break;\n          }\n        },\n        rules: [/^(?:\\s+)/, /^(?:\\\\space)/, /^(?:\\\\ )/, /^(?:[0-9]+\\.?)/, /^(?:([0-9]+)?\\.[0-9]+)/, /^(?:\\*\\*)/, /^(?:\\*)/, /^(?:\\\\cdot|·)/, /^(?:\\\\times|×)/, /^(?:\\\\ast)/, /^(?:\\/)/, /^(?:\\\\div|÷)/, /^(?:-)/, /^(?:−)/, /^(?:\\+)/, /^(?:\\^)/, /^(?:\\()/, /^(?:\\))/, /^(?:\\\\left\\()/, /^(?:\\\\right\\))/, /^(?:\\[)/, /^(?:\\])/, /^(?:\\{)/, /^(?:\\})/, /^(?:\\\\left\\{)/, /^(?:\\\\right\\})/, /^(?:_)/, /^(?:\\|)/, /^(?:\\\\left\\|)/, /^(?:\\\\right\\|)/, /^(?:\\!)/, /^(?:<=|>=|<>|<|>|=)/, /^(?:\\\\le)/, /^(?:\\\\ge)/, /^(?:\\\\leq)/, /^(?:\\\\geq)/, /^(?:=\\/=)/, /^(?:\\\\ne)/, /^(?:\\\\neq)/, /^(?:≠)/, /^(?:≤)/, /^(?:≥)/, /^(?:\\\\frac)/, /^(?:\\\\dfrac)/, /^(?:sqrt|\\\\sqrt)/, /^(?:abs|\\\\abs)/, /^(?:ln|\\\\ln)/, /^(?:log|\\\\log)/, /^(?:sin|cos|tan)/, /^(?:csc|sec|cot)/, /^(?:sinh|cosh|tanh)/, /^(?:csch|sech|coth)/, /^(?:\\\\sin)/, /^(?:\\\\cos)/, /^(?:\\\\tan)/, /^(?:\\\\csc)/, /^(?:\\\\sec)/, /^(?:\\\\cot)/, /^(?:\\\\arcsin)/, /^(?:\\\\arccos)/, /^(?:\\\\arctan)/, /^(?:\\\\arccsc)/, /^(?:\\\\arcsec)/, /^(?:\\\\arccot)/, /^(?:arcsin|arccos|arctan)/, /^(?:arccsc|arcsec|arccot)/, /^(?:\\\\sinh)/, /^(?:\\\\cosh)/, /^(?:\\\\tanh)/, /^(?:\\\\csch)/, /^(?:\\\\sech)/, /^(?:\\\\coth)/, /^(?:pi)/, /^(?:π)/, /^(?:\\\\pi)/, /^(?:theta)/, /^(?:θ)/, /^(?:\\\\theta)/, /^(?:phi)/, /^(?:φ)/, /^(?:\\\\phi)/, /^(?:[a-zA-Z])/, /^(?:$)/, /^(?:.)/, /^(?:.)/],\n        conditions: {\n          \"INITIAL\": {\n            \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84],\n            \"inclusive\": true\n          }\n        }\n      };\n      return lexer;\n    }();\n\n    parser.lexer = lexer;\n\n    function Parser() {\n      this.yy = {};\n    }\n\n    Parser.prototype = parser;\n    parser.Parser = Parser;\n    return new Parser();\n  }();\n\n  KAS.parser = parser;\n})(KAS); // this is a @generated file\n\n\n(function (KAS) {\n  /* parser generated by jison 0.4.15 */\n\n  /*\n    Returns a Parser object of the following structure:\n  \n    Parser: {\n      yy: {}\n    }\n  \n    Parser.prototype: {\n      yy: {},\n      trace: function(),\n      symbols_: {associative list: name ==> number},\n      terminals_: {associative list: number ==> name},\n      productions_: [...],\n      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n      table: [...],\n      defaultActions: {...},\n      parseError: function(str, hash),\n      parse: function(input),\n  \n      lexer: {\n          EOF: 1,\n          parseError: function(str, hash),\n          setInput: function(input),\n          input: function(),\n          unput: function(str),\n          more: function(),\n          less: function(n),\n          pastInput: function(),\n          upcomingInput: function(),\n          showPosition: function(),\n          test_match: function(regex_match_array, rule_index),\n          next: function(),\n          lex: function(),\n          begin: function(condition),\n          popState: function(),\n          _currentRules: function(),\n          topState: function(),\n          pushState: function(condition),\n  \n          options: {\n              ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n              flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n              backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n          },\n  \n          performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n          rules: [...],\n          conditions: {associative list: name ==> set},\n      }\n    }\n  \n  \n    token location info (@$, _$, etc.): {\n      first_line: n,\n      last_line: n,\n      first_column: n,\n      last_column: n,\n      range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n    }\n  \n  \n    the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n      text:        (matched text)\n      token:       (the produced terminal token, if any)\n      line:        (yylineno)\n    }\n    while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n      loc:         (yylloc)\n      expected:    (string describing the set of expected tokens)\n      recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n    }\n  */\n  var parser = function () {\n    var o = function (k, v, o, l) {\n      for (o = o || {}, l = k.length; l--; o[k[l]] = v);\n\n      return o;\n    },\n        $V0 = [1, 11],\n        $V1 = [1, 9],\n        $V2 = [8, 17],\n        $V3 = [6, 11],\n        $V4 = [6, 11, 13, 17];\n\n    var parser = {\n      trace: function trace() {},\n      yy: {},\n      symbols_: {\n        \"error\": 2,\n        \"unitvalue\": 3,\n        \"magnitude\": 4,\n        \"unit\": 5,\n        \"EOF\": 6,\n        \"float\": 7,\n        \"POW\": 8,\n        \"int\": 9,\n        \"multatoms\": 10,\n        \"DIV\": 11,\n        \"expatom\": 12,\n        \"MUL\": 13,\n        \"atom\": 14,\n        \"^\": 15,\n        \"nat\": 16,\n        \"ATOM\": 17,\n        \"FLOAT\": 18,\n        \"NAT\": 19,\n        \"NEG\": 20,\n        \"$accept\": 0,\n        \"$end\": 1\n      },\n      terminals_: {\n        2: \"error\",\n        6: \"EOF\",\n        8: \"POW\",\n        11: \"DIV\",\n        13: \"MUL\",\n        15: \"^\",\n        17: \"ATOM\",\n        18: \"FLOAT\",\n        19: \"NAT\",\n        20: \"NEG\"\n      },\n      productions_: [0, [3, 3], [3, 2], [4, 3], [4, 1], [5, 3], [5, 1], [10, 3], [10, 2], [10, 1], [12, 3], [12, 1], [14, 1], [7, 1], [7, 1], [16, 1], [9, 2], [9, 1]],\n      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n      /* action[1] */\n      , $$\n      /* vstack */\n      , _$\n      /* lstack */\n      ) {\n        /* this == yyval */\n        var $0 = $$.length - 1;\n\n        switch (yystate) {\n          case 1:\n            return {\n              type: \"unitMagnitude\",\n              magnitude: $$[$0 - 2],\n              unit: $$[$0 - 1]\n            };\n            break;\n\n          case 2:\n            return {\n              type: \"unitStandalone\",\n              unit: $$[$0 - 1]\n            };\n            break;\n\n          case 3:\n            this.$ = $$[$0 - 2] + \"e\" + $$[$0];\n            break;\n\n          case 4:\n          case 13:\n          case 14:\n          case 15:\n          case 17:\n            this.$ = $$[$0];\n            break;\n\n          case 5:\n            this.$ = {\n              num: $$[$0 - 2],\n              denom: $$[$0]\n            };\n            break;\n\n          case 6:\n            this.$ = {\n              num: $$[$0],\n              denom: null\n            };\n            break;\n\n          case 7:\n            this.$ = [$$[$0 - 2]].concat($$[$0]);\n            break;\n\n          case 8:\n            this.$ = [$$[$0 - 1]].concat($$[$0]);\n            break;\n\n          case 9:\n            this.$ = [$$[$0]];\n            break;\n\n          case 10:\n            this.$ = {\n              name: $$[$0 - 2],\n              pow: $$[$0]\n            };\n            break;\n\n          case 11:\n            this.$ = {\n              name: $$[$0],\n              pow: 1\n            };\n            break;\n\n          case 12:\n            this.$ = yytext;\n            break;\n\n          case 16:\n            this.$ = \"-\" + $$[$0];\n            break;\n        }\n      },\n      table: [{\n        3: 1,\n        4: 2,\n        5: 3,\n        7: 4,\n        10: 5,\n        12: 8,\n        14: 10,\n        16: 7,\n        17: $V0,\n        18: [1, 6],\n        19: $V1\n      }, {\n        1: [3]\n      }, {\n        5: 12,\n        10: 5,\n        12: 8,\n        14: 10,\n        17: $V0\n      }, {\n        6: [1, 13]\n      }, {\n        8: [1, 14],\n        17: [2, 4]\n      }, {\n        6: [2, 6],\n        11: [1, 15]\n      }, o($V2, [2, 13]), o($V2, [2, 14]), o($V3, [2, 9], {\n        12: 8,\n        14: 10,\n        10: 17,\n        13: [1, 16],\n        17: $V0\n      }), o([6, 8, 11, 13, 17], [2, 15]), o($V4, [2, 11], {\n        15: [1, 18]\n      }), o([6, 11, 13, 15, 17], [2, 12]), {\n        6: [1, 19]\n      }, {\n        1: [2, 2]\n      }, {\n        9: 20,\n        19: [1, 22],\n        20: [1, 21]\n      }, {\n        10: 23,\n        12: 8,\n        14: 10,\n        17: $V0\n      }, {\n        10: 24,\n        12: 8,\n        14: 10,\n        17: $V0\n      }, o($V3, [2, 8]), {\n        16: 25,\n        19: $V1\n      }, {\n        1: [2, 1]\n      }, {\n        17: [2, 3]\n      }, {\n        19: [1, 26]\n      }, {\n        17: [2, 17]\n      }, {\n        6: [2, 5]\n      }, o($V3, [2, 7]), o($V4, [2, 10]), {\n        17: [2, 16]\n      }],\n      defaultActions: {\n        13: [2, 2],\n        19: [2, 1],\n        20: [2, 3],\n        22: [2, 17],\n        23: [2, 5],\n        26: [2, 16]\n      },\n      parseError: function parseError(str, hash) {\n        if (hash.recoverable) {\n          this.trace(str);\n        } else {\n          throw new Error(str);\n        }\n      },\n      parse: function parse(input) {\n        var self = this,\n            stack = [0],\n            tstack = [],\n            vstack = [null],\n            lstack = [],\n            table = this.table,\n            yytext = '',\n            yylineno = 0,\n            yyleng = 0,\n            recovering = 0,\n            TERROR = 2,\n            EOF = 1;\n        var args = lstack.slice.call(arguments, 1);\n        var lexer = Object.create(this.lexer);\n        var sharedState = {\n          yy: {}\n        };\n\n        for (var k in this.yy) {\n          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n          }\n        }\n\n        lexer.setInput(input, sharedState.yy);\n        sharedState.yy.lexer = lexer;\n        sharedState.yy.parser = this;\n\n        if (typeof lexer.yylloc == 'undefined') {\n          lexer.yylloc = {};\n        }\n\n        var yyloc = lexer.yylloc;\n        lstack.push(yyloc);\n        var ranges = lexer.options && lexer.options.ranges;\n\n        if (typeof sharedState.yy.parseError === 'function') {\n          this.parseError = sharedState.yy.parseError;\n        } else {\n          this.parseError = Object.getPrototypeOf(this).parseError;\n        }\n\n        function popStack(n) {\n          stack.length = stack.length - 2 * n;\n          vstack.length = vstack.length - n;\n          lstack.length = lstack.length - n;\n        }\n\n        function lex() {\n          var token;\n          token = lexer.lex() || EOF;\n\n          if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n          }\n\n          return token;\n        }\n\n        var symbol,\n            preErrorSymbol,\n            state,\n            action,\n            a,\n            r,\n            yyval = {},\n            p,\n            len,\n            newState,\n            expected;\n\n        while (true) {\n          state = stack[stack.length - 1];\n\n          if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n          } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n              symbol = lex();\n            }\n\n            action = table[state] && table[state][symbol];\n          }\n\n          if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var errStr = '';\n            expected = [];\n\n            for (p in table[state]) {\n              if (this.terminals_[p] && p > TERROR) {\n                expected.push('\\'' + this.terminals_[p] + '\\'');\n              }\n            }\n\n            if (lexer.showPosition) {\n              errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n            } else {\n              errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n            }\n\n            this.parseError(errStr, {\n              text: lexer.match,\n              token: this.terminals_[symbol] || symbol,\n              line: lexer.yylineno,\n              loc: yyloc,\n              expected: expected\n            });\n          }\n\n          if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n          }\n\n          switch (action[0]) {\n            case 1:\n              stack.push(symbol);\n              vstack.push(lexer.yytext);\n              lstack.push(lexer.yylloc);\n              stack.push(action[1]);\n              symbol = null;\n\n              if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n\n                if (recovering > 0) {\n                  recovering--;\n                }\n              } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n              }\n\n              break;\n\n            case 2:\n              len = this.productions_[action[1]][1];\n              yyval.$ = vstack[vstack.length - len];\n              yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n              };\n\n              if (ranges) {\n                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n              }\n\n              r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n              if (typeof r !== 'undefined') {\n                return r;\n              }\n\n              if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n              }\n\n              stack.push(this.productions_[action[1]][0]);\n              vstack.push(yyval.$);\n              lstack.push(yyval._$);\n              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n              stack.push(newState);\n              break;\n\n            case 3:\n              return true;\n          }\n        }\n\n        return true;\n      }\n    };\n    /* generated by jison-lex 0.3.4 */\n\n    var lexer = function () {\n      var lexer = {\n        EOF: 1,\n        parseError: function parseError(str, hash) {\n          if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n          } else {\n            throw new Error(str);\n          }\n        },\n        // resets the lexer, sets new input\n        setInput: function (input, yy) {\n          this.yy = yy || this.yy || {};\n          this._input = input;\n          this._more = this._backtrack = this.done = false;\n          this.yylineno = this.yyleng = 0;\n          this.yytext = this.matched = this.match = '';\n          this.conditionStack = ['INITIAL'];\n          this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n          };\n\n          if (this.options.ranges) {\n            this.yylloc.range = [0, 0];\n          }\n\n          this.offset = 0;\n          return this;\n        },\n        // consumes and returns one char from the input\n        input: function () {\n          var ch = this._input[0];\n          this.yytext += ch;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch;\n          this.matched += ch;\n          var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n          if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n          } else {\n            this.yylloc.last_column++;\n          }\n\n          if (this.options.ranges) {\n            this.yylloc.range[1]++;\n          }\n\n          this._input = this._input.slice(1);\n          return ch;\n        },\n        // unshifts one char (or a string) into the input\n        unput: function (ch) {\n          var len = ch.length;\n          var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n          this._input = ch + this._input;\n          this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n          this.offset -= len;\n          var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n          this.match = this.match.substr(0, this.match.length - 1);\n          this.matched = this.matched.substr(0, this.matched.length - 1);\n\n          if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n          }\n\n          var r = this.yylloc.range;\n          this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n          };\n\n          if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n          }\n\n          this.yyleng = this.yytext.length;\n          return this;\n        },\n        // When called from action, caches matched text and appends it on next action\n        more: function () {\n          this._more = true;\n          return this;\n        },\n        // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n        reject: function () {\n          if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n          } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n              text: \"\",\n              token: null,\n              line: this.yylineno\n            });\n          }\n\n          return this;\n        },\n        // retain first n characters of the match\n        less: function (n) {\n          this.unput(this.match.slice(n));\n        },\n        // displays already matched input, i.e. for error messages\n        pastInput: function () {\n          var past = this.matched.substr(0, this.matched.length - this.match.length);\n          return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n        },\n        // displays upcoming input, i.e. for error messages\n        upcomingInput: function () {\n          var next = this.match;\n\n          if (next.length < 20) {\n            next += this._input.substr(0, 20 - next.length);\n          }\n\n          return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n        },\n        // displays the character position where the lexing error occurred, i.e. for error messages\n        showPosition: function () {\n          var pre = this.pastInput();\n          var c = new Array(pre.length + 1).join(\"-\");\n          return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n        },\n        // test the lexed token: return FALSE when not a match, otherwise return token\n        test_match: function (match, indexed_rule) {\n          var token, lines, backup;\n\n          if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n              yylineno: this.yylineno,\n              yylloc: {\n                first_line: this.yylloc.first_line,\n                last_line: this.last_line,\n                first_column: this.yylloc.first_column,\n                last_column: this.yylloc.last_column\n              },\n              yytext: this.yytext,\n              match: this.match,\n              matches: this.matches,\n              matched: this.matched,\n              yyleng: this.yyleng,\n              offset: this.offset,\n              _more: this._more,\n              _input: this._input,\n              yy: this.yy,\n              conditionStack: this.conditionStack.slice(0),\n              done: this.done\n            };\n\n            if (this.options.ranges) {\n              backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n          }\n\n          lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n          if (lines) {\n            this.yylineno += lines.length;\n          }\n\n          this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n          };\n          this.yytext += match[0];\n          this.match += match[0];\n          this.matches = match;\n          this.yyleng = this.yytext.length;\n\n          if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n          }\n\n          this._more = false;\n          this._backtrack = false;\n          this._input = this._input.slice(match[0].length);\n          this.matched += match[0];\n          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n          if (this.done && this._input) {\n            this.done = false;\n          }\n\n          if (token) {\n            return token;\n          } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n              this[k] = backup[k];\n            }\n\n            return false; // rule action called reject() implying the next rule should be tested instead.\n          }\n\n          return false;\n        },\n        // return next match in input\n        next: function () {\n          if (this.done) {\n            return this.EOF;\n          }\n\n          if (!this._input) {\n            this.done = true;\n          }\n\n          var token, match, tempMatch, index;\n\n          if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n          }\n\n          var rules = this._currentRules();\n\n          for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n              match = tempMatch;\n              index = i;\n\n              if (this.options.backtrack_lexer) {\n                token = this.test_match(tempMatch, rules[i]);\n\n                if (token !== false) {\n                  return token;\n                } else if (this._backtrack) {\n                  match = false;\n                  continue; // rule action called reject() implying a rule MISmatch.\n                } else {\n                  // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                  return false;\n                }\n              } else if (!this.options.flex) {\n                break;\n              }\n            }\n          }\n\n          if (match) {\n            token = this.test_match(match, rules[index]);\n\n            if (token !== false) {\n              return token;\n            } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n            return false;\n          }\n\n          if (this._input === \"\") {\n            return this.EOF;\n          } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n              text: \"\",\n              token: null,\n              line: this.yylineno\n            });\n          }\n        },\n        // return next match that has a token\n        lex: function lex() {\n          var r = this.next();\n\n          if (r) {\n            return r;\n          } else {\n            return this.lex();\n          }\n        },\n        // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n        begin: function begin(condition) {\n          this.conditionStack.push(condition);\n        },\n        // pop the previously active lexer condition state off the condition stack\n        popState: function popState() {\n          var n = this.conditionStack.length - 1;\n\n          if (n > 0) {\n            return this.conditionStack.pop();\n          } else {\n            return this.conditionStack[0];\n          }\n        },\n        // produce the lexer rule set which is active for the currently active lexer condition state\n        _currentRules: function _currentRules() {\n          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n          } else {\n            return this.conditions[\"INITIAL\"].rules;\n          }\n        },\n        // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n        topState: function topState(n) {\n          n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n          if (n >= 0) {\n            return this.conditionStack[n];\n          } else {\n            return \"INITIAL\";\n          }\n        },\n        // alias for begin(condition)\n        pushState: function pushState(condition) {\n          this.begin(condition);\n        },\n        // return the number of states currently on the stack\n        stateStackSize: function stateStackSize() {\n          return this.conditionStack.length;\n        },\n        options: {},\n        performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n          var YYSTATE = YY_START;\n\n          switch ($avoiding_name_collisions) {\n            case 0:\n              return 11;\n              break;\n\n            case 1:\n              return '(';\n              break;\n\n            case 2:\n              return ')';\n              break;\n\n            case 3:\n              return 8;\n              break;\n\n            case 4:\n              return 15;\n              break;\n\n            case 5:\n              return 13;\n              break;\n\n            case 6:\n              return 18;\n              break;\n\n            case 7:\n              return 19;\n              break;\n\n            case 8:\n              return 20;\n              break;\n\n            case 9:\n              return 17;\n              break;\n\n            case 10:\n              return 17;\n              break;\n\n            case 11:\n              return 17;\n              break;\n\n            case 12:\n              /* skip whitespace */\n              break;\n\n            case 13:\n              return 6;\n              break;\n          }\n        },\n        rules: [/^(?:\\/)/, /^(?:\\()/, /^(?:\\))/, /^(?:(\\*|x|\\u00d7|\\u2219|\\u22c5|\\u00b7)\\s*10\\s*\\^)/, /^(?:\\^)/, /^(?:\\*)/, /^(?:[0-9]+\\.[0-9]+)/, /^(?:[0-9]+)/, /^(?:-)/, /^(?:\\u00b0( ?)[cCfF])/, /^(?:fl\\.? oz\\.?)/, /^(?:[\\u00b5]?([A-Za-z-]+|[\\u2103\\u2109\\u212b]))/, /^(?:\\s+)/, /^(?:$)/],\n        conditions: {\n          \"INITIAL\": {\n            \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n            \"inclusive\": true\n          }\n        }\n      };\n      return lexer;\n    }();\n\n    parser.lexer = lexer;\n\n    function Parser() {\n      this.yy = {};\n    }\n\n    Parser.prototype = parser;\n    parser.Parser = Parser;\n    return new Parser();\n  }();\n\n  KAS.unitParser = parser;\n})(KAS);\n/* TODO(charlie): fix these lint errors (http://eslint.org/docs/rules): */\n\n/* eslint-disable indent, no-undef, no-var, one-var, no-dupe-keys, no-new-func, no-redeclare, no-unused-vars, comma-dangle, max-len, prefer-spread, space-infix-ops, space-unary-ops */\n\n\n(function (KAS) {\n  /*  The node hierarcy is as follows:\n  \n      (Expr)\n          (Seq)           2+ children\n              Add\n              Mul\n          Pow             2 children\n          Log             2 children\n          Eq              2 children\n          Trig            1 child\n          Abs             1 child\n          (Symbol)\n              Func        1 child     e.g. f(x)\n              Var         leaf node   e.g. x, x_n\n              Const       leaf node   e.g. pi, e, <i>\n              Unit        leaf node   e.g. kg\n          (Num)           leaf node\n              Rational                e.g. 2/3\n                  Int\n              Float\n  \n      (abstract, not meant to be instantiated)\n  \n      == Key design concepts ==\n      Functional: All methods return new nodes - nodes are never mutated.\n      Ignore commutativity: Commutative inputs should be parsed equivalently.\n      Exploit commutativity: Output should take advantage of ordering.\n  */\n\n  /* non user-facing functions */\n  // assert that all abstract methods have been overridden\n  var abstract = function () {\n    // Try to give people a bit of information when this happens\n    throw new Error(\"Abstract method - must override for expr: \" + this.print());\n  }; // throw an error that is meant to be caught by the test suite (not user facing)\n\n\n  var error = function (message) {\n    throw new Error(message);\n  }; // reliably detect NaN\n\n\n  var isNaN = function (object) {\n    return object !== object;\n  }; // return a random float between min (inclusive) and max (exclusive),\n  // not that inclusivity means much, probabilistically, on floats\n\n\n  var randomFloat = function (min, max) {\n    var extent = max - min;\n    return Math.random() * extent + min;\n  };\n  /* constants */\n\n\n  var ITERATIONS = 12;\n  var TOLERANCE = 9; // decimal places\n\n  /* abstract base expression node */\n\n  function Expr() {}\n\n  _.extend(Expr.prototype, {\n    // this node's immediate constructor\n    func: abstract,\n    // an array of the arguments to this node's immediate constructor\n    args: abstract,\n    // make a new node with the given arguments\n    construct: function (args) {\n      var instance = new this.func();\n      this.func.apply(instance, args);\n      return instance;\n    },\n    // an abstraction for chainable, bottom-up recursion\n    recurse: function (method) {\n      var passed = Array.prototype.slice.call(arguments, 1);\n\n      var args = _.map(this.args(), function (arg) {\n        return _.isString(arg) ? arg : arg[method].apply(arg, passed);\n      });\n\n      return this.construct(args);\n    },\n    // evaluate numerically with given variable mapping\n    eval: abstract,\n    codegen: abstract,\n    compile: function () {\n      var code = this.codegen();\n\n      try {\n        return new Function(\"vars\", \"return \" + code + \";\");\n      } catch (e) {\n        throw new Error(\"Function did not compile: \" + code);\n      }\n    },\n    // returns a string unambiguously representing the expression\n    // should be valid as input\n    // e.g. this.equals(parse(this.print())) === true\n    print: abstract,\n    // returns a TeX string representing the expression\n    tex: abstract,\n    // returns a TeX string, modified by the given options\n    asTex: function (options) {\n      options = options || {};\n\n      _.defaults(options, {\n        display: true,\n        dynamic: true,\n        times: false\n      });\n\n      var tex = this.tex();\n\n      if (options.display) {\n        tex = \"\\\\displaystyle \" + tex;\n      }\n\n      if (options.dynamic) {\n        tex = tex.replace(/\\(/g, \"\\\\left(\");\n        tex = tex.replace(/\\)/g, \"\\\\right)\");\n      }\n\n      if (options.times) {\n        tex = tex.replace(/\\\\cdot/g, \"\\\\times\");\n      }\n\n      return tex;\n    },\n    // returns the name of this expression's constructor as a string\n    // only used for testing and debugging (the ugly regex is for IE8)\n    name: function () {\n      if (this.func.name) {\n        return this.func.name;\n      } else {\n        return this.func.toString().match(/^function\\s*([^\\s(]+)/)[1];\n      }\n    },\n    // returns a string representing current node structure\n    repr: function () {\n      return this.name() + \"(\" + _.map(this.args(), function (arg) {\n        return _.isString(arg) ? arg : arg.repr();\n      }).join(\",\") + \")\";\n    },\n    // removes all negative signs\n    strip: function () {\n      return this.recurse(\"strip\");\n    },\n    // canonically reorders all commutative elements\n    normalize: function () {\n      return this.recurse(\"normalize\");\n    },\n    // expands the expression\n    expand: function () {\n      return this.recurse(\"expand\");\n    },\n    // naively factors out like terms\n    factor: function (options) {\n      return this.recurse(\"factor\", options);\n    },\n    // collect all like terms\n    collect: function (options) {\n      return this.recurse(\"collect\", options);\n    },\n    // strict syntactic equality check\n    equals: function (other) {\n      return this.normalize().print() === other.normalize().print();\n    },\n    // expand and collect until the expression no longer changes\n    simplify: function (options) {\n      options = _.extend({\n        once: false\n      }, options); // Attempt to factor and collect\n\n      var step1 = this.factor(options);\n      var step2 = step1.collect(options); // Rollback if collect didn't do anything\n\n      if (step1.equals(step2)) {\n        step2 = this.collect(options);\n      } // Attempt to expand and collect\n\n\n      var step3 = step2.expand(options);\n      var step4 = step3.collect(options); // Rollback if collect didn't do anything\n\n      if (step3.equals(step4)) {\n        step4 = step2.collect(options);\n      } // One round of simplification complete\n\n\n      var simplified = step4;\n\n      if (options.once || this.equals(simplified)) {\n        return simplified;\n      } else {\n        return simplified.simplify(options);\n      }\n    },\n    // check whether this expression is simplified\n    isSimplified: function () {\n      return this.equals(this.simplify());\n    },\n    // return the child nodes of this node\n    exprArgs: function () {\n      return _.filter(this.args(), function (arg) {\n        return arg instanceof Expr;\n      });\n    },\n    // return the variables (function and non) within the expression\n    getVars: function (excludeFunc) {\n      return _.uniq(_.flatten(_.invoke(this.exprArgs(), \"getVars\", excludeFunc))).sort();\n    },\n    getConsts: function () {\n      return _.uniq(_.flatten(_.invoke(this.exprArgs(), \"getConsts\"))).sort();\n    },\n    getUnits: function () {\n      return _.flatten(_.invoke(this.exprArgs(), \"getUnits\"));\n    },\n    // check whether this expression node is of a particular type\n    is: function (func) {\n      return this instanceof func;\n    },\n    // check whether this expression has a particular node type\n    has: function (func) {\n      if (this instanceof func) {\n        return true;\n      }\n\n      return _.any(this.exprArgs(), function (arg) {\n        return arg.has(func);\n      });\n    },\n    // raise this expression to a given exponent\n    // most useful for eventually implementing i^3 = -i, etc.\n    raiseToThe: function (exp) {\n      return new Pow(this, exp);\n    },\n    // does this expression have a specific rendering hint?\n    // rendering hints are picked up while parsing, but are lost during transformations\n    isSubtract: function () {\n      return false;\n    },\n    isDivide: function () {\n      return false;\n    },\n    isRoot: function () {\n      return false;\n    },\n    // whether this node needs an explicit multiplication sign if following a Num\n    needsExplicitMul: function () {\n      return this.args()[0].needsExplicitMul();\n    },\n    // check that the variables in both expressions are the same\n    sameVars: function (other) {\n      var vars1 = this.getVars();\n      var vars2 = other.getVars(); // the other Expr can have more variables than this one\n      // this lets you multiply equations by other variables\n\n      var same = function (array1, array2) {\n        return !_.difference(array1, array2).length;\n      };\n\n      var lower = function (array) {\n        return _.uniq(_.invoke(array, \"toLowerCase\")).sort();\n      };\n\n      var equal = same(vars1, vars2);\n      var equalIgnoringCase = same(lower(vars1), lower(vars2));\n      return {\n        equal: equal,\n        equalIgnoringCase: equalIgnoringCase\n      };\n    },\n    // semantic equality check, call after sameVars() to avoid potential false positives\n    // plug in random numbers for the variables in both expressions\n    // if they both consistently evaluate the same, then they're the same\n    compare: function (other) {\n      // equation comparisons are handled by Eq.compare()\n      if (other instanceof Eq) {\n        return false;\n      }\n\n      var varList = _.union(this.getVars(\n      /* excludeFunc */\n      true), other.getVars(\n      /* excludeFunc */\n      true)); // If the numbers are large we would like to do a relative comparison\n      // rather than an absolute one, but if they're small enough then an\n      // absolute comparison makes more sense\n\n\n      var getDelta = function (num1, num2) {\n        if (Math.abs(num1) < 1 || Math.abs(num2) < 1) {\n          return Math.abs(num1 - num2);\n        } else {\n          return Math.abs(1 - num1 / num2);\n        }\n      };\n\n      var equalNumbers = function (num1, num2) {\n        var delta = getDelta(num1, num2);\n        return num1 === num2 ||\n        /* needed if either is +/- Infinity */\n        isNaN(num1) && isNaN(num2) || delta < Math.pow(10, -TOLERANCE);\n      }; // if no variables, only need to evaluate once\n\n\n      if (!varList.length && !this.has(Unit) && !other.has(Unit)) {\n        return equalNumbers(this.eval(), other.eval());\n      } // collect here to avoid sometimes dividing by zero, and sometimes not\n      // it is better to be deterministic, e.g. x/x -> 1\n      // TODO(alex): may want to keep track of assumptions as they're made\n\n\n      var expr1 = this.collect();\n      var expr2 = other.collect();\n      var unitList1 = this.getUnits();\n      var unitList2 = other.getUnits();\n\n      if (!_.isEqual(unitList1, unitList2)) {\n        return false;\n      } // Compare at a set number (currently 12) of points to determine\n      // equality.\n      //\n      // `range` (and `vars`) is the only variable that varies through the\n      // iterations. For each of range = 10, 100, and 1000, each random\n      // variable is picked from (-range, range).\n      //\n      // Note that because there are 12 iterations and three ranges, each\n      // range is checked four times.\n\n\n      for (var i = 0; i < ITERATIONS; i++) {\n        var vars = {}; // One third total iterations each with range 10, 100, and 1000\n\n        var range = Math.pow(10, 1 + Math.floor(3 * i / ITERATIONS)); // Half of the iterations should only use integer values.\n        // This is because expressions like (-2)^x are common but result\n        // in NaN when evaluated in JS with non-integer values of x.\n        // Without this, (-2)^x and (-2)^(x+1) both end up always being NaN\n        // and thus equivalent. With this, the most common failure case is\n        // avoided. However, less common cases such as (-2)^(x+0.1) and\n        // (-2)^(x+1.1) will still both evaluate to NaN and result in a\n        // false positive.\n        //\n        // Note that the above is only true in vanilla JS Number-land,\n        // which has no concept of complex numbers. The solution is simple:\n        // Integrate a library for handling complex numbers.\n        //\n        // TODO(alex): Add support for complex numbers, then remove this.\n\n        var useFloats = i % 2 === 0;\n\n        _.each(varList, function (v) {\n          vars[v] = useFloats ? randomFloat(-range, range) : _.random(-range, range);\n        });\n\n        var equal;\n\n        if (expr1.has(Func) || expr2.has(Func) || expr1.has(Unit) || expr2.has(Unit)) {\n          var result1 = expr1.partialEval(vars);\n          var result2 = expr2.partialEval(vars);\n          equal = result1.simplify().equals(result2.simplify());\n        } else {\n          var result1 = expr1.eval(vars);\n          var result2 = expr2.eval(vars);\n          equal = equalNumbers(result1, result2);\n        }\n\n        if (!equal) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    // evaluate as much of the expression as possible\n    partialEval: function (vars) {\n      if (this instanceof Unit) {\n        return this;\n      } else if (!this.has(Func)) {\n        return new Float(this.eval(vars).toFixed(TOLERANCE)).collect();\n      } else if (this instanceof Func) {\n        return new Func(this.symbol, this.arg.partialEval(vars));\n      } else {\n        return this.recurse(\"partialEval\", vars);\n      }\n    },\n    // check that the structure of both expressions is the same\n    // all negative signs are stripped and the expressions are converted to\n    // a canonical commutative form\n    // should only be done after compare() returns true to avoid false positives\n    sameForm: function (other) {\n      return this.strip().equals(other.strip());\n    },\n    // returns the GCD of this expression and the given factor\n    findGCD: function (factor) {\n      return this.equals(factor) ? factor : Num.One;\n    },\n    // return this expression's denominator\n    getDenominator: function () {\n      return Num.One;\n    },\n    // return this expression as a Mul\n    asMul: function () {\n      return new Mul(Num.One, this);\n    },\n    // TODO(alex): rename to isDefinitePositive or similar?\n    // return whether this expression is 100% positive\n    isPositive: abstract,\n    // TODO(alex): rename to hasNegativeSign or similar?\n    // return whether this expression has a negative sign\n    isNegative: function () {\n      return false;\n    },\n    // return a factor of this expression that is 100% positive\n    asPositiveFactor: function () {\n      return this.isPositive() ? this : Num.One;\n    },\n    // return a copy of the expression with a new hint set (preserves hints)\n    addHint: function (hint) {\n      if (!hint) {\n        return this;\n      }\n\n      var expr = this.construct(this.args());\n      expr.hints = _.clone(this.hints);\n      expr.hints[hint] = true;\n      return expr;\n    },\n    hints: {\n      parens: false\n    },\n    // currently unused!\n    asExpr: function () {\n      return this;\n    },\n    // complete parse by performing a few necessary transformations\n    completeParse: function () {\n      return this.recurse(\"completeParse\");\n    },\n    abs: abstract,\n    negate: function () {\n      return new Mul(Num.Neg, this);\n    }\n  });\n  /* abstract sequence node */\n\n\n  function Seq() {}\n\n  Seq.prototype = new Expr();\n\n  _.extend(Seq.prototype, {\n    args: function () {\n      return this.terms;\n    },\n    normalize: function () {\n      var terms = _.sortBy(_.invoke(this.terms, \"normalize\"), function (term) {\n        return term.print();\n      });\n\n      return new this.func(terms);\n    },\n    expand: function () {\n      return this.recurse(\"expand\").flatten();\n    },\n    // partition the sequence into its numeric and non-numeric parts\n    // makes no guarantees about the validity of either part!\n    partition: function () {\n      var terms = _.groupBy(this.terms, function (term) {\n        return term instanceof Num;\n      }); // XXX using a boolean as a key just converts it to a string. I don't\n      // think this code was written with that in mind. Probably doesn't\n      // matter except for readability.\n\n\n      var numbers = terms[true] || [];\n      var others = terms[false] || [];\n      return [new this.func(numbers), new this.func(others)];\n    },\n    // ensure that sequences have 2+ terms and no nested sequences of the same type\n    // this is a shallow flattening and will return a non-Seq if terms.length <= 1\n    flatten: function () {\n      var type = this;\n\n      var terms = _.reject(this.terms, function (term) {\n        return term.equals(type.identity);\n      });\n\n      if (terms.length === 0) {\n        return type.identity;\n      }\n\n      if (terms.length === 1) {\n        return terms[0];\n      }\n\n      var grouped = _.groupBy(terms, function (term) {\n        return term instanceof type.func;\n      }); // same contains the children which are Seqs of the same type as this Seq\n\n\n      var same = grouped[true] || [];\n      var others = grouped[false] || [];\n      var flattened = others.concat(_.flatten(_.pluck(same, \"terms\"),\n      /* shallow: */\n      true));\n      return new type.func(flattened);\n    },\n    // the identity associated with the sequence\n    identity: undefined,\n    // reduce a numeric sequence to a Num\n    reduce: abstract,\n    isPositive: function () {\n      var terms = _.invoke(this.terms, \"collect\");\n\n      return _.all(_.invoke(terms, \"isPositive\"));\n    },\n    // return a new Seq with a given term replaced by a different term\n    // (or array of terms). given term can be passed directly, or by index\n    // if no new term is provided, the old one is simply removed\n    replace: function (oldTerm, newTerm) {\n      var index;\n\n      if (oldTerm instanceof Expr) {\n        index = _.indexOf(this.terms, oldTerm);\n      } else {\n        index = oldTerm;\n      }\n\n      var newTerms = [];\n\n      if (_.isArray(newTerm)) {\n        newTerms = newTerm;\n      } else if (newTerm) {\n        newTerms = [newTerm];\n      }\n\n      var terms = this.terms.slice(0, index).concat(newTerms).concat(this.terms.slice(index + 1));\n      return new this.func(terms);\n    },\n    // syntactic sugar for replace()\n    remove: function (term) {\n      return this.replace(term);\n    },\n    getDenominator: function () {\n      // TODO(alex): find and return LCM\n      return new Mul(_.invoke(this.terms, \"getDenominator\")).flatten();\n    }\n  });\n  /* sequence of additive terms */\n\n\n  function Add() {\n    if (arguments.length === 1) {\n      this.terms = arguments[0];\n    } else {\n      this.terms = _.toArray(arguments);\n    }\n  }\n\n  Add.prototype = new Seq();\n\n  _.extend(Add.prototype, {\n    func: Add,\n    eval: function (vars, options) {\n      return _.reduce(this.terms, function (memo, term) {\n        return memo + term.eval(vars, options);\n      }, 0);\n    },\n    codegen: function () {\n      return _.map(this.terms, function (term) {\n        return \"(\" + term.codegen() + \")\";\n      }).join(\" + \") || \"0\";\n    },\n    print: function () {\n      return _.invoke(this.terms, \"print\").join(\"+\");\n    },\n    tex: function () {\n      var tex = \"\";\n\n      _.each(this.terms, function (term) {\n        if (!tex || term.isSubtract()) {\n          tex += term.tex();\n        } else {\n          tex += \"+\" + term.tex();\n        }\n      });\n\n      return tex;\n    },\n    collect: function (options) {\n      var terms = _.invoke(this.terms, \"collect\", options); // [Expr expr, Num coefficient]\n\n\n      var pairs = [];\n\n      _.each(terms, function (term) {\n        if (term instanceof Mul) {\n          var muls = term.partition();\n          pairs.push([muls[1].flatten(), muls[0].reduce(options)]);\n        } else if (term instanceof Num) {\n          pairs.push([Num.One, term]);\n        } else {\n          pairs.push([term, Num.One]);\n        }\n      }); // { (Expr expr).print(): [[Expr expr, Num coefficient]] }\n\n\n      var grouped = _.groupBy(pairs, function (pair) {\n        return pair[0].normalize().print();\n      });\n\n      var collected = _.compact(_.map(grouped, function (pairs) {\n        var expr = pairs[0][0];\n        var sum = new Add(_.zip.apply(_, pairs)[1]);\n        var coefficient = sum.reduce(options);\n        return new Mul(coefficient, expr).collect(options);\n      })); // TODO(alex): use the Pythagorean identity here\n      // e.g. x*sin^2(y) + x*cos^2(y) -> x\n\n\n      return new Add(collected).flatten();\n    },\n    // naively factor out anything that is common to all terms\n    // if options.keepNegative is specified, won't factor out a common -1\n    factor: function (options) {\n      options = _.extend({\n        keepNegative: false\n      }, options);\n\n      var terms = _.invoke(this.terms, \"collect\");\n\n      var factors;\n\n      if (terms[0] instanceof Mul) {\n        factors = terms[0].terms;\n      } else {\n        factors = [terms[0]];\n      }\n\n      _.each(_.rest(this.terms), function (term) {\n        factors = _.map(factors, function (factor) {\n          return term.findGCD(factor);\n        });\n      });\n\n      if (!options.keepNegative && this.isNegative()) {\n        factors.push(Num.Neg);\n      }\n\n      factors = new Mul(factors).flatten().collect();\n\n      var remainder = _.map(terms, function (term) {\n        return Mul.handleDivide(term, factors).simplify();\n      });\n\n      remainder = new Add(remainder).flatten();\n      return Mul.createOrAppend(factors, remainder).flatten();\n    },\n    reduce: function (options) {\n      return _.reduce(this.terms, function (memo, term) {\n        return memo.add(term, options);\n      }, this.identity);\n    },\n    needsExplicitMul: function () {\n      return false;\n    },\n    isNegative: function () {\n      var terms = _.invoke(this.terms, \"collect\");\n\n      return _.all(_.invoke(terms, \"isNegative\"));\n    },\n    negate: function () {\n      return new Add(_.invoke(this.terms, \"negate\"));\n    }\n  });\n  /* sequence of multiplicative terms */\n\n\n  function Mul() {\n    if (arguments.length === 1) {\n      this.terms = arguments[0];\n    } else {\n      this.terms = _.toArray(arguments);\n    }\n  }\n\n  Mul.prototype = new Seq();\n\n  _.extend(Mul.prototype, {\n    func: Mul,\n    eval: function (vars, options) {\n      return _.reduce(this.terms, function (memo, term) {\n        return memo * term.eval(vars, options);\n      }, 1);\n    },\n    codegen: function () {\n      return _.map(this.terms, function (term) {\n        return \"(\" + term.codegen() + \")\";\n      }).join(\" * \") || \"0\";\n    },\n    print: function () {\n      return _.map(this.terms, function (term) {\n        return term instanceof Add ? \"(\" + term.print() + \")\" : term.print();\n      }).join(\"*\");\n    },\n    getUnits: function () {\n      var tmUnits = _(this.terms).chain().map(function (term) {\n        return term.getUnits();\n      }).flatten().value();\n\n      tmUnits.sort(function (a, b) {\n        return a.unit < b.unit;\n      });\n      return tmUnits;\n    },\n    // since we don't care about commutativity, we can render a Mul any way we choose\n    // so we follow convention: first any negatives, then any numbers, then everything else\n    tex: function () {\n      var cdot = \" \\\\cdot \";\n\n      var terms = _.groupBy(this.terms, function (term) {\n        if (term.isDivide()) {\n          return \"inverse\";\n        } else if (term instanceof Num) {\n          return \"number\";\n        } else {\n          return \"other\";\n        }\n      });\n\n      var inverses = terms.inverse || [];\n      var numbers = terms.number || [];\n      var others = terms.other || [];\n      var negatives = \"\";\n      var numerator; // check all the numbers to see if there is a rational we can extract,\n      // since we would like 1/2x/y to come out as \\frac{1}{2}\\frac{x}{y},\n      // and not \\frac{1x}{2y}.\n\n      for (var i = 0; i < numbers.length; i++) {\n        var isRational = numbers[i] instanceof Rational && !(numbers[i] instanceof Int);\n\n        if (isRational && others.length > 0 && inverses.length > 0) {\n          var withThisRemoved = numbers.slice();\n          withThisRemoved.splice(i, 1);\n          var newTerms = withThisRemoved.concat(inverses).concat(others);\n          return numbers[i].tex() + new Mul(newTerms).tex();\n        }\n      }\n\n      numbers = _.compact(_.map(numbers, function (term) {\n        var hasDenom = term instanceof Rational && !(term instanceof Int);\n        var shouldPushDown = !term.hints.fraction || inverses.length > 0;\n\n        if (hasDenom && shouldPushDown) {\n          // e.g. 3x/4 -> 3/4*x (internally) -> 3x/4 (rendered)\n          inverses.push(new Pow(new Int(term.d), Num.Div));\n          var number = new Int(term.n);\n          number.hints = term.hints;\n          return _.any(term.hints) ? number : null;\n        } else {\n          return term;\n        }\n      }));\n\n      if (numbers.length === 0 && others.length === 1) {\n        // e.g. (x+y)/z -> \\frac{x+y}{z}\n        numerator = others[0].tex();\n      } else {\n        var tex = \"\";\n\n        _.each(numbers, function (term) {\n          if (term.hints.subtract && term.hints.entered) {\n            negatives += \"-\";\n            tex += (tex ? cdot : \"\") + term.abs().tex();\n          } else if (term instanceof Int && term.n === -1 && (term.hints.negate || term.hints.subtract)) {\n            // e.g. -1*-1 -> --1\n            // e.g. -1*x -> -x\n            negatives += \"-\";\n          } else {\n            // e.g. 2*3 -> 2(dot)3\n            tex += (tex ? cdot : \"\") + term.tex();\n          }\n        });\n\n        _.each(others, function (term) {\n          if (term.needsExplicitMul()) {\n            // e.g. 2*2^3 -> 2(dot)2^3\n            tex += (tex ? cdot : \"\") + term.tex();\n          } else if (term instanceof Add) {\n            // e.g. (a+b)*c -> (a+b)c\n            tex += \"(\" + term.tex() + \")\";\n          } else {\n            // e.g. a*b*c -> abc\n            tex += term.tex();\n          }\n        });\n\n        numerator = tex ? tex : \"1\";\n      }\n\n      if (!inverses.length) {\n        return negatives + numerator;\n      } else {\n        var denominator = new Mul(_.invoke(inverses, \"asDivide\")).flatten().tex();\n        return negatives + \"\\\\frac{\" + numerator + \"}{\" + denominator + \"}\";\n      }\n    },\n    strip: function () {\n      var terms = _.map(this.terms, function (term) {\n        return term instanceof Num ? term.abs() : term.strip();\n      });\n\n      return new Mul(terms).flatten();\n    },\n    // expand numerator and denominator separately\n    expand: function () {\n      var isAdd = function (term) {\n        return term instanceof Add;\n      };\n\n      var isInverse = function (term) {\n        return term instanceof Pow && term.exp.isNegative();\n      };\n\n      var isInverseAdd = function (term) {\n        return isInverse(term) && isAdd(term.base);\n      };\n\n      var mul = this.recurse(\"expand\").flatten();\n\n      var hasAdd = _.any(mul.terms, isAdd);\n\n      var hasInverseAdd = _.any(mul.terms, isInverseAdd);\n\n      if (!(hasAdd || hasInverseAdd)) {\n        return mul;\n      }\n\n      var terms = _.groupBy(mul.terms, isInverse);\n\n      var normals = terms[false] || [];\n      var inverses = terms[true] || [];\n\n      if (hasAdd) {\n        var grouped = _.groupBy(normals, isAdd);\n\n        var adds = grouped[true] || [];\n        var others = grouped[false] || []; // loop over each additive sequence\n\n        var expanded = _.reduce(adds, function (expanded, add) {\n          // loop over each expanded array of terms\n          return _.reduce(expanded, function (temp, array) {\n            // loop over each additive sequence's terms\n            return temp.concat(_.map(add.terms, function (term) {\n              return array.concat(term);\n            }));\n          }, []);\n        }, [[]]); // join each fully expanded array of factors with remaining multiplicative factors\n\n\n        var muls = _.map(expanded, function (array) {\n          return new Mul(others.concat(array)).flatten();\n        });\n\n        normals = [new Add(muls)];\n      }\n\n      if (hasInverseAdd) {\n        var denominator = new Mul(_.invoke(inverses, \"getDenominator\")).flatten();\n        inverses = [new Pow(denominator.expand(), Num.Div)];\n      }\n\n      return new Mul(normals.concat(inverses)).flatten();\n    },\n    factor: function (options) {\n      var factored = this.recurse(\"factor\", options).flatten();\n\n      if (!(factored instanceof Mul)) {\n        return factored;\n      } // Combine any factored out Rationals into one, but don't collect\n\n\n      var grouped = _.groupBy(factored.terms, function (term) {\n        return term instanceof Rational;\n      }); // Could also accomplish this by passing a new option\n      // e.g. return  memo.mul(term, {autocollect: false});\n      // TODO(alex): Decide whether this is a good use of options or not\n\n\n      var rational = _.reduce(grouped[true], function (memo, term) {\n        return {\n          n: memo.n * term.n,\n          d: memo.d * term.d\n        };\n      }, {\n        n: 1,\n        d: 1\n      });\n\n      if (rational.d === 1) {\n        rational = new Int(rational.n);\n      } else {\n        rational = new Rational(rational.n, rational.d);\n      }\n\n      return new Mul((grouped[false] || []).concat(rational)).flatten();\n    },\n    collect: function (options) {\n      var partitioned = this.recurse(\"collect\", options).partition();\n      var number = partitioned[0].reduce(options); // e.g. 0*x -> 0\n\n      if (number.eval() === 0) {\n        return Num.Zero;\n      }\n\n      var others = partitioned[1].flatten(); // e.g. 2*2 -> 4\n      // e.g. 2*2*x -> 4*x\n\n      if (!(others instanceof Mul)) {\n        return new Mul(number, others).flatten();\n      }\n\n      others = others.terms; // [Expr base, Expr exp]\n\n      var pairs = [];\n\n      _.each(others, function (term) {\n        if (term instanceof Pow) {\n          pairs.push([term.base, term.exp]);\n        } else {\n          pairs.push([term, Num.One]);\n        }\n      }); // {(Expr base).print(): [[Expr base, Expr exp]]}\n\n\n      var grouped = _.groupBy(pairs, function (pair) {\n        return pair[0].normalize().print();\n      }); // [[Expr base, Expr exp]]\n\n\n      var summed = _.compact(_.map(grouped, function (pairs) {\n        var base = pairs[0][0];\n        var sum = new Add(_.zip.apply(_, pairs)[1]);\n        var exp = sum.collect(options);\n\n        if (exp instanceof Num && exp.eval() === 0) {\n          return null;\n        } else {\n          return [base, exp];\n        }\n      })); // XXX `pairs` is shadowed four or five times in this function\n\n\n      var pairs = _.groupBy(summed, function (pair) {\n        if (pair[0] instanceof Trig && pair[0].isBasic()) {\n          return \"trig\";\n        } else if (pair[0] instanceof Log) {\n          return \"log\";\n        } else {\n          return \"expr\";\n        }\n      });\n\n      var trigs = pairs.trig || [];\n      var logs = pairs.log || [];\n      var exprs = pairs.expr || [];\n\n      if (trigs.length > 1) {\n        // combine sines and cosines into other trig functions\n        // {Trig.arg.print(): [[Trig base, Expr exp]]}\n        var byArg = _.groupBy(trigs, function (pair) {\n          return pair[0].arg.normalize().print();\n        });\n\n        trigs = [];\n\n        _.each(byArg, function (pairs) {\n          var arg = pairs[0][0].arg; // {Trig.type: Expr exp}\n\n          var funcs = {\n            sin: Num.Zero,\n            cos: Num.Zero\n          };\n\n          _.each(pairs, function (pair) {\n            funcs[pair[0].type] = pair[1];\n          });\n\n          if (Mul.handleNegative(funcs.sin).collect(options).equals(funcs.cos)) {\n            // e.g. sin^x(y)/cos^x(y) -> tan^x(y)\n            if (funcs.cos.isNegative()) {\n              funcs = {\n                tan: funcs.sin\n              };\n            } else {\n              funcs = {\n                cot: funcs.cos\n              };\n            }\n          } // TODO(alex): combine even if exponents not a perfect match\n          // TODO(alex): transform 1/sin and 1/cos into csc and sec\n\n\n          _.each(funcs, function (exp, type) {\n            trigs.push([new Trig(type, arg), exp]);\n          });\n        });\n      }\n\n      if (logs.length > 1) {\n        // combine logs with the same base\n        // {Log.base.print(): [[Log base, Expr exp]]}\n        var byBase = _.groupBy(logs, function (pair) {\n          return pair[0].base.normalize().print();\n        });\n\n        logs = [];\n\n        _.each(byBase, function (pairs) {\n          // only combine two logs of the same base, otherwise commutative\n          // differences result in different equally valid output\n          // e.g. ln(x)/ln(z)*ln(y) -> log_z(x)*ln(y)\n          // e.g. ln(x)*ln(y)/ln(z) -> ln(x)*log_z(y)\n          if (pairs.length === 2 && Mul.handleNegative(pairs[0][1]).collect(options).equals(pairs[1][1])) {\n            // e.g. ln(x)^y/ln(b)^y -> log_b(x)^y\n            if (pairs[0][1].isNegative()) {\n              logs.push([new Log(pairs[0][0].power, pairs[1][0].power), pairs[1][1]]);\n            } else {\n              logs.push([new Log(pairs[1][0].power, pairs[0][0].power), pairs[0][1]]);\n            }\n          } else {\n            logs = logs.concat(pairs);\n          }\n        }); // TODO(alex): combine if all inverses are the same e.g. ln(y)*ln(z)/ln(x)/ln(x)\n\n      }\n\n      pairs = trigs.concat(logs).concat(exprs);\n\n      var collected = _.map(pairs, function (pair) {\n        return new Pow(pair[0], pair[1]).collect(options);\n      });\n\n      return new Mul([number].concat(collected)).flatten();\n    },\n    isSubtract: function () {\n      return _.any(this.terms, function (term) {\n        return term instanceof Num && term.hints.subtract;\n      });\n    },\n    // factor a single -1 in to the Mul\n    // combine with a Num if all Nums are positive, else add as a term\n    factorIn: function (hint) {\n      var partitioned = this.partition();\n      var numbers = partitioned[0].terms;\n\n      var fold = numbers.length && _.all(numbers, function (num) {\n        return num.n > 0;\n      });\n\n      if (fold) {\n        // e.g. - x*2*3 -> x*-2*3\n        var num = numbers[0].negate();\n        num.hints = numbers[0].hints;\n        return this.replace(numbers[0], num.addHint(hint));\n      } else {\n        // e.g. - x*y -> -1*x*y\n        // e.g. - x*-2 -> -1*x*-2\n        return new Mul([Num.negativeOne(hint)].concat(this.terms));\n      }\n    },\n    // factor out a single hinted -1 (assume it is the division hint)\n    // TODO(alex): make more general or rename to be more specific\n    factorOut: function () {\n      var factored = false;\n\n      var terms = _.compact(_.map(this.terms, function (term, i, list) {\n        if (!factored && term instanceof Num && term.hints.divide) {\n          factored = true;\n          return term.n !== -1 ? term.negate() : null;\n        } else {\n          return term;\n        }\n      }));\n\n      if (terms.length === 1) {\n        return terms[0];\n      } else {\n        return new Mul(terms);\n      }\n    },\n    reduce: function (options) {\n      return _.reduce(this.terms, function (memo, term) {\n        return memo.mul(term, options);\n      }, this.identity);\n    },\n    findGCD: function (factor) {\n      return new Mul(_.invoke(this.terms, \"findGCD\", factor)).flatten();\n    },\n    asMul: function () {\n      return this;\n    },\n    asPositiveFactor: function () {\n      if (this.isPositive()) {\n        return this;\n      } else {\n        var terms = _.invoke(this.collect().terms, \"asPositiveFactor\");\n\n        return new Mul(terms).flatten();\n      }\n    },\n    isNegative: function () {\n      return _.any(_.invoke(this.collect().terms, \"isNegative\"));\n    },\n    fold: function () {\n      return Mul.fold(this);\n    },\n    negate: function () {\n      var isNum = function (expr) {\n        return expr instanceof Num;\n      };\n\n      if (_.any(this.terms, isNum)) {\n        var num = _.find(this.terms, isNum);\n\n        return this.replace(num, num.negate());\n      } else {\n        return new Mul([Num.Neg].concat(this.terms));\n      }\n    }\n  }); // static methods for the sequence types\n\n\n  _.each([Add, Mul], function (type) {\n    _.extend(type, {\n      // create a new sequence unless left is already one (returns a copy)\n      createOrAppend: function (left, right) {\n        if (left instanceof type) {\n          return new type(left.terms.concat(right));\n        } else {\n          return new type(left, right);\n        }\n      }\n    });\n  });\n\n  _.extend(Mul, {\n    // negative signs should be folded into numbers whenever possible\n    // never fold into a Num that's already negative or a Mul that has a negative Num\n    // an optional hint is kept track of to properly render user input\n    // an empty hint means negation\n    handleNegative: function (expr, hint) {\n      if (expr instanceof Num && expr.n > 0) {\n        // e.g. - 2 -> -2\n        var negated = expr.negate(); // TODO(alex): rework hint system so that this isn't necessary\n\n        negated.hints = expr.hints;\n        return negated.addHint(hint);\n      } else if (expr instanceof Mul) {\n        // e.g. - x*2*3 -> x*-2*3\n        // e.g. - x*y -> -1*x*y\n        // e.g. - x*-2 -> -1*x*-2\n        return expr.factorIn(hint);\n      } else {\n        // e.g. - x -> -1*x\n        return new Mul(Num.negativeOne(hint), expr);\n      }\n    },\n    // division can create either a Rational or a Mul\n    handleDivide: function (left, right) {\n      // dividing by a Mul is the same as repeated division by its terms\n      if (right instanceof Mul) {\n        var first = Mul.handleDivide(left, right.terms[0]);\n        var rest = new Mul(_.rest(right.terms)).flatten();\n        return Mul.handleDivide(first, rest);\n      }\n\n      var isInt = function (expr) {\n        return expr instanceof Int;\n      };\n\n      var isRational = function (expr) {\n        return expr instanceof Rational;\n      }; // for simplification purposes, fold Ints into Rationals if possible\n      // e.g. 3x / 4 -> 3/4 * x (will still render as 3x/4)\n\n\n      if (isInt(right) && left instanceof Mul && _.any(left.terms, isInt)) {\n        // search from the right\n        var reversed = left.terms.slice().reverse();\n\n        var num = _.find(reversed, isRational);\n\n        if (!isInt(num)) {\n          return new Mul(left.terms.concat([new Rational(1, right.n).addHint(\"fraction\")]));\n        }\n\n        var rational = new Rational(num.n, right.n);\n        rational.hints = num.hints; // in the case of something like 1/3 * 6/8, we want the\n        // 6/8 to be considered a fraction, not just a division\n\n        if (num === reversed[0]) {\n          rational = rational.addHint(\"fraction\");\n        }\n\n        var result;\n\n        if (num.n < 0 && right.n < 0) {\n          rational.d = -rational.d;\n          return left.replace(num, [Num.Neg, rational]);\n        } else {\n          return left.replace(num, rational);\n        }\n      }\n\n      var divide = function (a, b) {\n        if (b instanceof Int) {\n          if (a instanceof Int) {\n            if (a.n < 0 && b.n < 0) {\n              // e.g. -2 / -3 -> -1*-2/3\n              return [Num.Neg, new Rational(a.n, -b.n).addHint(\"fraction\")];\n            } else {\n              // e.g. 2 / 3 -> 2/3\n              // e.g. -2 / 3 -> -2/3\n              // e.g. 2 / -3 -> -2/3\n              return [new Rational(a.n, b.n).addHint(\"fraction\")];\n            }\n          } else {\n            // e.g. x / 3 -> x*1/3\n            // e.g. x / -3 -> x*-1/3\n            var inverse = new Rational(1, b.eval());\n\n            if (b.eval() < 0) {\n              return [a, inverse.addHint(\"negate\")];\n            } else {\n              return [a, inverse];\n            }\n          }\n        } else {\n          var pow;\n\n          if (b instanceof Trig && b.exp) {\n            // e.g. sin^2(x) -> sin(x)^2\n            var exp = b.exp;\n            b.exp = undefined;\n            b = new Pow(b, exp);\n          }\n\n          if (b instanceof Pow) {\n            // e.g. (x^2) ^ -1 -> x^-2\n            // e.g. (x^y) ^ -1 -> x^(-1*y)\n            // e.g. (x^(yz)) ^ -1 -> x^(-1*y*z)\n            pow = new Pow(b.base, Mul.handleNegative(b.exp, \"divide\"));\n          } else {\n            // e.g. x ^ -1 -> x^-1\n            pow = new Pow(b, Num.Div);\n          }\n\n          if (a instanceof Int && a.n === 1) {\n            // e.g. 1 / x -> x^-1\n            return [pow];\n          } else {\n            // e.g. 2 / x -> 2*x^-1\n            return [a, pow];\n          }\n        }\n      };\n\n      if (left instanceof Mul) {\n        var divided = divide(_.last(left.terms), right);\n        return new Mul(_.initial(left.terms).concat(divided));\n      } else {\n        var divided = divide(left, right);\n        return new Mul(divided).flatten();\n      }\n    },\n    // fold negative signs into numbers if possible\n    // negative signs are not the same as multiplying by negative one!\n    // e.g. -x      ->  -1*x    simplified\n    // e.g. -2*x    ->  -2*x    simplified\n    // e.g. -x*2    ->  -1*x*2  not simplified -> x*-2 simplified\n    // e.g. -1*x*2  ->  -1*x*2  not simplified\n    // also fold multiplicative terms into open Trig and Log nodes\n    // e.g. (sin x)*x -> sin(x)*x\n    // e.g. sin(x)*x -> sin(x)*x\n    // e.g. sin(x)*(x) -> sin(x)*x\n    // e.g. sin(x)*sin(y) -> sin(x)*sin(y)\n    fold: function (expr) {\n      if (expr instanceof Mul) {\n        // assuming that this will be second to last\n        var trigLog = _.find(_.initial(expr.terms), function (term) {\n          return (term instanceof Trig || term instanceof Log) && term.hints.open;\n        });\n\n        var index = _.indexOf(expr.terms, trigLog);\n\n        if (trigLog) {\n          var last = _.last(expr.terms);\n\n          if (trigLog.hints.parens || last.hints.parens || last.has(Trig) || last.has(Log)) {\n            trigLog.hints.open = false;\n          } else {\n            var newTrigLog;\n\n            if (trigLog instanceof Trig) {\n              newTrigLog = Trig.create([trigLog.type, trigLog.exp], Mul.createOrAppend(trigLog.arg, last).fold());\n            } else {\n              newTrigLog = Log.create(trigLog.base, Mul.createOrAppend(trigLog.power, last).fold());\n            }\n\n            if (index === 0) {\n              return newTrigLog;\n            } else {\n              return new Mul(expr.terms.slice(0, index).concat(newTrigLog)).fold();\n            }\n          }\n        }\n\n        var partitioned = expr.partition();\n        var numbers = partitioned[0].terms;\n\n        var pos = function (num) {\n          return num.n > 0;\n        };\n\n        var neg = function (num) {\n          return num.n === -1 && num.hints.negate;\n        };\n\n        var posOrNeg = function (num) {\n          return pos(num) || neg(num);\n        };\n\n        if (numbers.length > 1 && _.some(numbers, neg) && _.some(numbers, pos) && _.every(numbers, posOrNeg)) {\n          var firstNeg = _.indexOf(expr.terms, _.find(expr.terms, neg));\n\n          var firstNum = _.indexOf(expr.terms, _.find(expr.terms, pos)); // e.g. -x*2 -> x*-2\n\n\n          if (firstNeg < firstNum) {\n            return expr.replace(firstNum, expr.terms[firstNum].negate()).remove(firstNeg);\n          }\n        }\n      } // in all other cases, make no change\n\n\n      return expr;\n    }\n  });\n  /* exponentiation */\n\n\n  function Pow(base, exp) {\n    this.base = base;\n    this.exp = exp;\n  }\n\n  Pow.prototype = new Expr();\n\n  _.extend(Pow.prototype, {\n    func: Pow,\n    args: function () {\n      return [this.base, this.exp];\n    },\n    eval: function (vars, options) {\n      var evaledBase = this.base.eval(vars, options);\n      var evaledExp = this.exp.eval(vars, options); // Math.pow unequivocally returns NaN when provided with both a\n      // negative base and a fractional exponent. However, in some cases, we\n      // know that our exponent is actually valid for use with negative\n      // bases (e.g., (-5)^(1/3)).\n      //\n      // Here, we explicitly check for such cases. We really only handle a\n      // limited subset (by requiring that the exponent is rational with an\n      // odd denominator), but it's still useful.\n      //   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n\n      if (evaledBase < 0) {\n        var simplifiedExp = this.exp.simplify(); // If Float, convert to a Rational to enable the logic below\n\n        if (simplifiedExp instanceof Float) {\n          var num = simplifiedExp.n;\n          var decimals = (num - num.toFixed()).toString().length - 2;\n          var denominator = Math.pow(10, decimals);\n          var rationalExp = new Rational(num * denominator, denominator);\n          simplifiedExp = rationalExp.simplify();\n        }\n\n        if (simplifiedExp instanceof Rational) {\n          var oddDenominator = Math.abs(simplifiedExp.d) % 2 === 1;\n\n          if (oddDenominator) {\n            var oddNumerator = Math.abs(simplifiedExp.n) % 2 === 1;\n            var sign = oddNumerator ? -1 : 1;\n            return sign * Math.pow(-1 * evaledBase, evaledExp);\n          }\n        }\n      }\n\n      return Math.pow(evaledBase, evaledExp);\n    },\n    getUnits: function () {\n      return this.base.getUnits().map(function (unit) {\n        return {\n          unit: unit.unit,\n          pow: unit.pow * this.exp.n\n        };\n      }.bind(this));\n    },\n    codegen: function () {\n      return \"Math.pow(\" + this.base.codegen() + \", \" + this.exp.codegen() + \")\";\n    },\n    print: function () {\n      var base = this.base.print();\n\n      if (this.base instanceof Seq || this.base instanceof Pow) {\n        base = \"(\" + base + \")\";\n      }\n\n      return base + \"^(\" + this.exp.print() + \")\";\n    },\n    tex: function () {\n      if (this.isDivide()) {\n        // e.g. x ^ -1 w/hint -> 1/x\n        return \"\\\\frac{1}{\" + this.asDivide().tex() + \"}\";\n      } else if (this.isRoot()) {\n        if (this.exp.n !== 1) {\n          error(\"Node marked with hint 'root' does not have exponent \" + \"of form 1/x.\");\n        }\n\n        if (this.exp.d === 2) {\n          // e.g. x ^ 1/2 w/hint -> sqrt{x}\n          return \"\\\\sqrt{\" + this.base.tex() + \"}\";\n        } else {\n          // e.g. x ^ 1/y w/hint -> sqrt[y]{x}\n          return \"\\\\sqrt[\" + this.exp.d + \"]{\" + this.base.tex() + \"}\";\n        }\n      } else if (this.base instanceof Trig && !this.base.isInverse() && this.exp instanceof Num && this.exp.isSimple() && this.exp.eval() >= 0) {\n        // e.g sin(x) ^ 2 -> sin^2(x)\n        var split = this.base.tex({\n          split: true\n        });\n        return split[0] + \"^{\" + this.exp.tex() + \"}\" + split[1];\n      } else {\n        // e.g. x ^ y -> x^y\n        var base = this.base.tex();\n\n        if (this.base instanceof Seq || this.base instanceof Pow || this.base instanceof Num && !this.base.isSimple()) {\n          // e.g. a+b ^ c -> (a+b)^c\n          base = \"(\" + base + \")\";\n        } else if (this.base instanceof Trig || this.base instanceof Log) {\n          // e.g. ln(x) ^ 2 -> [ln(x)]^2\n          base = \"[\" + base + \"]\";\n        }\n\n        return base + \"^{\" + this.exp.tex() + \"}\";\n      }\n    },\n    needsExplicitMul: function () {\n      return this.isRoot() ? false : this.base.needsExplicitMul();\n    },\n    expand: function () {\n      var pow = this.recurse(\"expand\");\n\n      if (pow.base instanceof Mul) {\n        // e.g. (ab)^c -> a^c*b^c\n        var terms = _.map(pow.base.terms, function (term) {\n          return new Pow(term, pow.exp);\n        });\n\n        return new Mul(terms).expand();\n      } else if (pow.base instanceof Add && pow.exp instanceof Int && pow.exp.abs().eval() > 1) {\n        // e.g. (a+b)^2 -> a*a+a*b+a*b+b*b\n        // e.g. (a+b)^-2 -> (a*a+a*b+a*b+b*b)^-1\n        var positive = pow.exp.eval() > 0;\n        var n = pow.exp.abs().eval();\n\n        var signed = function (mul) {\n          return positive ? mul : new Pow(mul, Num.Div);\n        }; // compute and cache powers of 2 up to n\n\n\n        var cache = {\n          1: pow.base\n        };\n\n        for (var i = 2; i <= n; i *= 2) {\n          var mul = new Mul(cache[i / 2], cache[i / 2]);\n          cache[i] = mul.expand().collect();\n        } // if n is a power of 2, you're done!\n\n\n        if (_.has(cache, n)) {\n          return signed(cache[n]);\n        } // otherwise decompose n into powers of 2 ...\n\n\n        var indices = _.map(n.toString(2).split(\"\"), function (str, i, list) {\n          return Number(str) * Math.pow(2, list.length - i - 1);\n        });\n\n        indices = _.without(indices, 0); // ... then combine\n\n        var mul = new Mul(_.pick(cache, indices)).expand().collect();\n        return signed(mul);\n      } else if (pow.exp instanceof Add) {\n        // DEFINITELY want behind super-simplify() flag\n        // e.g. x^(a+b) -> x^a*x^b\n        var terms = _.map(pow.exp.terms, function (term) {\n          return new Pow(pow.base, term).expand();\n        });\n\n        return new Mul(terms).expand();\n      } else {\n        return pow;\n      }\n    },\n    factor: function () {\n      var pow = this.recurse(\"factor\");\n\n      if (pow.base instanceof Mul) {\n        var terms = _.map(pow.base.terms, function (term) {\n          if (term instanceof Int && pow.exp.equals(Num.Div)) {\n            // Anything that can be a Rational should be a Rational\n            // e.g. 2^(-1) -> 1/2\n            return new Rational(1, term.n);\n          } else {\n            return new Pow(term, pow.exp);\n          }\n        });\n\n        return new Mul(terms);\n      } else {\n        return pow;\n      }\n    },\n    collect: function (options) {\n      if (this.base instanceof Pow) {\n        // collect this first to avoid having to deal with float precision\n        // e.g. sqrt(2)^2 -> 2, not 2.0000000000000004\n        // e.g. (x^y)^z -> x^(yz)\n        var base = this.base.base;\n        var exp = Mul.createOrAppend(this.base.exp, this.exp);\n        return new Pow(base, exp).collect(options);\n      }\n\n      var pow = this.recurse(\"collect\", options);\n\n      var isSimilarLog = function (term) {\n        return term instanceof Log && term.base.equals(pow.base);\n      };\n\n      if (pow.exp instanceof Num && pow.exp.eval() === 0) {\n        // e.g. x^0 -> 1\n        return Num.One;\n      } else if (pow.exp instanceof Num && pow.exp.eval() === 1) {\n        // e.g. x^1 -> x\n        return pow.base;\n      } else if (isSimilarLog(pow.exp)) {\n        // e.g. b^(log_b(x)) -> x\n        return pow.exp.power;\n      } else if (pow.exp instanceof Mul && _.any(pow.exp.terms, isSimilarLog)) {\n        // e.g. b^(2*y*log_b(x)) -> x^(2*y)\n        var log = _.find(pow.exp.terms, isSimilarLog);\n\n        var base = log.power;\n        var exp = pow.exp.remove(log).flatten();\n        return new Pow(base, exp).collect(options);\n      } else if (pow.base instanceof Num && pow.exp instanceof Num) {\n        // TODO(alex): Consider encapsualting this logic (and similar logic\n        // elsewhere) into a separate Decimal class for user-entered floats\n        if (options && options.preciseFloats) {\n          // Avoid creating an imprecise float\n          // e.g. 23^1.5 -> 12167^0.5, not ~110.304\n          // If you take the root as specified by the denominator and\n          // end up with more digits after the decimal point,\n          // the result is imprecise. This works for rationals as well\n          // as floats, but ideally rationals should be pre-processed\n          // e.g. (1/27)^(1/3) -> 1/3 to avoid most cases.\n          // TODO(alex): Catch such cases and avoid converting to floats.\n          var exp = pow.exp.asRational();\n          var decimalsInBase = pow.base.getDecimalPlaces();\n          var root = new Pow(pow.base, new Rational(1, exp.d));\n          var decimalsInRoot = root.collect().getDecimalPlaces();\n\n          if (decimalsInRoot > decimalsInBase) {\n            // Collecting over this denominator would result in an\n            // imprecise float, so avoid doing so.\n            var newBase = new Pow(pow.base, new Int(exp.n)).collect();\n            return new Pow(newBase, new Rational(1, exp.d));\n          }\n        } // e.g. 4^1.5 -> 8\n\n\n        return pow.base.raiseToThe(pow.exp, options);\n      } else {\n        return pow;\n      }\n    },\n    // checks whether this Pow represents user-entered division\n    isDivide: function () {\n      var isDiv = function (arg) {\n        return arg instanceof Num && arg.hints.divide;\n      };\n\n      return isDiv(this.exp) || this.exp instanceof Mul && _.any(this.exp.terms, isDiv);\n    },\n    // assuming this Pow represents user-entered division, returns the denominator\n    asDivide: function () {\n      if (this.exp instanceof Num) {\n        if (this.exp.eval() === -1) {\n          return this.base;\n        } else {\n          var negated = this.exp.negate();\n          negated.hints = _.clone(this.exp.hints);\n          negated.hints.divide = false;\n          return new Pow(this.base, negated);\n        }\n      } else if (this.exp instanceof Mul) {\n        return new Pow(this.base, this.exp.factorOut());\n      } else {\n        error(\"called asDivide() on an Expr that wasn't a Num or Mul\");\n      }\n    },\n    isRoot: function () {\n      return this.exp instanceof Rational && this.exp.hints.root;\n    },\n    isSquaredTrig: function () {\n      return this.base instanceof Trig && !this.base.isInverse() && this.exp instanceof Num && this.exp.eval() === 2;\n    },\n    // extract whatever denominator makes sense, ignoring hints\n    // if negative exponent, will recursively include the base's denominator as well\n    getDenominator: function () {\n      if (this.exp instanceof Num && this.exp.eval() === -1) {\n        return Mul.createOrAppend(this.base, this.base.getDenominator()).flatten();\n      } else if (this.exp.isNegative()) {\n        var pow = new Pow(this.base, Mul.handleNegative(this.exp).collect());\n        return Mul.createOrAppend(pow, pow.collect().getDenominator()).flatten();\n      } else if (this.base instanceof Num) {\n        return new Pow(this.base.getDenominator(), this.exp).collect();\n      } else {\n        return Num.One;\n      }\n    },\n    findGCD: function (factor) {\n      var base, exp;\n\n      if (factor instanceof Pow) {\n        base = factor.base;\n        exp = factor.exp;\n      } else {\n        base = factor;\n        exp = Num.One;\n      } // GCD is only relevant if same base\n\n\n      if (this.base.equals(base)) {\n        if (this.exp.equals(exp)) {\n          // exact match\n          // e.g. GCD(x^y^z, x^y^z) -> x^y^z\n          return this;\n        } else if (this.exp instanceof Num && exp instanceof Num) {\n          // two numerical exponents\n          // e.g. GCD(x^3, x^2) -> x^2\n          return new Pow(this.base, Num.min(this.exp, exp)).collect();\n        } else if (this.exp instanceof Num || exp instanceof Num) {\n          // one numerical exponent\n          // e.g. GCD(x^2, x^y) -> 1\n          return Num.One;\n        }\n\n        var expA = this.exp.asMul().partition();\n        var expB = exp.asMul().partition();\n\n        if (expA[1].equals(expB[1])) {\n          // exponents match except for coefficient\n          // e.g. GCD(x^3y, x^y) -> x^y\n          var coefficient = Num.min(expA[0].reduce(), expB[0].reduce());\n          var mul = new Mul(coefficient, expA[1].flatten()).flatten();\n          return new Pow(base, mul).collect();\n        }\n      }\n\n      return Num.One;\n    },\n    isPositive: function () {\n      if (this.base.isPositive()) {\n        return true;\n      }\n\n      var exp = this.exp.simplify();\n      return exp instanceof Int && exp.eval() % 2 === 0;\n    },\n    asPositiveFactor: function () {\n      if (this.isPositive()) {\n        return this;\n      } else {\n        var exp = this.exp.simplify();\n\n        if (exp instanceof Int) {\n          var n = exp.eval();\n\n          if (n > 2) {\n            // e.g. x^3 -> x^2\n            return new Pow(this.base, new Int(n - 1));\n          } else if (n < -2) {\n            // e.g. x^-3 -> x^-2\n            return new Pow(this.base, new Int(n + 1));\n          }\n        }\n\n        return Num.One;\n      }\n    }\n  });\n\n  _.extend(Pow, {\n    sqrt: function (arg) {\n      return new Pow(arg, Num.Sqrt);\n    },\n    nthroot: function (radicand, degree) {\n      var exp = Mul.fold(Mul.handleDivide(new Int(1), degree)); // FIXME(johnsullivan): If oneOverDegree ends up being a pow object,\n      //     this \"root\" hint is lost between here and when tex() is called.\n\n      return new Pow(radicand, exp.addHint(\"root\"));\n    }\n  });\n  /* logarithm */\n\n\n  function Log(base, power) {\n    this.base = base;\n    this.power = power;\n  }\n\n  Log.prototype = new Expr();\n\n  _.extend(Log.prototype, {\n    func: Log,\n    args: function () {\n      return [this.base, this.power];\n    },\n    eval: function (vars, options) {\n      return Math.log(this.power.eval(vars, options)) / Math.log(this.base.eval(vars, options));\n    },\n    codegen: function () {\n      return \"(Math.log(\" + this.power.codegen() + \") / Math.log(\" + this.base.codegen() + \"))\";\n    },\n    print: function () {\n      var power = \"(\" + this.power.print() + \")\";\n\n      if (this.isNatural()) {\n        return \"ln\" + power;\n      } else {\n        return \"log_(\" + this.base.print() + \") \" + power;\n      }\n    },\n    tex: function () {\n      var power = \"(\" + this.power.tex() + \")\";\n\n      if (this.isNatural()) {\n        return \"\\\\ln\" + power;\n      } else {\n        return \"\\\\log_{\" + this.base.tex() + \"}\" + power;\n      }\n    },\n    collect: function (options) {\n      var log = this.recurse(\"collect\", options);\n\n      if (log.power instanceof Num && log.power.eval() === 1) {\n        // e.g. ln(1) -> 0\n        return Num.Zero;\n      } else if (log.base.equals(log.power)) {\n        // e.g. log_b(b) -> 1\n        return Num.One;\n      } else if (log.power instanceof Pow && log.power.base.equals(log.base)) {\n        // e.g. log_b(b^x) -> x\n        return log.power.exp;\n      } else {\n        return log;\n      }\n    },\n    expand: function () {\n      var log = this.recurse(\"expand\");\n\n      if (log.power instanceof Mul) {\n        // might want behind super-simplify() flag\n        // e.g. ln(xy) -> ln(x) + ln(y)\n        var terms = _.map(log.power.terms, function (term) {\n          // need to expand again in case new log powers are Pows\n          return new Log(log.base, term).expand();\n        });\n\n        return new Add(terms);\n      } else if (log.power instanceof Pow) {\n        // e.g. ln(x^y) -> y*ln(x)\n        return new Mul(log.power.exp, new Log(log.base, log.power.base).expand()).flatten();\n      } else if (!log.isNatural()) {\n        // e.g. log_b(x) -> ln(x)/ln(b)\n        return Mul.handleDivide(new Log(Const.e, log.power), new Log(Const.e, log.base));\n      } else {\n        return log;\n      }\n    },\n    hints: _.extend(Log.prototype.hints, {\n      open: false\n    }),\n    isPositive: function () {\n      var log = this.collect();\n\n      if (log.base instanceof Num && log.power instanceof Num) {\n        return this.eval() > 0;\n      } else {\n        return false;\n      }\n    },\n    needsExplicitMul: function () {\n      return false;\n    },\n    isNatural: function () {\n      return this.base.equals(Const.e);\n    }\n  });\n\n  _.extend(Log, {\n    natural: function () {\n      return Const.e;\n    },\n    common: function () {\n      return Num.Ten;\n    },\n    create: function (base, power) {\n      var log = new Log(base, power);\n\n      if (!power.hints.parens) {\n        log = log.addHint(\"open\");\n      }\n\n      return log;\n    }\n  });\n  /* trigonometric functions */\n\n\n  function Trig(type, arg) {\n    this.type = type;\n    this.arg = arg;\n  }\n\n  Trig.prototype = new Expr();\n\n  _.extend(Trig.prototype, {\n    func: Trig,\n    args: function () {\n      return [this.type, this.arg];\n    },\n    functions: {\n      sin: {\n        eval: Math.sin,\n        codegen: \"Math.sin((\",\n        tex: \"\\\\sin\",\n        expand: function () {\n          return this;\n        }\n      },\n      cos: {\n        eval: Math.cos,\n        codegen: \"Math.cos((\",\n        tex: \"\\\\cos\",\n        expand: function () {\n          return this;\n        }\n      },\n      tan: {\n        eval: Math.tan,\n        codegen: \"Math.tan((\",\n        tex: \"\\\\tan\",\n        expand: function () {\n          return Mul.handleDivide(Trig.sin(this.arg), Trig.cos(this.arg));\n        }\n      },\n      csc: {\n        eval: function (arg) {\n          return 1 / Math.sin(arg);\n        },\n        codegen: \"(1/Math.sin(\",\n        tex: \"\\\\csc\",\n        expand: function () {\n          return Mul.handleDivide(Num.One, Trig.sin(this.arg));\n        }\n      },\n      sec: {\n        eval: function (arg) {\n          return 1 / Math.cos(arg);\n        },\n        codegen: \"(1/Math.cos(\",\n        tex: \"\\\\sec\",\n        expand: function () {\n          return Mul.handleDivide(Num.One, Trig.cos(this.arg));\n        }\n      },\n      cot: {\n        eval: function (arg) {\n          return 1 / Math.tan(arg);\n        },\n        codegen: \"(1/Math.tan(\",\n        tex: \"\\\\cot\",\n        expand: function () {\n          return Mul.handleDivide(Trig.cos(this.arg), Trig.sin(this.arg));\n        }\n      },\n      arcsin: {\n        eval: Math.asin,\n        codegen: \"Math.asin((\",\n        tex: \"\\\\arcsin\"\n      },\n      arccos: {\n        eval: Math.acos,\n        codegen: \"Math.acos((\",\n        tex: \"\\\\arccos\"\n      },\n      arctan: {\n        eval: Math.atan,\n        codegen: \"Math.atan((\",\n        tex: \"\\\\arctan\"\n      },\n      arccsc: {\n        eval: function (arg) {\n          return Math.asin(1 / arg);\n        },\n        codegen: \"Math.asin(1/(\",\n        tex: \"\\\\operatorname{arccsc}\"\n      },\n      arcsec: {\n        eval: function (arg) {\n          return Math.acos(1 / arg);\n        },\n        codegen: \"Math.acos(1/(\",\n        tex: \"\\\\operatorname{arcsec}\"\n      },\n      arccot: {\n        eval: function (arg) {\n          return Math.atan(1 / arg);\n        },\n        codegen: \"Math.atan(1/(\",\n        tex: \"\\\\operatorname{arccot}\"\n      },\n      sinh: {\n        eval: function (arg) {\n          return (Math.exp(arg) - Math.exp(-arg)) / 2;\n        },\n        codegen: function (argStr) {\n          return \"((Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \"))) / 2)\";\n        },\n        tex: \"\\\\sinh\",\n        expand: function () {\n          return this;\n        }\n      },\n      cosh: {\n        eval: function (arg) {\n          return (Math.exp(arg) + Math.exp(-arg)) / 2;\n        },\n        codegen: function (argStr) {\n          return \"((Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \"))) / 2)\";\n        },\n        tex: \"\\\\cosh\",\n        expand: function () {\n          return this;\n        }\n      },\n      tanh: {\n        eval: function (arg) {\n          return (Math.exp(arg) - Math.exp(-arg)) / (Math.exp(arg) + Math.exp(-arg));\n        },\n        codegen: function (argStr) {\n          return \"(\" + \"(Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \")))\" + \" / \" + \"(Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \")))\" + \")\";\n        },\n        tex: \"\\\\tanh\",\n        expand: function () {\n          return Mul.handleDivide(Trig.sinh(this.arg), Trig.cosh(this.arg));\n        }\n      },\n      csch: {\n        eval: function (arg) {\n          return 2 / (Math.exp(arg) - Math.exp(-arg));\n        },\n        codegen: function (argStr) {\n          return \"(2 / (Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \"))))\";\n        },\n        tex: \"\\\\csch\",\n        expand: function () {\n          return Mul.handleDivide(Num.One, Trig.sinh(this.arg));\n        }\n      },\n      sech: {\n        eval: function (arg) {\n          return 2 / (Math.exp(arg) + Math.exp(-arg));\n        },\n        codegen: function (argStr) {\n          return \"(2 / (Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \"))))\";\n        },\n        tex: \"\\\\sech\",\n        expand: function () {\n          return Mul.handleDivide(Num.One, Trig.cosh(this.arg));\n        }\n      },\n      coth: {\n        eval: function (arg) {\n          return (Math.exp(arg) + Math.exp(-arg)) / (Math.exp(arg) - Math.exp(-arg));\n        },\n        codegen: function (argStr) {\n          return \"(\" + \"(Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \")))\" + \" / \" + \"(Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \")))\" + \")\";\n        },\n        tex: \"\\\\coth\",\n        expand: function () {\n          return Mul.handleDivide(Trig.cosh(this.arg), Trig.sinh(this.arg));\n        }\n      }\n    },\n    isEven: function () {\n      return _.contains([\"cos\", \"sec\"], this.type);\n    },\n    isInverse: function () {\n      return this.type.indexOf(\"arc\") === 0;\n    },\n    isBasic: function () {\n      return _.contains([\"sin\", \"cos\"], this.type);\n    },\n    eval: function (vars, options) {\n      var func = this.functions[this.type].eval;\n      var arg = this.arg.eval(vars, options);\n      return func(arg);\n    },\n    codegen: function () {\n      var func = this.functions[this.type].codegen;\n\n      if (typeof func === \"function\") {\n        return func(this.arg.codegen());\n      } else if (typeof func === \"string\") {\n        return func + this.arg.codegen() + \"))\";\n      } else {\n        throw new Error(\"codegen not implemented for \" + this.type);\n      }\n    },\n    print: function () {\n      return this.type + \"(\" + this.arg.print() + \")\";\n    },\n    tex: function (options) {\n      var func = this.functions[this.type].tex;\n      var arg = \"(\" + this.arg.tex() + \")\";\n      return options && options.split ? [func, arg] : func + arg;\n    },\n    hints: _.extend(Trig.prototype.hints, {\n      open: false\n    }),\n    isPositive: function () {\n      var trig = this.collect();\n\n      if (trig.arg instanceof Num) {\n        return this.eval() > 0;\n      } else {\n        return false;\n      }\n    },\n    completeParse: function () {\n      if (this.exp) {\n        var pow = new Pow(this, this.exp);\n        this.exp = undefined;\n        return pow;\n      } else {\n        return this;\n      }\n    },\n    // TODO(alex): does every new node type need to redefine these?\n    needsExplicitMul: function () {\n      return false;\n    },\n    expand: function () {\n      var trig = this.recurse(\"expand\");\n\n      if (!trig.isInverse()) {\n        // e.g. tan(x) -> sin(x)/cos(x)\n        var expand = trig.functions[trig.type].expand;\n        return _.bind(expand, trig)();\n      } else {\n        return trig;\n      }\n    },\n    collect: function (options) {\n      var trig = this.recurse(\"collect\", options);\n\n      if (!trig.isInverse() && trig.arg.isNegative()) {\n        var arg;\n\n        if (trig.arg instanceof Num) {\n          arg = trig.arg.abs();\n        } else {\n          arg = Mul.handleDivide(trig.arg, Num.Neg).collect(options);\n        }\n\n        if (trig.isEven()) {\n          // e.g. cos(-x) -> cos(x)\n          return new Trig(trig.type, arg);\n        } else {\n          // e.g. sin(-x) -> -sin(x)\n          return new Mul(Num.Neg, new Trig(trig.type, arg));\n        }\n      } else {\n        return trig;\n      }\n    }\n  });\n\n  _.extend(Trig, {\n    create: function (pair, arg) {\n      var type = pair[0];\n      var exp = pair[1];\n\n      if (exp && exp.equals(Num.Neg)) {\n        // e.g. sin^-1(x) -> arcsin(x)\n        type = \"arc\" + type;\n        exp = undefined;\n      }\n\n      var trig = new Trig(type, arg);\n\n      if (!arg.hints.parens) {\n        trig = trig.addHint(\"open\");\n      }\n\n      if (exp) {\n        trig.exp = exp;\n      }\n\n      return trig;\n    },\n    sin: function (arg) {\n      return new Trig(\"sin\", arg);\n    },\n    cos: function (arg) {\n      return new Trig(\"cos\", arg);\n    },\n    sinh: function (arg) {\n      return new Trig(\"sinh\", arg);\n    },\n    cosh: function (arg) {\n      return new Trig(\"cosh\", arg);\n    }\n  });\n\n  function Abs(arg) {\n    this.arg = arg;\n  }\n\n  Abs.prototype = new Expr();\n\n  _.extend(Abs.prototype, {\n    func: Abs,\n    args: function () {\n      return [this.arg];\n    },\n    eval: function (vars, options) {\n      return Math.abs(this.arg.eval(vars, options));\n    },\n    codegen: function () {\n      return \"Math.abs(\" + this.arg.codegen() + \")\";\n    },\n    print: function () {\n      return \"abs(\" + this.arg.print() + \")\";\n    },\n    tex: function () {\n      return \"\\\\left|\" + this.arg.tex() + \"\\\\right|\";\n    },\n    collect: function (options) {\n      var abs = this.recurse(\"collect\", options);\n\n      if (abs.arg.isPositive()) {\n        // e.g. |2^x| -> 2^x\n        return abs.arg;\n      } else if (abs.arg instanceof Num) {\n        // e.g. |-2| -> 2\n        return abs.arg.abs();\n      } else if (abs.arg instanceof Mul) {\n        // e.g. |-2*pi*x| -> 2*pi*|x|\n        var terms = _.groupBy(abs.arg.terms, function (term) {\n          if (term.isPositive()) {\n            return \"positive\";\n          } else if (term instanceof Num) {\n            return \"number\";\n          } else {\n            return \"other\";\n          }\n        });\n\n        var positives = terms.positive.concat(_.invoke(terms.number, \"abs\"));\n\n        if (terms.other.length) {\n          positives.push(new Abs(new Mul(terms.other).flatten()));\n        }\n\n        return new Mul(positives).flatten();\n      } else {\n        return abs;\n      }\n    },\n    // this should definitely be behind a super-simplify flag\n    expand: function () {\n      var abs = this.recurse(\"expand\");\n\n      if (abs.arg instanceof Mul) {\n        // e.g. |xyz| -> |x|*|y|*|z|\n        var terms = _.map(abs.arg.terms, function (term) {\n          return new Abs(term);\n        });\n\n        return new Mul(terms);\n      } else {\n        return abs;\n      }\n    },\n    isPositive: function () {\n      return true;\n    }\n  });\n  /* equation */\n\n\n  function Eq(left, type, right) {\n    this.left = left;\n    this.type = type;\n    this.right = right;\n  }\n\n  Eq.prototype = new Expr();\n\n  _.extend(Eq.prototype, {\n    func: Eq,\n    args: function () {\n      return [this.left, this.type, this.right];\n    },\n    needsExplicitMul: function () {\n      return false;\n    },\n    print: function () {\n      return this.left.print() + this.type + this.right.print();\n    },\n    signs: {\n      \"=\": \" = \",\n      \"<\": \" < \",\n      \">\": \" > \",\n      \"<>\": \" \\\\ne \",\n      \"<=\": \" \\\\le \",\n      \">=\": \" \\\\ge \"\n    },\n    tex: function () {\n      return this.left.tex() + this.signs[this.type] + this.right.tex();\n    },\n    normalize: function () {\n      var eq = this.recurse(\"normalize\");\n\n      if (_.contains([\">\", \">=\"], eq.type)) {\n        // inequalities should have the smaller side on the left\n        return new Eq(eq.right, eq.type.replace(\">\", \"<\"), eq.left);\n      } else {\n        return eq;\n      }\n    },\n    // convert this equation to an expression set to zero\n    // the expression is normalized to a canonical form\n    // e.g. y/2=x/4 -> y/2-x/4(=0) -> 2y-x(=0)\n    // unless unfactored is specified, will then divide through\n    asExpr: function (unfactored) {\n      var isZero = function (expr) {\n        return expr instanceof Num && expr.isSimple() && expr.eval() === 0;\n      }; // first convert to a sequence of additive terms\n\n\n      var terms = [];\n\n      if (this.left instanceof Add) {\n        terms = _.clone(this.left.terms);\n      } else if (!isZero(this.left)) {\n        terms = [this.left];\n      }\n\n      if (this.right instanceof Add) {\n        terms = terms.concat(this.right.negate().terms);\n      } else if (!isZero(this.right)) {\n        terms.push(this.right.negate());\n      }\n\n      var isInequality = !this.isEquality(); // Collect over each term individually to transform simple expressions\n      // into numbers that might have denominators, taking into account\n      // float precision. We have to be very careful to not introduce any\n      // irrational floats before asExpr() returns, because by definition\n      // they do not have exact denominators...\n\n      terms = _.invoke(terms, \"collect\", {\n        preciseFloats: true\n      }); // ...and we multiply through by every denominator.\n\n      for (var i = 0; i < terms.length; i++) {\n        var denominator = terms[i].getDenominator(); // Can't multiply inequalities by non 100% positive factors\n\n        if (isInequality && !denominator.isPositive()) {\n          denominator = denominator.asPositiveFactor();\n        }\n\n        if (!denominator.equals(Num.One)) {\n          terms = _.map(terms, function (term) {\n            return Mul.createOrAppend(term, denominator).simplify({\n              once: true,\n              preciseFloats: true\n            });\n          });\n        }\n      }\n\n      var add = new Add(terms).flatten();\n      return unfactored ? add : this.divideThrough(add);\n    },\n    // divide through by every common factor in the expression\n    // e.g. 2y-4x(=0) -> y-2x(=0)\n    // TODO(alex): Make it an option to only divide by variables/expressions\n    // guaranteed to be nonzero\n    divideThrough: function (expr) {\n      var isInequality = !this.isEquality();\n      var simplified = expr.simplify({\n        once: true\n      });\n      var factored = simplified.factor({\n        keepNegative: isInequality\n      });\n\n      if (!(factored instanceof Mul)) {\n        return expr;\n      }\n\n      var terms = factored.terms;\n\n      var isAdd = function (term) {\n        return term instanceof Add;\n      };\n\n      var hasVar = function (term) {\n        return !!term.getVars().length;\n      };\n\n      var isOne = function (term) {\n        return term.equals(Num.One);\n      };\n\n      var grouped = _.groupBy(terms, isAdd);\n\n      var adds = grouped[true] || [];\n      var others = grouped[false] || [];\n\n      if (adds.length && this.isEquality()) {\n        // keep only Adds\n        // e.g. 2xy(z+1)(=0) -> z+1(=0)\n        return new Mul(adds).flatten();\n      }\n\n      var denominator = others;\n\n      if (!adds.length) {\n        // if no Adds, keep all variable terms to preserve meaning\n        // e.g. 42xyz(=0) -> xyz(=0)\n        denominator = _.reject(denominator, hasVar);\n      }\n\n      if (isInequality) {\n        // can't divide inequalities by non 100% positive factors\n        // e.g. 42x^2y(z+1)(=0) -> y(z+1)(=0)\n        denominator = _.invoke(denominator, \"asPositiveFactor\");\n      } // don't need to divide by one\n\n\n      denominator = _.reject(denominator, isOne);\n      denominator = _.map(denominator, function (term) {\n        return new Pow(term, Num.Div);\n      });\n      var dividedResult = new Mul(terms.concat(denominator)).collect(); // If the end result is the same as the original factoring,\n      // rollback the factoring and discard all intermediate steps.\n\n      if (dividedResult.equals(factored)) {\n        return simplified;\n      } else {\n        return dividedResult;\n      }\n    },\n    isEquality: function () {\n      return _.contains([\"=\", \"<>\"], this.type);\n    },\n    compare: function (other) {\n      // expression comparisons are handled by Expr.compare()\n      if (!(other instanceof Eq)) {\n        return false;\n      }\n\n      var eq1 = this.normalize();\n      var eq2 = other.normalize();\n\n      if (eq1.type !== eq2.type) {\n        return false;\n      } // need to collect to properly factor out common factors\n      // e.g x+2x=6 -> 3x=6 -> 3x-6(=0) -> x-2(=0)\n\n\n      var expr1 = eq1.divideThrough(eq1.asExpr(\n      /* unfactored */\n      true).collect());\n      var expr2 = eq2.divideThrough(eq2.asExpr(\n      /* unfactored */\n      true).collect());\n\n      if (eq1.isEquality()) {\n        // equals and not-equals can be subtracted either way\n        return expr1.compare(expr2) || expr1.compare(Mul.handleNegative(expr2));\n      } else {\n        return expr1.compare(expr2);\n      }\n    },\n    // should only be done after compare() returns true to avoid false positives\n    sameForm: function (other) {\n      var eq1 = this.normalize();\n      var eq2 = other.normalize();\n      var same = eq1.left.sameForm(eq2.left) && eq1.right.sameForm(eq2.right);\n\n      if (eq1.isEquality()) {\n        // equals and not-equals can be commutative with respect to the sign\n        return same || eq1.left.sameForm(eq2.right) && eq1.right.sameForm(eq2.left);\n      } else {\n        return same;\n      }\n    },\n    // we don't want to override collect because it would turn y=x into y-x(=0)\n    // instead, we ask if the equation was in that form, would it be simplified?\n    isSimplified: function () {\n      var expr = this.asExpr(\n      /* unfactored */\n      true);\n      var simplified = this.divideThrough(expr).simplify();\n      return expr.equals(simplified) && this.left.isSimplified() && this.right.isSimplified();\n    }\n  });\n\n  _.extend(Eq.prototype, {\n    // Assumptions: Expression is of the form a+bx, and we solve for x\n    solveLinearEquationForVariable: function (variable) {\n      var expr = this.asExpr();\n\n      if (!expr.is(Add) || expr.terms.length !== 2) {\n        throw new Error(\"Can only handle linear equations of the form \" + \"a + bx (= 0)\");\n      }\n\n      var hasVar = function (term) {\n        return term.has(Var) && _.contains(term.getVars(), variable.symbol);\n      };\n\n      var a, b;\n\n      if (hasVar(expr.terms[0])) {\n        a = Mul.handleNegative(expr.terms[1]);\n        b = Mul.handleDivide(expr.terms[0], variable);\n      } else {\n        a = Mul.handleNegative(expr.terms[0]);\n        b = Mul.handleDivide(expr.terms[1], variable);\n      }\n\n      return Mul.handleDivide(a, b).simplify();\n    }\n  });\n  /* abstract symbol node */\n\n\n  function Symbol() {}\n\n  Symbol.prototype = new Expr();\n\n  _.extend(Symbol.prototype, {\n    needsExplicitMul: function () {\n      return false;\n    },\n    findGCD: function (factor) {\n      if (factor instanceof Symbol || factor instanceof Num) {\n        return this.equals(factor) ? this : Num.One;\n      } else {\n        return factor.findGCD(this);\n      }\n    }\n  });\n  /* function variable */\n\n\n  function Func(symbol, arg) {\n    this.symbol = symbol;\n    this.arg = arg;\n  }\n\n  Func.prototype = new Symbol();\n\n  _.extend(Func.prototype, {\n    func: Func,\n    args: function () {\n      return [this.symbol, this.arg];\n    },\n    print: function () {\n      return this.symbol + \"(\" + this.arg.print() + \")\";\n    },\n    tex: function () {\n      return this.symbol + \"(\" + this.arg.tex() + \")\";\n    },\n    eval: function (vars, options) {\n      var arg = this.arg;\n      var func = vars[this.symbol];\n\n      var newVars = _.extend(_.clone(vars), {\n        x: arg.eval(vars, options)\n      });\n\n      var parsedFunc = KAS.parse(func, options);\n\n      if (parsedFunc.parsed) {\n        return parsedFunc.expr.eval(newVars, options);\n      } // If parsedFunc isn't actually parsed, return its error\n\n\n      return parsedFunc;\n    },\n    codegen: function () {\n      return 'vars[\"' + this.symbol + '\"](' + this.arg.codegen() + ')';\n    },\n    getUnits: function () {\n      return this.arg.getUnits();\n    },\n    getVars: function (excludeFunc) {\n      if (excludeFunc) {\n        return this.arg.getVars();\n      } else {\n        return _.union(this.arg.getVars(), [this.symbol]).sort();\n      }\n    },\n    getConsts: function () {\n      return this.arg.getConsts();\n    }\n  });\n  /* variable */\n\n\n  function Var(symbol, subscript) {\n    this.symbol = symbol;\n    this.subscript = subscript;\n  }\n\n  Var.prototype = new Symbol();\n\n  _.extend(Var.prototype, {\n    func: Var,\n    args: function () {\n      return [this.symbol, this.subscript];\n    },\n    exprArgs: function () {\n      return [];\n    },\n    recurse: function () {\n      return this;\n    },\n    print: function () {\n      var sub = \"\";\n\n      if (this.subscript) {\n        sub = \"_(\" + this.subscript.print() + \")\";\n      }\n\n      return this.symbol + sub;\n    },\n    // Provide a way to easily evalate expressions with the common case,\n    // subscripts that consist of a single number or symbol e.g. x_a or x_42\n    prettyPrint: function () {\n      var sub = this.subscript;\n\n      if (sub && (sub instanceof Num || sub instanceof Symbol)) {\n        return this.symbol + \"_\" + sub.print();\n      } else {\n        return this.print();\n      }\n    },\n    tex: function () {\n      var sub = \"\";\n\n      if (this.subscript) {\n        sub = \"_{\" + this.subscript.tex() + \"}\";\n      }\n\n      var prefix = this.symbol.length > 1 ? \"\\\\\" : \"\";\n      return prefix + this.symbol + sub;\n    },\n    repr: function () {\n      return \"Var(\" + this.print() + \")\";\n    },\n    eval: function (vars, options) {\n      return vars[this.prettyPrint()];\n    },\n    codegen: function () {\n      return 'vars[\"' + this.prettyPrint() + '\"]';\n    },\n    getVars: function () {\n      return [this.prettyPrint()];\n    },\n    isPositive: function () {\n      return false;\n    }\n  });\n  /* constant */\n\n\n  function Const(symbol) {\n    this.symbol = symbol;\n  }\n\n  Const.prototype = new Symbol();\n\n  _.extend(Const.prototype, {\n    func: Const,\n    args: function () {\n      return [this.symbol];\n    },\n    recurse: function () {\n      return this;\n    },\n    eval: function (vars, options) {\n      if (this.symbol === \"pi\") {\n        return Math.PI;\n      } else if (this.symbol === \"e\") {\n        return Math.E;\n      }\n    },\n    codegen: function () {\n      if (this.symbol === \"pi\") {\n        return \"Math.PI\";\n      } else if (this.symbol === \"e\") {\n        return \"Math.E\";\n      }\n    },\n    print: function () {\n      return this.symbol;\n    },\n    tex: function () {\n      if (this.symbol === \"pi\") {\n        return \"\\\\pi \";\n      } else if (this.symbol === \"e\") {\n        return \"e\";\n      }\n    },\n    isPositive: function () {\n      return this.eval() > 0;\n    },\n    abs: function () {\n      if (this.eval() > 0) {\n        return this;\n      } else {\n        return Mul.handleNegative(this);\n      }\n    },\n    getConsts: function () {\n      return [this.print()];\n    }\n  });\n\n  Const.e = new Const(\"e\");\n  Const.pi = new Const(\"pi\");\n  /* abstract number node */\n\n  function Num() {}\n\n  Num.prototype = new Expr();\n\n  _.extend(Num.prototype, {\n    repr: function () {\n      return this.print();\n    },\n    strip: function () {\n      return this.abs();\n    },\n    recurse: function () {\n      return this;\n    },\n    codegen: function () {\n      return this.print();\n    },\n    // takes another Num and returns a new Num\n    add: abstract,\n    mul: abstract,\n    // returns this Num's additive inverse\n    negate: abstract,\n    isSubtract: function () {\n      return this.hints.subtract;\n    },\n    // return the absolute value of the number\n    abs: abstract,\n    needsExplicitMul: function () {\n      return true;\n    },\n    findGCD: abstract,\n    isPositive: function () {\n      return this.eval() > 0;\n    },\n    isNegative: function () {\n      return this.eval() < 0;\n    },\n    asPositiveFactor: function () {\n      return this.isPositive() ? this : this.abs();\n    },\n    // hints for interpreting and rendering user input\n    hints: _.extend(Num.prototype.hints, {\n      negate: false,\n      subtract: false,\n      divide: false,\n      root: false,\n      fraction: false,\n      entered: false\n    }),\n    // whether a number is considered simple (one term)\n    // e.g. for reals, ints and floats are simple\n    isSimple: abstract,\n    // Based on http://stackoverflow.com/a/10454560/2571482\n    getDecimalPlaces: function () {\n      var match = (\"\" + this.n).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n\n      if (match) {\n        return Math.max(0, // Number of digits right of decimal point\n        (match[1] ? match[1].length : 0) - ( // Adjust for scientific notation\n        match[2] ? +match[2] : 0));\n      } else {\n        return 0;\n      }\n    },\n    asRational: abstract\n  });\n  /* rational number (n: numerator, d: denominator) */\n\n\n  function Rational(numerator, denominator) {\n    var n = numerator;\n    var d = denominator;\n\n    if (d < 0) {\n      n = -n;\n      d = -d;\n    }\n\n    this.n = n;\n    this.d = d;\n  }\n\n  Rational.prototype = new Num();\n\n  _.extend(Rational.prototype, {\n    func: Rational,\n    args: function () {\n      return [this.n, this.d];\n    },\n    eval: function () {\n      return this.n / this.d;\n    },\n    print: function () {\n      return this.n.toString() + \"/\" + this.d.toString();\n    },\n    tex: function () {\n      var tex = \"\\\\frac{\" + Math.abs(this.n).toString() + \"}{\" + this.d.toString() + \"}\";\n      return this.n < 0 ? \"-\" + tex : tex;\n    },\n    add: function (num, options) {\n      if (num instanceof Rational) {\n        return new Rational(this.n * num.d + this.d * num.n, this.d * num.d).collect();\n      } else {\n        return num.add(this, options);\n      }\n    },\n    mul: function (num, options) {\n      if (num instanceof Rational) {\n        return new Rational(this.n * num.n, this.d * num.d).collect();\n      } else {\n        return num.mul(this, options);\n      }\n    },\n    collect: function () {\n      var gcd = Num.findGCD(this.n, this.d);\n      var n = this.n / gcd;\n      var d = this.d / gcd;\n\n      if (d === 1) {\n        return new Int(n);\n      } else {\n        return new Rational(n, d);\n      }\n    },\n    negate: function () {\n      return new Rational(-this.n, this.d);\n    },\n    abs: function () {\n      return new Rational(Math.abs(this.n), this.d);\n    },\n    findGCD: function (factor) {\n      // Attempt to factor out common numerators and denominators to return\n      // a Rational instead of a Float\n      if (factor instanceof Rational) {\n        // For more background, see\n        // http://math.stackexchange.com/questions/151081/gcd-of-rationals\n        var numerator = Num.findGCD(this.n * factor.d, factor.n * this.d);\n        var denominator = this.d * factor.d; // Create the rational, then call .collect() to simplify it\n\n        return new Rational(numerator, denominator).collect();\n      } else if (factor instanceof Int) {\n        return new Rational(Num.findGCD(this.n, factor.n), this.d);\n      } else {\n        return factor.findGCD(this);\n      }\n    },\n    // for now, assuming that exp is a Num\n    raiseToThe: function (exp) {\n      if (exp instanceof Int) {\n        var positive = exp.eval() > 0;\n        var abs = exp.abs().eval();\n        var n = Math.pow(this.n, abs);\n        var d = Math.pow(this.d, abs);\n\n        if (positive) {\n          return new Rational(n, d).collect();\n        } else {\n          return new Rational(d, n).collect();\n        }\n      } else {\n        return new Float(this.eval()).raiseToThe(exp);\n      }\n    },\n    getDenominator: function () {\n      return new Int(this.d);\n    },\n    isSimple: function () {\n      return false;\n    },\n    asRational: function () {\n      return this;\n    }\n  });\n  /* integer (n: numerator/number) */\n\n\n  function Int(number) {\n    this.n = number;\n  }\n\n  Int.prototype = new Rational(0, 1);\n\n  _.extend(Int.prototype, {\n    func: Int,\n    args: function () {\n      return [this.n];\n    },\n    print: function () {\n      return this.n.toString();\n    },\n    tex: function () {\n      return this.n.toString();\n    },\n    negate: function () {\n      return new Int(-this.n);\n    },\n    abs: function () {\n      return new Int(Math.abs(this.n));\n    },\n    isSimple: function () {\n      return true;\n    },\n    findGCD: function (factor) {\n      if (factor instanceof Int) {\n        return new Int(Num.findGCD(this.n, factor.n));\n      } else {\n        return factor.findGCD(this);\n      }\n    }\n  });\n\n  _.extend(Int, {\n    create: function (n) {\n      return new Int(n).addHint(\"entered\");\n    }\n  });\n  /* float (n: number) */\n\n\n  function Float(number) {\n    this.n = number;\n  }\n\n  Float.prototype = new Num();\n\n  _.extend(Float.prototype, {\n    func: Float,\n    args: function () {\n      return [this.n];\n    },\n    eval: function () {\n      return this.n;\n    },\n    // TODO(alex): when we internationalize number parsing/display\n    // we should make sure to use the appropriate decimal mark here\n    print: function () {\n      return this.n.toString();\n    },\n    tex: function () {\n      return this.n.toString();\n    },\n    add: function (num, options) {\n      if (options && options.preciseFloats) {\n        return Float.toDecimalPlaces(this.n + num.eval(), Math.max(this.getDecimalPlaces(), num.getDecimalPlaces()));\n      } else {\n        return new Float(this.n + num.eval()).collect();\n      }\n    },\n    mul: function (num, options) {\n      if (options && options.preciseFloats) {\n        return Float.toDecimalPlaces(this.n * num.eval(), this.getDecimalPlaces() + num.getDecimalPlaces());\n      } else {\n        return new Float(this.n * num.eval()).collect();\n      }\n    },\n    collect: function () {\n      // We used to simplify Floats to Ints here whenever possible, but no\n      // longer do so in order to preserve significant figures.\n      return this;\n    },\n    negate: function () {\n      return new Float(-this.n);\n    },\n    abs: function () {\n      return new Float(Math.abs(this.n));\n    },\n    findGCD: function (factor) {\n      if (factor instanceof Num) {\n        return new Float(Num.findGCD(this.eval(), factor.eval())).collect();\n      } else {\n        return factor.findGCD(this);\n      }\n    },\n    // for now, assuming that exp is a Num\n    raiseToThe: function (exp, options) {\n      if (options && options.preciseFloats && exp instanceof Int && exp.n > 1) {\n        return Float.toDecimalPlaces(new Pow(this, exp).eval(), this.getDecimalPlaces() * exp.n);\n      } else {\n        return new Float(new Pow(this, exp).eval()).collect();\n      }\n    },\n    // only to be used on non-repeating decimals (e.g. user-provided)\n    asRational: function () {\n      var parts = this.n.toString().split(\".\");\n\n      if (parts.length === 1) {\n        return new Rational(this.n, 1);\n      } else {\n        var numerator = Number(parts.join(\"\"));\n        var denominator = Math.pow(10, parts[1].length);\n        return new Rational(numerator, denominator).collect();\n      }\n    },\n    getDenominator: function () {\n      return this.asRational().getDenominator();\n    },\n    isSimple: function () {\n      return true;\n    }\n  });\n\n  _.extend(Float, {\n    create: function (n) {\n      return new Float(n).addHint(\"entered\");\n    },\n    // Account for floating point imprecision by explicitly controlling the\n    // number of decimal places in common operations (e.g. +, *, ^)\n    toDecimalPlaces: function (n, places) {\n      return new Float(+n.toFixed(Math.min(places, 20))).collect();\n    }\n  }); // static methods and fields that are best defined on Num\n\n\n  _.extend(Num, {\n    negativeOne: function (hint) {\n      if (hint === \"subtract\") {\n        return Num.Sub;\n      } else if (hint === \"divide\") {\n        return Num.Div;\n      } else {\n        return Num.Neg;\n      }\n    },\n    // find the greatest common denominator\n    findGCD: function (a, b) {\n      var mod;\n      a = Math.abs(a);\n      b = Math.abs(b); // Euclid's method doesn't handle non-integers very well. For now\n      // we just say we can't pull out a common factor. It might be\n      // reasonable to do better than this in the future.\n\n      if (a !== Math.floor(a) || b !== Math.floor(b)) {\n        return 1;\n      }\n\n      while (b) {\n        mod = a % b;\n        a = b;\n        b = mod;\n      }\n\n      return a;\n    },\n    min: function () {\n      return _.min(_.toArray(arguments), function (num) {\n        return num.eval();\n      });\n    },\n    max: function () {\n      return _.max(_.toArray(arguments), function (num) {\n        return num.eval();\n      });\n    }\n  });\n\n  Num.Neg = new Int(-1).addHint(\"negate\");\n  Num.Sub = new Int(-1).addHint(\"subtract\");\n  Num.Div = new Int(-1).addHint(\"divide\");\n  Num.Sqrt = new Rational(1, 2).addHint(\"root\");\n  Num.Zero = new Int(0);\n  Num.One = new Int(1);\n  Num.Ten = new Int(10); // set identities here\n\n  Add.prototype.identity = Num.Zero;\n  Mul.prototype.identity = Num.One;\n  var parser = KAS.parser;\n\n  var parseError = function (str, hash) {\n    // return int location of parsing error\n    throw new Error(hash.loc.first_column);\n  }; // expose concrete nodes to parser scope\n  // see http://zaach.github.io/jison/docs/#sharing-scope\n\n\n  parser.yy = {\n    Add: Add,\n    Mul: Mul,\n    Pow: Pow,\n    Log: Log,\n    Trig: Trig,\n    Eq: Eq,\n    Abs: Abs,\n    Func: Func,\n    Const: Const,\n    Var: Var,\n    Int: Int,\n    Float: Float,\n    parseError: parseError,\n    constants: [\"e\"],\n    symbolLexer: function (symbol) {\n      if (_.contains(parser.yy.constants, symbol)) {\n        return \"CONST\";\n      } else if (_.contains(parser.yy.functions, symbol)) {\n        return \"FUNC\";\n      } else {\n        return \"VAR\";\n      }\n    }\n  };\n\n  KAS.parse = function (input, options) {\n    try {\n      if (options && options.functions) {\n        // reserve the symbol \"i\" for complex numbers\n        parser.yy.functions = _.without(options.functions, \"i\");\n      } else {\n        parser.yy.functions = [];\n      } // If ',' is the decimal dividor in your country, replace any ','s\n      // with '.'s.\n      // This isn't perfect, since the output will all still have '.'s.\n      // TODO(jack): Fix the output to have ','s in this case\n\n\n      if (options && options.decimal_separator) {\n        input = input.split(options.decimal_separator).join(\".\");\n      }\n\n      var expr = parser.parse(input).completeParse();\n      return {\n        parsed: true,\n        expr: expr\n      };\n    } catch (e) {\n      return {\n        parsed: false,\n        error: e.message\n      };\n    }\n  };\n  /* unit */\n\n\n  function Unit(symbol) {\n    this.symbol = symbol;\n  }\n\n  Unit.prototype = new Symbol(); // If possible, replace unit prefixes with a multiplication.\n  //\n  // \"g\" -> Unit(\"g\")\n  // \"kg\" -> 1000 * Unit(\"g\")\n\n  var unprefixify = function (symbol) {\n    if (_(baseUnits).has(symbol) || _(derivedUnits).has(symbol)) {\n      return new Unit(symbol);\n    } // check for prefix\n\n\n    var prefix = _(_(siPrefixes).keys()).find(function (testPrefix) {\n      return new RegExp(\"^\" + testPrefix).test(symbol);\n    });\n\n    if (prefix) {\n      var base = symbol.replace(new RegExp(\"^\" + prefix), \"\"); // It's okay to be here if either:\n      // * `base` is a base unit (the seven units listed in baseUnits)\n      // * `base` is a derived unit which allows prefixes\n      //\n      // Otherwise, we're trying to parse a unit label which is not\n      // allowed (mwk, mBTU, etc).\n\n      if (_(baseUnits).has(base) || derivedUnits[base] && derivedUnits[base].prefixes === hasPrefixes) {\n        return new Mul(siPrefixes[prefix], new Unit(base));\n      } else {\n        throw new Error(base + \" does not allow prefixes\");\n      }\n    } else {\n      return new Unit(symbol);\n    }\n  };\n\n  KAS.unitParse = function (input) {\n    try {\n      var parseResult = KAS.unitParser.parse(input); // parseResult looks like:\n      // {\n      //   magnitude: \"5\",\n      //   unit: {\n      //     num: [\n      //       { name: \"s\", pow: 2 }\n      //     ],\n      //     denom: [\n      //       { name: \"kg\", pow: 1 }\n      //     ]\n      //   }\n      // }\n      //\n      // denom is optionally null\n\n      var unitArray = [];\n\n      _(parseResult.unit.num).each(function (unitSpec) {\n        unitArray.push(new Pow(unprefixify(unitSpec.name), new Int(unitSpec.pow)));\n      });\n\n      _(parseResult.unit.denom).each(function (unitSpec) {\n        unitArray.push(new Pow(unprefixify(unitSpec.name), new Int(-1 * unitSpec.pow)));\n      });\n\n      var unit = new Mul(unitArray).flatten();\n\n      if (parseResult.type === \"unitMagnitude\") {\n        // in the first case we have a magnitude coefficient as well as the\n        // unit itself.\n        var coefArray = [new Float(+parseResult.magnitude)].concat(unitArray);\n        var expr = new Mul(coefArray);\n        return {\n          parsed: true,\n          unit: unit,\n          expr: expr,\n          coefficient: parseResult.magnitude,\n          type: parseResult.type\n        };\n      } else {\n        // in the second case it's just the unit with no magnitude.\n        return {\n          parsed: true,\n          unit: unit,\n          type: parseResult.type\n        };\n      }\n    } catch (e) {\n      return {\n        parsed: false,\n        error: e.message\n      };\n    }\n  };\n\n  _.extend(Unit.prototype, {\n    func: Unit,\n    args: function () {\n      return [this.symbol];\n    },\n    recurse: function () {\n      return this;\n    },\n    eval: function (vars, options) {\n      // This is called when comparing units. A unit doesn't affect the\n      // numerical value of its coefficient, so this needs to be 1.\n      //\n      // On the other hand, things must not evaluate to the same thing if\n      // they don't have the same type. I believe that's also true - form is\n      // checked before numerical equivalence. I do not know where, though.\n      // However, there are a couple tests checking this.\n      return 1;\n    },\n    getUnits: function () {\n      return [{\n        unit: this.symbol,\n        pow: 1\n      }];\n    },\n    codegen: function () {\n      return \"1\";\n    },\n    print: function () {\n      return this.symbol;\n    },\n    tex: function () {\n      return this.symbol;\n    },\n    // Simplify units by replacing prefixes with multiplication\n    collect: function (options) {\n      if (_(baseUnits).has(this.symbol)) {\n        return this;\n      } else if (_(derivedUnits).has(this.symbol)) {\n        return derivedUnits[this.symbol].conversion;\n      } else {\n        throw new Error(\"could not understand unit: \" + this.symbol);\n      }\n    }\n  });\n\n  var baseUnits = {\n    m: new Unit(\"m\"),\n    // Note: kg is the SI base unit but we use g for consistency\n    g: new Unit(\"g\"),\n    s: new Unit(\"s\"),\n    A: new Unit(\"A\"),\n    K: new Unit(\"K\"),\n    mol: new Unit(\"mol\"),\n    cd: new Unit(\"cd\")\n  };\n  var siPrefixes = {\n    a: new Pow(new Int(10), new Int(-18)),\n    f: new Pow(new Int(10), new Int(-15)),\n    p: new Pow(new Int(10), new Int(-12)),\n    n: new Pow(new Int(10), new Int(-9)),\n    u: new Pow(new Int(10), new Int(-6)),\n    m: new Pow(new Int(10), new Int(-3)),\n    c: new Pow(new Int(10), new Int(-2)),\n    d: new Pow(new Int(10), new Int(-1)),\n    da: new Int(10),\n    h: new Pow(new Int(10), new Int(2)),\n    k: new Pow(new Int(10), new Int(3)),\n    M: new Pow(new Int(10), new Int(6)),\n    G: new Pow(new Int(10), new Int(9)),\n    T: new Pow(new Int(10), new Int(12)),\n    P: new Pow(new Int(10), new Int(15)),\n    E: new Pow(new Int(10), new Int(18)),\n    // http://en.wikipedia.org/wiki/Metric_prefix#.22Hella.22_prefix_proposal\n    hella: new Pow(new Int(10), new Int(27))\n  }; // Use these two values to mark a unit as either SI-prefixable or not.\n\n  var hasPrefixes = {};\n  var hasntPrefixes = {};\n\n  var makeAlias = function (str, prefixes) {\n    var splits = str.split(\"|\");\n    var coefficientStr = splits[0].trim();\n    var unitsStr = splits[1].trim();\n    var coefficient = Num.One;\n\n    if (coefficientStr !== \"\") {\n      coefficient = KAS.parse(coefficientStr).expr;\n    }\n\n    var numdenomStr = unitsStr.split(\"/\");\n    var numdenom = [coefficient];\n\n    if (numdenomStr[0]) {\n      numdenomStr[0].split(\" \").filter(function (x) {\n        return x !== \"\";\n      }).map(function (x) {\n        numdenom.push(new Unit(x));\n      });\n    }\n\n    if (numdenomStr[1]) {\n      numdenomStr[1].split(\" \").filter(function (x) {\n        return x !== \"\";\n      }).map(function (x) {\n        numdenom.push(new Pow(new Unit(x), Num.Div));\n      });\n    }\n\n    return {\n      conversion: new Mul(numdenom),\n      prefixes: prefixes\n    };\n  }; // This is a mapping of derived units (or different names for a unit) to their\n  // definitions. For example, an inch is defined as 0.0254 m.\n  //\n  // Definitions don't need to be in terms of base units. For example, tsp is\n  // defined in terms of tbsp (which is defined in terms of cup -> gal -> L ->\n  // m^3). However, units must get simpler. I.e. there's no loop checking.\n  //\n  // makeAlias takes two parameters:\n  // * a string specifying the simplification to perform\n  //   - a required pipe separates the constant factor from the base units\n  //   - the constant factor is parsed by KAS\n  //   - the base units are in a simple format which disallows exponents and\n  //     requires multiplicands to be space-separated (\"m m\" rather than \"m^2)\n  //     with an optional \"/\" separating numerator and denominator\n  //   - prefixes are not allowed to be used in the converted to units\n  //     (note that this restriction, the format of the string, and the choice to\n  //     use a string in the first place are made out of laziness to minimize\n  //     both typing and parsing)\n  // * a boolean specifying whether or not it's acceptable to use SI units\n  //\n  // Where possible, these units are taken from \"The International System of\n  // Units (SI)\" 8th edition (2006).\n\n\n  var derivedUnits = {\n    // mass\n    // The atomic mass unit / dalton.\n    Da: makeAlias(\"1.6605388628 x 10^-24 | g\", hasPrefixes),\n    u: makeAlias(\"| Da\", hasntPrefixes),\n    // length\n    \"meter\": makeAlias(\"| m\", hasntPrefixes),\n    \"meters\": makeAlias(\"| m\", hasntPrefixes),\n    \"in\": makeAlias(\"254 / 10000 | m\", hasntPrefixes),\n    \"ft\": makeAlias(\"3048  / 10000 | m\", hasntPrefixes),\n    \"yd\": makeAlias(\"9144  / 10000 | m\", hasntPrefixes),\n    \"mi\": makeAlias(\"1609344 / 1000 | m\", hasntPrefixes),\n    \"ly\": makeAlias(\"9.4607 x 10^15 | m\", hasntPrefixes),\n    \"nmi\": makeAlias(\"1852 | m\", hasntPrefixes),\n    \"Å\": makeAlias(\"10^-10 | m\", hasntPrefixes),\n    \"pc\": makeAlias(\"3.0857 x 10^16 | m\", hasntPrefixes),\n    // time\n    \"min\": makeAlias(\"60 | s\", hasntPrefixes),\n    \"hr\": makeAlias(\"3600 | s\", hasntPrefixes),\n    \"sec\": makeAlias(\"| s\", hasntPrefixes),\n    // TODO(joel) make day work\n    \"day\": makeAlias(\"86400 | s\", hasntPrefixes),\n    \"wk\": makeAlias(\"604800 | s\", hasntPrefixes),\n    \"fortnight\": makeAlias(\"14 | day\", hasntPrefixes),\n    \"shake\": makeAlias(\"10^-8 | s\", hasntPrefixes),\n    \"olympiad\": makeAlias(\"126200000 | s\", hasntPrefixes),\n    // temperature\n    \"°C\": makeAlias(\"1 | K\", hasntPrefixes),\n    \"°F\": makeAlias(\"5/9 | K\", hasntPrefixes),\n    \"°R\": makeAlias(\"5/9 | K\", hasntPrefixes),\n    // electric charge\n    \"e\": makeAlias(\"1.6021765314 x 10^-19 | C\", hasntPrefixes),\n    // speed\n    \"c\": makeAlias(\"299792458 | m / s\", hasntPrefixes),\n    \"kn\": makeAlias(\"514/1000 | m / s\", hasntPrefixes),\n    \"kt\": makeAlias(\"| kn\", hasntPrefixes),\n    \"knot\": makeAlias(\"| kn\", hasntPrefixes),\n    // energy\n    \"J\": makeAlias(\"| N m\", hasPrefixes),\n    \"BTU\": makeAlias(\"1060 | J\", hasntPrefixes),\n    \"cal\": makeAlias(\"4184 / 1000 | J\", hasPrefixes),\n    \"eV\": makeAlias(\"1.602176514 x 10^-19 | J\", hasPrefixes),\n    \"erg\": makeAlias(\"10^−7 | J\", hasPrefixes),\n    // power\n    \"W\": makeAlias(\"| J / s\", hasPrefixes),\n    \"H-e\": makeAlias(\"80 | W\", hasntPrefixes),\n    // force\n    \"N\": makeAlias(\"1000 | g m / s s\", hasPrefixes),\n    // \"lb\": makeAlias(\"4448 / 1000 | N\", hasntPrefixes),\n    // 4.4482216152605\n    \"lb\": makeAlias(\"4448221615 / 1000000000 | N\", hasntPrefixes),\n    \"dyn\": makeAlias(\"10^-5 | N\", hasntPrefixes),\n    // pressure\n    \"Pa\": makeAlias(\"1 | N / m m m\", hasPrefixes),\n    \"bar\": makeAlias(\"10^5 | Pa\", hasPrefixes),\n    \"㏔\": makeAlias(\"1/1000 | bar\", hasntPrefixes),\n    \"㍴\": makeAlias(\"| bar\", hasntPrefixes),\n    \"atm\": makeAlias(\"101325 | Pa\", hasntPrefixes),\n    \"Torr\": makeAlias(\"1/760 | atm\", hasntPrefixes),\n    \"mmHg\": makeAlias(\"| Torr\", hasntPrefixes),\n    // area\n    \"ha\": makeAlias(\"10^4 | m m\", hasntPrefixes),\n    \"b\": makeAlias(\"10^−28 | m m\", hasPrefixes),\n    \"barn\": makeAlias(\"| b\", hasPrefixes),\n    \"acre\": makeAlias(\"4046.87 | m m\", hasntPrefixes),\n    \"skilodge\": makeAlias(\"10^-31 | m m\", hasntPrefixes),\n    \"outhouse\": makeAlias(\"10^-34 | m m\", hasntPrefixes),\n    \"shed\": makeAlias(\"10^-52 | m m\", hasntPrefixes),\n    // volume\n    \"L\": makeAlias(\"1/1000 | m m m\", hasPrefixes),\n    \"gal\": makeAlias(\"3785/1000 | L\", hasPrefixes),\n    \"cup\": makeAlias(\"1/16 | gal\", hasntPrefixes),\n    \"qt\": makeAlias(\"1/4 | gal\", hasntPrefixes),\n    \"quart\": makeAlias(\"| qt\", hasntPrefixes),\n    \"p\": makeAlias(\"1/8 | gal\", hasntPrefixes),\n    \"pt\": makeAlias(\"| p\", hasntPrefixes),\n    \"pint\": makeAlias(\"| p\", hasntPrefixes),\n    \"fl oz\": makeAlias(\"1/8 | cup\", hasntPrefixes),\n    \"fl. oz.\": makeAlias(\"1/8 | cup\", hasntPrefixes),\n    \"tbsp\": makeAlias(\"1/16 | cup\", hasntPrefixes),\n    \"tsp\": makeAlias(\"1/3 | tbsp\", hasntPrefixes),\n    // rotational\n    // \"rad\":\n    \"rev\": makeAlias(\"2 pi | rad\", hasntPrefixes),\n    \"deg\": makeAlias(\"180 pi | rad\", hasntPrefixes),\n    \"°\": makeAlias(\"| deg\", hasntPrefixes),\n    \"arcminute\": makeAlias(\"1/60 | deg\", hasntPrefixes),\n    \"arcsec\": makeAlias(\"1/3600 | deg\", hasntPrefixes),\n    // dimensionless\n    // \"B\": makeAlias(\"10 | dB\", hasntPrefixes), // XXX danger - logarithmic\n    // \"dB\"\n    // \"nP\"\n    \"Hu\": makeAlias(\"1000 | dB\", hasPrefixes),\n    \"dozen\": makeAlias(\"12 |\", hasntPrefixes),\n    // XXX\n    \"mol\": makeAlias(\"6.0221412927 x 10^23 |\", hasPrefixes),\n    \"%\": makeAlias(\"1/100 |\", hasntPrefixes),\n    \"percent\": makeAlias(\"| %\", hasntPrefixes),\n    \"ppm\": makeAlias(\"1/1000000 |\", hasntPrefixes),\n    // electric / magnetic\n    \"V\": makeAlias(\"1000 | g m m / s s C\", hasPrefixes),\n    \"C\": makeAlias(\"| A s\", hasPrefixes),\n    \"ampere\": makeAlias(\"| A\", hasntPrefixes),\n    \"Ω\": makeAlias(\"| V / A\", hasPrefixes),\n    \"ohm\": makeAlias(\"| Ω\", hasntPrefixes),\n    \"F\": makeAlias(\"| C / V\", hasPrefixes),\n    \"H\": makeAlias(\"| ohm s\", hasPrefixes),\n    \"T\": makeAlias(\"1000 | g / C s\", hasPrefixes),\n    \"Wb\": makeAlias(\"1000 | g m m / C s\", hasPrefixes),\n    // photometry\n    // TODO not sure this is right\n    \"lm\": makeAlias(\"pi x 10^4 | cd / m m\", hasntPrefixes),\n    \"lx\": makeAlias(\"| lm / m m\", hasntPrefixes),\n    \"nit\": makeAlias(\"| cd / m m\", hasntPrefixes),\n    \"sb\": makeAlias(\"10^4 | cd / m m\", hasntPrefixes),\n    \"stilb\": makeAlias(\"1 | sb\", hasntPrefixes),\n    \"apostilb\": makeAlias(\"1 / pi x 10^(-4) | sb\", hasntPrefixes),\n    \"blondel\": makeAlias(\"| apostilb\", hasntPrefixes),\n    \"asb\": makeAlias(\"| apostilb\", hasntPrefixes),\n    \"la\": makeAlias(\"| lm\", hasntPrefixes),\n    \"Lb\": makeAlias(\"| lm\", hasntPrefixes),\n    \"sk\": makeAlias(\"10^-7 | lm\", hasntPrefixes),\n    \"skot\": makeAlias(\"| sk\", hasntPrefixes),\n    \"bril\": makeAlias(\"10^-11 | lm\", hasntPrefixes),\n    // other\n    \"Hz\": makeAlias(\"| / s\", hasPrefixes)\n  };\n  KAS.Add = Add;\n  KAS.Mul = Mul;\n  KAS.Pow = Pow;\n  KAS.Log = Log;\n  KAS.Eq = Eq;\n  KAS.Trig = Trig;\n  KAS.Abs = Abs;\n  KAS.Func = Func;\n  KAS.Var = Var;\n  KAS.Const = Const;\n  KAS.Unit = Unit;\n  KAS.Rational = Rational;\n  KAS.Int = Int;\n  KAS.Float = Float;\n  KAS.Zero = Num.Zero;\n  KAS.One = Num.One;\n})(KAS);\n/* TODO(charlie): fix these lint errors (http://eslint.org/docs/rules): */\n\n/* eslint-disable no-var, no-undef, comma-dangle, indent, max-len */\n\n\n(function (KAS) {\n  // assumes that both expressions have already been parsed\n  // TODO(alex): be able to pass a random() function to compare()\n  KAS.compare = function (expr1, expr2, options) {\n    var defaults = {\n      form: false,\n      // check that the two expressions have the same form\n      simplify: false // check that the second expression is simplified\n\n    };\n    /* more possible options:\n        allow ratios e.g. 3/1 and 3 should both be accepted for something like slope\n        allow student to choose their own variables names\n    */\n\n    if (options !== undefined) {\n      options = _.extend(defaults, options);\n    } else {\n      options = defaults;\n    } // variable check\n\n\n    var vars = expr1.sameVars(expr2);\n\n    if (!vars.equal) {\n      var message = null;\n\n      if (vars.equalIgnoringCase) {\n        message = \"Some of your variables are in the wrong case (upper vs. lower).\";\n      }\n\n      return {\n        equal: false,\n        message: message\n      };\n    } // semantic check\n\n\n    if (!expr1.compare(expr2)) {\n      return {\n        equal: false,\n        message: null\n      };\n    } // syntactic check\n\n\n    if (options.form && !expr1.sameForm(expr2)) {\n      return {\n        equal: false,\n        message: \"Your answer is not in the correct form.\"\n      };\n    } // syntactic check\n\n\n    if (options.simplify && !expr1.isSimplified()) {\n      return {\n        equal: false,\n        message: \"Your answer is not fully expanded and simplified.\"\n      };\n    }\n\n    return {\n      equal: true,\n      message: null\n    };\n  };\n})(KAS);","map":{"version":3,"sources":["/Users/justinf/perseus-configured/src/lib/kas.js"],"names":["window","KAS","parser","o","k","v","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","$Vg","$Vh","$Vi","$Vj","$Vk","$Vl","$Vm","$Vn","$Vo","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","Eq","Add","$","createOrAppend","Mul","handleNegative","fold","handleDivide","concat","Log","natural","common","Trig","create","Pow","Var","Const","toLowerCase","Int","Number","Float","completeParse","addHint","sqrt","nthroot","Abs","Func","table","defaultActions","parseError","str","hash","recoverable","Error","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","Object","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","getPrototypeOf","popStack","n","lex","token","symbol","preErrorSymbol","state","action","a","r","yyval","p","len","newState","expected","errStr","showPosition","join","text","match","line","loc","Array","first_line","last_line","first_column","last_column","range","apply","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","symbolLexer","console","log","Parser","type","magnitude","unit","num","denom","name","pow","unitParser","abstract","print","error","message","isNaN","object","randomFloat","min","max","extent","random","ITERATIONS","TOLERANCE","Expr","_","extend","func","construct","instance","recurse","method","passed","map","arg","isString","eval","codegen","compile","code","Function","e","tex","asTex","defaults","display","dynamic","times","toString","repr","strip","normalize","expand","factor","collect","equals","other","simplify","once","step1","step2","step3","step4","simplified","isSimplified","exprArgs","filter","getVars","excludeFunc","uniq","flatten","invoke","sort","getConsts","getUnits","is","has","any","raiseToThe","exp","isSubtract","isDivide","isRoot","needsExplicitMul","sameVars","vars1","vars2","same","array1","array2","difference","lower","array","equal","equalIgnoringCase","compare","varList","union","getDelta","num1","num2","equalNumbers","delta","Unit","expr1","expr2","unitList1","unitList2","isEqual","vars","floor","useFloats","each","result1","partialEval","result2","toFixed","sameForm","findGCD","Num","One","getDenominator","asMul","isPositive","isNegative","asPositiveFactor","hint","expr","hints","clone","parens","asExpr","negate","Neg","Seq","terms","sortBy","term","partition","groupBy","numbers","others","identity","grouped","flattened","pluck","undefined","reduce","all","oldTerm","newTerm","indexOf","newTerms","isArray","remove","toArray","memo","pairs","muls","pair","collected","compact","sum","zip","coefficient","keepNegative","factors","rest","remainder","add","tmUnits","chain","value","b","cdot","inverses","inverse","number","negatives","numerator","isRational","Rational","withThisRemoved","splice","hasDenom","shouldPushDown","fraction","d","Div","subtract","entered","denominator","isAdd","isInverse","isInverseAdd","base","mul","hasAdd","hasInverseAdd","normals","adds","expanded","temp","factored","rational","partitioned","Zero","summed","isBasic","trigs","trig","logs","exprs","byArg","funcs","sin","cos","tan","cot","byBase","power","factorIn","negativeOne","factorOut","list","divide","isNum","find","left","right","negated","first","isInt","reversed","reverse","result","divided","last","initial","trigLog","open","newTrigLog","pos","neg","posOrNeg","some","every","firstNeg","firstNum","evaledBase","evaledExp","simplifiedExp","decimals","rationalExp","oddDenominator","oddNumerator","sign","bind","asDivide","isSimple","positive","signed","cache","indices","without","pick","isSimilarLog","preciseFloats","asRational","decimalsInBase","getDecimalPlaces","root","decimalsInRoot","newBase","isDiv","isSquaredTrig","expA","expB","Sqrt","radicand","degree","isNatural","Ten","functions","csc","sec","arcsin","asin","arccos","acos","arctan","atan","arccsc","arcsec","arccot","sinh","argStr","cosh","tanh","csch","sech","coth","isEven","contains","positives","signs","eq","unfactored","isZero","isInequality","isEquality","divideThrough","hasVar","isOne","dividedResult","eq1","eq2","solveLinearEquationForVariable","variable","Symbol","newVars","x","parsedFunc","parsed","subscript","sub","prettyPrint","prefix","PI","E","pi","gcd","toDecimalPlaces","parts","places","Sub","mod","constants","decimal_separator","unprefixify","baseUnits","derivedUnits","siPrefixes","keys","testPrefix","RegExp","test","prefixes","hasPrefixes","unitParse","parseResult","unitArray","unitSpec","coefArray","conversion","m","g","s","A","K","mol","cd","f","u","da","h","M","G","T","P","hella","hasntPrefixes","makeAlias","splits","coefficientStr","trim","unitsStr","numdenomStr","numdenom","Da","form"],"mappings":"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","sourcesContent":["/*! KAS | https://github.com/Khan/KAS */\n// This is a @generated file\n/* eslint-disable */\n\nwindow.KAS = {};\n(function(KAS) {\n\n/* parser generated by jison 0.4.15 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,17],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,32],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,33],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,20],$Vh=[1,36],$Vi=[1,37],$Vj=[5,6,8,10,33,35,41,43,45],$Vk=[1,39],$Vl=[1,40],$Vm=[5,6,8,10,12,14,16,19,21,22,28,29,30,31,32,33,34,35,37,39,41,42,43,44,45,46],$Vn=[10,16,19,21,22,28,29,30,31,32,34,37,39,42,43,44,46],$Vo=[5,6,8,10,12,14,16,18,19,21,22,28,29,30,31,32,33,34,35,37,39,41,42,43,44,45,46];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"equation\":3,\"expression\":4,\"SIGN\":5,\"EOF\":6,\"additive\":7,\"+\":8,\"multiplicative\":9,\"-\":10,\"triglog\":11,\"*\":12,\"negative\":13,\"/\":14,\"trig\":15,\"TRIG\":16,\"trigfunc\":17,\"^\":18,\"TRIGINV\":19,\"logbase\":20,\"ln\":21,\"log\":22,\"_\":23,\"subscriptable\":24,\"power\":25,\"primitive\":26,\"variable\":27,\"VAR\":28,\"CONST\":29,\"INT\":30,\"FLOAT\":31,\"{\":32,\"}\":33,\"(\":34,\")\":35,\"function\":36,\"FUNC\":37,\"invocation\":38,\"sqrt\":39,\"[\":40,\"]\":41,\"abs\":42,\"|\":43,\"LEFT|\":44,\"RIGHT|\":45,\"FRAC\":46,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"SIGN\",6:\"EOF\",8:\"+\",10:\"-\",12:\"*\",14:\"/\",16:\"TRIG\",18:\"^\",19:\"TRIGINV\",21:\"ln\",22:\"log\",23:\"_\",28:\"VAR\",29:\"CONST\",30:\"INT\",31:\"FLOAT\",32:\"{\",33:\"}\",34:\"(\",35:\")\",37:\"FUNC\",39:\"sqrt\",40:\"[\",41:\"]\",42:\"abs\",43:\"|\",44:\"LEFT|\",45:\"RIGHT|\",46:\"FRAC\"},\nproductions_: [0,[3,4],[3,2],[3,1],[4,1],[7,3],[7,3],[7,1],[9,2],[9,3],[9,3],[9,1],[13,2],[13,1],[15,1],[17,1],[17,3],[17,1],[20,1],[20,1],[20,3],[11,2],[11,2],[11,1],[25,3],[25,1],[27,1],[24,3],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[36,1],[38,4],[38,4],[38,7],[38,4],[38,3],[38,3],[38,4],[26,1],[26,1],[26,7]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nreturn new yy.Eq($$[$0-3], $$[$0-2], $$[$0-1]);\nbreak;\ncase 2:\nreturn $$[$0-1];\nbreak;\ncase 3:\nreturn new yy.Add([]);\nbreak;\ncase 4: case 7: case 11: case 13: case 15: case 20: case 23: case 25: case 42: case 43:\nthis.$ = $$[$0];\nbreak;\ncase 5:\nthis.$ = yy.Add.createOrAppend($$[$0-2], $$[$0]);\nbreak;\ncase 6:\nthis.$ = yy.Add.createOrAppend($$[$0-2], yy.Mul.handleNegative($$[$0], \"subtract\"));\nbreak;\ncase 8:\nthis.$ = yy.Mul.fold(yy.Mul.createOrAppend($$[$0-1], $$[$0]));\nbreak;\ncase 9:\nthis.$ = yy.Mul.fold(yy.Mul.createOrAppend($$[$0-2], $$[$0]));\nbreak;\ncase 10:\nthis.$ = yy.Mul.fold(yy.Mul.handleDivide($$[$0-2], $$[$0]));\nbreak;\ncase 12:\nthis.$ = yy.Mul.handleNegative($$[$0]);\nbreak;\ncase 14: case 17:\nthis.$ = [yytext];\nbreak;\ncase 16:\nthis.$ = $$[$0-2].concat($$[$0]);\nbreak;\ncase 18:\nthis.$ = yy.Log.natural();\nbreak;\ncase 19:\nthis.$ = yy.Log.common();\nbreak;\ncase 21:\nthis.$ = yy.Trig.create($$[$0-1], $$[$0]);\nbreak;\ncase 22:\nthis.$ = yy.Log.create($$[$0-1], $$[$0]);\nbreak;\ncase 24:\nthis.$ = new yy.Pow($$[$0-2], $$[$0]);\nbreak;\ncase 26: case 34:\nthis.$ = yytext;\nbreak;\ncase 27:\nthis.$ = new yy.Var($$[$0-2], $$[$0]);\nbreak;\ncase 28:\nthis.$ = new yy.Var($$[$0]);\nbreak;\ncase 29:\nthis.$ = new yy.Const(yytext.toLowerCase());\nbreak;\ncase 30:\nthis.$ = yy.Int.create(Number(yytext));\nbreak;\ncase 31:\nthis.$ = yy.Float.create(Number(yytext));\nbreak;\ncase 32:\nthis.$ = $$[$0-1].completeParse();\nbreak;\ncase 33:\nthis.$ = $$[$0-1].completeParse().addHint('parens');\nbreak;\ncase 35: case 36:\nthis.$ = yy.Pow.sqrt($$[$0-1]);\nbreak;\ncase 37:\nthis.$ = new yy.Pow.nthroot($$[$0-1], $$[$0-4]);\nbreak;\ncase 38: case 39: case 40:\nthis.$ = new yy.Abs($$[$0-1]);\nbreak;\ncase 41:\nthis.$ = new yy.Func($$[$0-3], $$[$0-1]);\nbreak;\ncase 44:\nthis.$ = yy.Mul.handleDivide($$[$0-4], $$[$0-1]);\nbreak;\n}\n},\ntable: [{3:1,4:2,6:[1,3],7:4,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{1:[3]},{5:[1,34],6:[1,35]},{1:[2,3]},o([5,6],[2,4],{8:$Vh,10:$Vi}),o($Vj,[2,7],{17:9,20:10,25:11,15:12,26:16,24:18,38:19,27:21,36:31,11:38,12:$Vk,14:$Vl,16:$V1,19:$V2,21:$V3,22:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,39:$Vc,42:$Vd,44:$Vf,46:$Vg}),o($Vm,[2,11]),{10:$V0,11:8,13:41,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},o($Vm,[2,13]),{10:$V0,11:8,13:42,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{10:$V0,11:8,13:43,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},o($Vm,[2,23]),o($Vn,[2,15],{18:[1,44]}),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19],{23:[1,45]}),o($Vm,[2,25],{18:[1,46]}),o([10,16,18,19,21,22,28,29,30,31,32,34,37,39,42,43,44,46],[2,14]),o($Vo,[2,42]),o($Vo,[2,43]),{32:[1,47]},o($Vo,[2,28],{23:[1,48]}),o($Vo,[2,29]),o($Vo,[2,30]),o($Vo,[2,31]),{7:49,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{7:50,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{32:[1,52],34:[1,51],40:[1,53]},{34:[1,54]},{7:55,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{7:56,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{34:[1,57]},o([5,6,8,10,12,14,16,18,19,21,22,23,28,29,30,31,32,33,34,35,37,39,41,42,43,44,45,46],[2,26]),{34:[2,34]},{4:58,7:4,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{1:[2,2]},{9:59,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{9:60,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},o($Vm,[2,8]),{10:$V0,11:8,13:61,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{10:$V0,11:8,13:62,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},o($Vm,[2,12]),o($Vm,[2,21]),o($Vm,[2,22]),{10:$V0,11:8,13:63,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{24:64,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va},{10:$V0,11:8,13:65,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{7:66,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{24:67,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va},{8:$Vh,10:$Vi,33:[1,68]},{8:$Vh,10:$Vi,35:[1,69]},{7:70,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{7:71,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{7:72,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{7:73,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{8:$Vh,10:$Vi,43:[1,74]},{8:$Vh,10:$Vi,45:[1,75]},{7:76,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{6:[1,77]},o($Vj,[2,5],{17:9,20:10,25:11,15:12,26:16,24:18,38:19,27:21,36:31,11:38,12:$Vk,14:$Vl,16:$V1,19:$V2,21:$V3,22:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,39:$Vc,42:$Vd,44:$Vf,46:$Vg}),o($Vj,[2,6],{17:9,20:10,25:11,15:12,26:16,24:18,38:19,27:21,36:31,11:38,12:$Vk,14:$Vl,16:$V1,19:$V2,21:$V3,22:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,39:$Vc,42:$Vd,44:$Vf,46:$Vg}),o($Vm,[2,9]),o($Vm,[2,10]),o($Vn,[2,16]),o($Vn,[2,20]),o($Vm,[2,24]),{8:$Vh,10:$Vi,33:[1,78]},o($Vo,[2,27]),o($Vo,[2,32]),o($Vo,[2,33]),{8:$Vh,10:$Vi,35:[1,79]},{8:$Vh,10:$Vi,33:[1,80]},{8:$Vh,10:$Vi,41:[1,81]},{8:$Vh,10:$Vi,35:[1,82]},o($Vo,[2,39]),o($Vo,[2,40]),{8:$Vh,10:$Vi,35:[1,83]},{1:[2,1]},{32:[1,84]},o($Vo,[2,35]),o($Vo,[2,36]),{32:[1,85]},o($Vo,[2,38]),o($Vo,[2,41]),{7:86,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{7:87,9:5,10:$V0,11:8,13:6,15:12,16:$V1,17:9,19:$V2,20:10,21:$V3,22:$V4,24:18,25:11,26:16,27:21,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,36:31,37:$Vb,38:19,39:$Vc,42:$Vd,43:$Ve,44:$Vf,46:$Vg},{8:$Vh,10:$Vi,33:[1,88]},{8:$Vh,10:$Vi,33:[1,89]},o($Vo,[2,44]),o($Vo,[2,37])],\ndefaultActions: {3:[2,3],33:[2,34],35:[2,2],77:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n        function lex() {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"flex\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:/* skip \\space */\nbreak;\ncase 2:/* skip '\\ ' */\nbreak;\ncase 3:return \"INT\"\nbreak;\ncase 4:return \"FLOAT\"\nbreak;\ncase 5:return \"^\"\nbreak;\ncase 6:return \"*\"\nbreak;\ncase 7:return \"*\"\nbreak;\ncase 8:return \"*\"\nbreak;\ncase 9:return \"*\"\nbreak;\ncase 10:return \"/\"\nbreak;\ncase 11:return \"/\"\nbreak;\ncase 12:return \"-\"\nbreak;\ncase 13:return \"-\"\nbreak;\ncase 14:return \"+\"\nbreak;\ncase 15:return \"^\"\nbreak;\ncase 16:return \"(\"\nbreak;\ncase 17:return \")\"\nbreak;\ncase 18:return \"(\"\nbreak;\ncase 19:return \")\"\nbreak;\ncase 20:return \"[\"\nbreak;\ncase 21:return \"]\"\nbreak;\ncase 22:return \"{\"\nbreak;\ncase 23:return \"}\"\nbreak;\ncase 24:return \"{\"\nbreak;\ncase 25:return \"}\"\nbreak;\ncase 26:return \"_\"\nbreak;\ncase 27:return \"|\"\nbreak;\ncase 28:return \"LEFT|\"\nbreak;\ncase 29:return \"RIGHT|\"\nbreak;\ncase 30:return \"!\"\nbreak;\ncase 31:return \"SIGN\"\nbreak;\ncase 32:yy_.yytext = \"<=\"; return \"SIGN\"\nbreak;\ncase 33:yy_.yytext = \">=\"; return \"SIGN\"\nbreak;\ncase 34:yy_.yytext = \"<=\"; return \"SIGN\"\nbreak;\ncase 35:yy_.yytext = \">=\"; return \"SIGN\"\nbreak;\ncase 36:yy_.yytext = \"<>\"; return \"SIGN\"\nbreak;\ncase 37:yy_.yytext = \"<>\"; return \"SIGN\"\nbreak;\ncase 38:yy_.yytext = \"<>\"; return \"SIGN\"\nbreak;\ncase 39:yy_.yytext = \"<>\"; return \"SIGN\"\nbreak;\ncase 40:yy_.yytext = \"<=\"; return \"SIGN\"\nbreak;\ncase 41:yy_.yytext = \">=\"; return \"SIGN\"\nbreak;\ncase 42:return \"FRAC\"\nbreak;\ncase 43:return \"FRAC\"\nbreak;\ncase 44:return \"sqrt\"\nbreak;\ncase 45:return \"abs\"\nbreak;\ncase 46:return \"ln\"\nbreak;\ncase 47:return \"log\"\nbreak;\ncase 48:return \"TRIG\"\nbreak;\ncase 49:return \"TRIG\"\nbreak;\ncase 50:return \"TRIG\"\nbreak;\ncase 51:return \"TRIG\"\nbreak;\ncase 52:yy_.yytext = \"sin\"; return \"TRIG\"\nbreak;\ncase 53:yy_.yytext = \"cos\"; return \"TRIG\"\nbreak;\ncase 54:yy_.yytext = \"tan\"; return \"TRIG\"\nbreak;\ncase 55:yy_.yytext = \"csc\"; return \"TRIG\"\nbreak;\ncase 56:yy_.yytext = \"sec\"; return \"TRIG\"\nbreak;\ncase 57:yy_.yytext = \"cot\"; return \"TRIG\"\nbreak;\ncase 58:yy_.yytext = \"arcsin\"; return \"TRIG\"\nbreak;\ncase 59:yy_.yytext = \"arccos\"; return \"TRIG\"\nbreak;\ncase 60:yy_.yytext = \"arctan\"; return \"TRIG\"\nbreak;\ncase 61:yy_.yytext = \"arccsc\"; return \"TRIG\"\nbreak;\ncase 62:yy_.yytext = \"arcsec\"; return \"TRIG\"\nbreak;\ncase 63:yy_.yytext = \"arccot\"; return \"TRIG\"\nbreak;\ncase 64:return \"TRIGINV\"\nbreak;\ncase 65:return \"TRIGINV\"\nbreak;\ncase 66:yy_.yytext = \"sinh\"; return \"TRIG\"\nbreak;\ncase 67:yy_.yytext = \"cosh\"; return \"TRIG\"\nbreak;\ncase 68:yy_.yytext = \"tanh\"; return \"TRIG\"\nbreak;\ncase 69:yy_.yytext = \"csch\"; return \"TRIG\"\nbreak;\ncase 70:yy_.yytext = \"sech\"; return \"TRIG\"\nbreak;\ncase 71:yy_.yytext = \"tanh\"; return \"TRIG\"\nbreak;\ncase 72:return \"CONST\"\nbreak;\ncase 73:yy_.yytext = \"pi\"; return \"CONST\"\nbreak;\ncase 74:yy_.yytext = \"pi\"; return \"CONST\"\nbreak;\ncase 75:return \"VAR\"\nbreak;\ncase 76:yy_.yytext = \"theta\"; return \"VAR\"\nbreak;\ncase 77:yy_.yytext = \"theta\"; return \"VAR\"\nbreak;\ncase 78:return \"VAR\"\nbreak;\ncase 79:yy_.yytext = \"phi\"; return \"VAR\"\nbreak;\ncase 80:yy_.yytext = \"phi\"; return \"VAR\"\nbreak;\ncase 81:return yy.symbolLexer(yy_.yytext)\nbreak;\ncase 82:return \"EOF\"\nbreak;\ncase 83:return \"INVALID\"\nbreak;\ncase 84:console.log(yy_.yytext);\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:\\\\space)/,/^(?:\\\\ )/,/^(?:[0-9]+\\.?)/,/^(?:([0-9]+)?\\.[0-9]+)/,/^(?:\\*\\*)/,/^(?:\\*)/,/^(?:\\\\cdot|·)/,/^(?:\\\\times|×)/,/^(?:\\\\ast)/,/^(?:\\/)/,/^(?:\\\\div|÷)/,/^(?:-)/,/^(?:−)/,/^(?:\\+)/,/^(?:\\^)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\\\left\\()/,/^(?:\\\\right\\))/,/^(?:\\[)/,/^(?:\\])/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\\\left\\{)/,/^(?:\\\\right\\})/,/^(?:_)/,/^(?:\\|)/,/^(?:\\\\left\\|)/,/^(?:\\\\right\\|)/,/^(?:\\!)/,/^(?:<=|>=|<>|<|>|=)/,/^(?:\\\\le)/,/^(?:\\\\ge)/,/^(?:\\\\leq)/,/^(?:\\\\geq)/,/^(?:=\\/=)/,/^(?:\\\\ne)/,/^(?:\\\\neq)/,/^(?:≠)/,/^(?:≤)/,/^(?:≥)/,/^(?:\\\\frac)/,/^(?:\\\\dfrac)/,/^(?:sqrt|\\\\sqrt)/,/^(?:abs|\\\\abs)/,/^(?:ln|\\\\ln)/,/^(?:log|\\\\log)/,/^(?:sin|cos|tan)/,/^(?:csc|sec|cot)/,/^(?:sinh|cosh|tanh)/,/^(?:csch|sech|coth)/,/^(?:\\\\sin)/,/^(?:\\\\cos)/,/^(?:\\\\tan)/,/^(?:\\\\csc)/,/^(?:\\\\sec)/,/^(?:\\\\cot)/,/^(?:\\\\arcsin)/,/^(?:\\\\arccos)/,/^(?:\\\\arctan)/,/^(?:\\\\arccsc)/,/^(?:\\\\arcsec)/,/^(?:\\\\arccot)/,/^(?:arcsin|arccos|arctan)/,/^(?:arccsc|arcsec|arccot)/,/^(?:\\\\sinh)/,/^(?:\\\\cosh)/,/^(?:\\\\tanh)/,/^(?:\\\\csch)/,/^(?:\\\\sech)/,/^(?:\\\\coth)/,/^(?:pi)/,/^(?:π)/,/^(?:\\\\pi)/,/^(?:theta)/,/^(?:θ)/,/^(?:\\\\theta)/,/^(?:phi)/,/^(?:φ)/,/^(?:\\\\phi)/,/^(?:[a-zA-Z])/,/^(?:$)/,/^(?:.)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\nKAS.parser = parser;\n})(KAS);\n// this is a @generated file\n(function(KAS) {\n\n/* parser generated by jison 0.4.15 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,9],$V2=[8,17],$V3=[6,11],$V4=[6,11,13,17];\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"unitvalue\":3,\"magnitude\":4,\"unit\":5,\"EOF\":6,\"float\":7,\"POW\":8,\"int\":9,\"multatoms\":10,\"DIV\":11,\"expatom\":12,\"MUL\":13,\"atom\":14,\"^\":15,\"nat\":16,\"ATOM\":17,\"FLOAT\":18,\"NAT\":19,\"NEG\":20,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",6:\"EOF\",8:\"POW\",11:\"DIV\",13:\"MUL\",15:\"^\",17:\"ATOM\",18:\"FLOAT\",19:\"NAT\",20:\"NEG\"},\nproductions_: [0,[3,3],[3,2],[4,3],[4,1],[5,3],[5,1],[10,3],[10,2],[10,1],[12,3],[12,1],[14,1],[7,1],[7,1],[16,1],[9,2],[9,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n            return {\n                type: \"unitMagnitude\",\n                magnitude: $$[$0-2],\n                unit: $$[$0-1],\n            };\n\nbreak;\ncase 2:\n\n            return {\n                type: \"unitStandalone\",\n                unit: $$[$0-1],\n            }\n\nbreak;\ncase 3:\n\n            this.$ = $$[$0-2] + \"e\" + $$[$0];\n\nbreak;\ncase 4: case 13: case 14: case 15: case 17:\n this.$ = $$[$0];\nbreak;\ncase 5:\n\n            this.$ = {\n                num: $$[$0-2],\n                denom: $$[$0],\n            };\n\nbreak;\ncase 6:\n\n            this.$ = {\n                num: $$[$0],\n                denom: null,\n            };\n\nbreak;\ncase 7:\n this.$ = [$$[$0-2]].concat($$[$0]);\nbreak;\ncase 8:\n this.$ = [$$[$0-1]].concat($$[$0]);\nbreak;\ncase 9:\n this.$ = [$$[$0]];\nbreak;\ncase 10:\n\n            this.$ = {\n                name: $$[$0-2],\n                pow: $$[$0],\n            };\n\nbreak;\ncase 11:\n\n            this.$ = {\n                name: $$[$0],\n                pow: 1,\n            };\n\nbreak;\ncase 12:\n this.$ = yytext;\nbreak;\ncase 16:\n this.$ = \"-\" + $$[$0];\nbreak;\n}\n},\ntable: [{3:1,4:2,5:3,7:4,10:5,12:8,14:10,16:7,17:$V0,18:[1,6],19:$V1},{1:[3]},{5:12,10:5,12:8,14:10,17:$V0},{6:[1,13]},{8:[1,14],17:[2,4]},{6:[2,6],11:[1,15]},o($V2,[2,13]),o($V2,[2,14]),o($V3,[2,9],{12:8,14:10,10:17,13:[1,16],17:$V0}),o([6,8,11,13,17],[2,15]),o($V4,[2,11],{15:[1,18]}),o([6,11,13,15,17],[2,12]),{6:[1,19]},{1:[2,2]},{9:20,19:[1,22],20:[1,21]},{10:23,12:8,14:10,17:$V0},{10:24,12:8,14:10,17:$V0},o($V3,[2,8]),{16:25,19:$V1},{1:[2,1]},{17:[2,3]},{19:[1,26]},{17:[2,17]},{6:[2,5]},o($V3,[2,7]),o($V4,[2,10]),{17:[2,16]}],\ndefaultActions: {13:[2,2],19:[2,1],20:[2,3],22:[2,17],23:[2,5],26:[2,16]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 11;\nbreak;\ncase 1:return '(';\nbreak;\ncase 2:return ')';\nbreak;\ncase 3:return 8;\nbreak;\ncase 4:return 15;\nbreak;\ncase 5:return 13;\nbreak;\ncase 6:return 18;\nbreak;\ncase 7:return 19;\nbreak;\ncase 8:return 20;\nbreak;\ncase 9:return 17;\nbreak;\ncase 10:return 17;\nbreak;\ncase 11:return 17;\nbreak;\ncase 12:/* skip whitespace */\nbreak;\ncase 13:return 6;\nbreak;\n}\n},\nrules: [/^(?:\\/)/,/^(?:\\()/,/^(?:\\))/,/^(?:(\\*|x|\\u00d7|\\u2219|\\u22c5|\\u00b7)\\s*10\\s*\\^)/,/^(?:\\^)/,/^(?:\\*)/,/^(?:[0-9]+\\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:-)/,/^(?:\\u00b0( ?)[cCfF])/,/^(?:fl\\.? oz\\.?)/,/^(?:[\\u00b5]?([A-Za-z-]+|[\\u2103\\u2109\\u212b]))/,/^(?:\\s+)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\nKAS.unitParser = parser;\n})(KAS);\n/* TODO(charlie): fix these lint errors (http://eslint.org/docs/rules): */\n/* eslint-disable indent, no-undef, no-var, one-var, no-dupe-keys, no-new-func, no-redeclare, no-unused-vars, comma-dangle, max-len, prefer-spread, space-infix-ops, space-unary-ops */\n\n(function(KAS) {\n\n/*  The node hierarcy is as follows:\n\n    (Expr)\n        (Seq)           2+ children\n            Add\n            Mul\n        Pow             2 children\n        Log             2 children\n        Eq              2 children\n        Trig            1 child\n        Abs             1 child\n        (Symbol)\n            Func        1 child     e.g. f(x)\n            Var         leaf node   e.g. x, x_n\n            Const       leaf node   e.g. pi, e, <i>\n            Unit        leaf node   e.g. kg\n        (Num)           leaf node\n            Rational                e.g. 2/3\n                Int\n            Float\n\n    (abstract, not meant to be instantiated)\n\n    == Key design concepts ==\n    Functional: All methods return new nodes - nodes are never mutated.\n    Ignore commutativity: Commutative inputs should be parsed equivalently.\n    Exploit commutativity: Output should take advantage of ordering.\n*/\n\n/* non user-facing functions */\n\n// assert that all abstract methods have been overridden\nvar abstract = function() {\n    // Try to give people a bit of information when this happens\n    throw new Error(\"Abstract method - must override for expr: \" +\n            this.print());\n};\n\n// throw an error that is meant to be caught by the test suite (not user facing)\nvar error = function(message) { throw new Error(message); };\n\n// reliably detect NaN\nvar isNaN = function(object) { return object !== object; };\n\n// return a random float between min (inclusive) and max (exclusive),\n// not that inclusivity means much, probabilistically, on floats\nvar randomFloat = function(min, max) {\n    var extent = max - min;\n    return Math.random() * extent + min;\n};\n\n/* constants */\nvar ITERATIONS = 12;\nvar TOLERANCE = 9; // decimal places\n\n\n/* abstract base expression node */\nfunction Expr() {}\n\n_.extend(Expr.prototype, {\n\n    // this node's immediate constructor\n    func: abstract,\n\n    // an array of the arguments to this node's immediate constructor\n    args: abstract,\n\n    // make a new node with the given arguments\n    construct: function(args) {\n        var instance = new this.func();\n        this.func.apply(instance, args);\n        return instance;\n    },\n\n    // an abstraction for chainable, bottom-up recursion\n    recurse: function(method) {\n        var passed = Array.prototype.slice.call(arguments, 1);\n        var args = _.map(this.args(), function(arg) {\n            return _.isString(arg) ? arg : arg[method].apply(arg, passed);\n        });\n        return this.construct(args);\n    },\n\n    // evaluate numerically with given variable mapping\n    eval: abstract,\n\n    codegen: abstract,\n\n    compile: function() {\n        var code = this.codegen();\n        try {\n            return new Function(\"vars\", \"return \" + code + \";\");\n        } catch (e) {\n            throw new Error(\"Function did not compile: \" + code);\n        }\n    },\n\n    // returns a string unambiguously representing the expression\n    // should be valid as input\n    // e.g. this.equals(parse(this.print())) === true\n    print: abstract,\n\n    // returns a TeX string representing the expression\n    tex: abstract,\n\n    // returns a TeX string, modified by the given options\n    asTex: function(options) {\n\n        options = options || {};\n        _.defaults(options, {\n            display: true,\n            dynamic: true,\n            times: false\n        });\n\n        var tex = this.tex();\n\n        if (options.display) {\n            tex = \"\\\\displaystyle \" + tex;\n        }\n        if (options.dynamic) {\n            tex = tex.replace(/\\(/g, \"\\\\left(\");\n            tex = tex.replace(/\\)/g, \"\\\\right)\");\n        }\n        if (options.times) {\n            tex = tex.replace(/\\\\cdot/g, \"\\\\times\");\n        }\n\n        return tex;\n    },\n\n    // returns the name of this expression's constructor as a string\n    // only used for testing and debugging (the ugly regex is for IE8)\n    name: function() {\n        if (this.func.name) {\n            return this.func.name;\n        } else {\n            return this.func.toString().match(/^function\\s*([^\\s(]+)/)[1];\n        }\n    },\n\n    // returns a string representing current node structure\n    repr: function() {\n        return this.name() + \"(\" + _.map(this.args(), function(arg) {\n            return _.isString(arg) ? arg : arg.repr();\n        }).join(\",\") + \")\";\n    },\n\n    // removes all negative signs\n    strip: function() { return this.recurse(\"strip\"); },\n\n    // canonically reorders all commutative elements\n    normalize: function() { return this.recurse(\"normalize\"); },\n\n    // expands the expression\n    expand: function() { return this.recurse(\"expand\"); },\n\n    // naively factors out like terms\n    factor: function(options) { return this.recurse(\"factor\", options); },\n\n    // collect all like terms\n    collect: function(options) { return this.recurse(\"collect\", options); },\n\n    // strict syntactic equality check\n    equals: function(other) {\n        return this.normalize().print() === other.normalize().print();\n    },\n\n    // expand and collect until the expression no longer changes\n    simplify: function(options) {\n        options = _.extend({\n            once: false\n        }, options);\n\n        // Attempt to factor and collect\n        var step1 = this.factor(options);\n        var step2 = step1.collect(options);\n\n        // Rollback if collect didn't do anything\n        if (step1.equals(step2)) {\n            step2 = this.collect(options);\n        }\n\n        // Attempt to expand and collect\n        var step3 = step2.expand(options);\n        var step4 = step3.collect(options);\n\n        // Rollback if collect didn't do anything\n        if (step3.equals(step4)) {\n            step4 = step2.collect(options);\n        }\n\n        // One round of simplification complete\n        var simplified = step4;\n\n        if (options.once || this.equals(simplified)) {\n            return simplified;\n        } else {\n            return simplified.simplify(options);\n        }\n    },\n\n    // check whether this expression is simplified\n    isSimplified: function() {\n        return this.equals(this.simplify());\n    },\n\n    // return the child nodes of this node\n    exprArgs: function() {\n        return _.filter(this.args(), function(arg) {\n            return arg instanceof Expr;\n        });\n    },\n\n    // return the variables (function and non) within the expression\n    getVars: function(excludeFunc) {\n        return _.uniq(_.flatten(_.invoke(this.exprArgs(), \"getVars\", excludeFunc))).sort();\n    },\n\n    getConsts: function() {\n        return _.uniq(_.flatten(_.invoke(this.exprArgs(), \"getConsts\"))).sort();\n    },\n\n    getUnits: function() {\n        return _.flatten(_.invoke(this.exprArgs(), \"getUnits\"));\n    },\n\n    // check whether this expression node is of a particular type\n    is: function(func) {\n        return this instanceof func;\n    },\n\n    // check whether this expression has a particular node type\n    has: function(func) {\n        if (this instanceof func) {\n            return true;\n        }\n        return _.any(this.exprArgs(), function(arg) { return arg.has(func); });\n    },\n\n    // raise this expression to a given exponent\n    // most useful for eventually implementing i^3 = -i, etc.\n    raiseToThe: function(exp) {\n        return new Pow(this, exp);\n    },\n\n    // does this expression have a specific rendering hint?\n    // rendering hints are picked up while parsing, but are lost during transformations\n    isSubtract: function() { return false; },\n    isDivide:  function() { return false; },\n    isRoot:  function() { return false; },\n\n    // whether this node needs an explicit multiplication sign if following a Num\n    needsExplicitMul: function() {\n        return this.args()[0].needsExplicitMul();\n    },\n\n    // check that the variables in both expressions are the same\n    sameVars: function(other) {\n        var vars1 = this.getVars();\n        var vars2 = other.getVars();\n\n        // the other Expr can have more variables than this one\n        // this lets you multiply equations by other variables\n        var same = function(array1, array2) {\n            return !_.difference(array1, array2).length;\n        };\n\n        var lower = function(array) {\n            return _.uniq(_.invoke(array, \"toLowerCase\")).sort();\n        };\n\n        var equal = same(vars1, vars2);\n        var equalIgnoringCase = same(lower(vars1), lower(vars2));\n\n        return {equal: equal, equalIgnoringCase: equalIgnoringCase};\n    },\n\n    // semantic equality check, call after sameVars() to avoid potential false positives\n    // plug in random numbers for the variables in both expressions\n    // if they both consistently evaluate the same, then they're the same\n    compare: function(other) {\n        // equation comparisons are handled by Eq.compare()\n        if (other instanceof Eq) {\n            return false;\n        }\n\n        var varList = _.union(\n            this.getVars(/* excludeFunc */ true),\n            other.getVars(/* excludeFunc */ true));\n\n        // If the numbers are large we would like to do a relative comparison\n        // rather than an absolute one, but if they're small enough then an\n        // absolute comparison makes more sense\n        var getDelta = function(num1, num2) {\n            if (Math.abs(num1) < 1 || Math.abs(num2) < 1) {\n                return Math.abs(num1 - num2);\n            } else {\n                return Math.abs(1 - num1 / num2);\n            }\n        };\n\n        var equalNumbers = function(num1, num2) {\n            var delta = getDelta(num1, num2);\n            return ((num1 === num2) || /* needed if either is +/- Infinity */\n                    (isNaN(num1) && isNaN(num2)) ||\n                    (delta < Math.pow(10, -TOLERANCE)));\n        };\n\n        // if no variables, only need to evaluate once\n        if (!varList.length && !this.has(Unit) && !other.has(Unit)) {\n            return equalNumbers(this.eval(), other.eval());\n        }\n\n        // collect here to avoid sometimes dividing by zero, and sometimes not\n        // it is better to be deterministic, e.g. x/x -> 1\n        // TODO(alex): may want to keep track of assumptions as they're made\n        var expr1 = this.collect();\n        var expr2 = other.collect();\n\n        var unitList1 = this.getUnits();\n        var unitList2 = other.getUnits();\n        if (!_.isEqual(unitList1, unitList2)) {\n            return false;\n        }\n\n        // Compare at a set number (currently 12) of points to determine\n        // equality.\n        //\n        // `range` (and `vars`) is the only variable that varies through the\n        // iterations. For each of range = 10, 100, and 1000, each random\n        // variable is picked from (-range, range).\n        //\n        // Note that because there are 12 iterations and three ranges, each\n        // range is checked four times.\n        for (var i = 0; i < ITERATIONS; i++) {\n\n            var vars = {};\n\n            // One third total iterations each with range 10, 100, and 1000\n            var range = Math.pow(10, 1 + Math.floor(3 * i / ITERATIONS));\n\n            // Half of the iterations should only use integer values.\n            // This is because expressions like (-2)^x are common but result\n            // in NaN when evaluated in JS with non-integer values of x.\n            // Without this, (-2)^x and (-2)^(x+1) both end up always being NaN\n            // and thus equivalent. With this, the most common failure case is\n            // avoided. However, less common cases such as (-2)^(x+0.1) and\n            // (-2)^(x+1.1) will still both evaluate to NaN and result in a\n            // false positive.\n            //\n            // Note that the above is only true in vanilla JS Number-land,\n            // which has no concept of complex numbers. The solution is simple:\n            // Integrate a library for handling complex numbers.\n            //\n            // TODO(alex): Add support for complex numbers, then remove this.\n            var useFloats = i % 2 === 0;\n\n            _.each(varList, function(v) {\n                vars[v] = useFloats ? randomFloat(-range, range)\n                                    : _.random(-range, range);\n            });\n\n            var equal;\n            if (expr1.has(Func) || expr2.has(Func) ||\n                    expr1.has(Unit) || expr2.has(Unit)) {\n\n                var result1 = expr1.partialEval(vars);\n                var result2 = expr2.partialEval(vars);\n\n                equal = result1.simplify().equals(result2.simplify());\n            } else {\n                var result1 = expr1.eval(vars);\n                var result2 = expr2.eval(vars);\n\n                equal = equalNumbers(result1, result2);\n            }\n\n            if (!equal) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    // evaluate as much of the expression as possible\n    partialEval: function(vars) {\n        if (this instanceof Unit) {\n            return this;\n        } else if (!this.has(Func)) {\n            return new Float(this.eval(vars).toFixed(TOLERANCE)).collect();\n        } else if (this instanceof Func) {\n            return new Func(this.symbol, this.arg.partialEval(vars));\n        } else {\n            return this.recurse(\"partialEval\", vars);\n        }\n    },\n\n    // check that the structure of both expressions is the same\n    // all negative signs are stripped and the expressions are converted to\n    // a canonical commutative form\n    // should only be done after compare() returns true to avoid false positives\n    sameForm: function(other) {\n        return this.strip().equals(other.strip());\n    },\n\n    // returns the GCD of this expression and the given factor\n    findGCD: function(factor) {\n        return this.equals(factor) ? factor : Num.One;\n    },\n\n    // return this expression's denominator\n    getDenominator: function() {\n        return Num.One;\n    },\n\n    // return this expression as a Mul\n    asMul: function() {\n        return new Mul(Num.One, this);\n    },\n\n    // TODO(alex): rename to isDefinitePositive or similar?\n    // return whether this expression is 100% positive\n    isPositive: abstract,\n\n    // TODO(alex): rename to hasNegativeSign or similar?\n    // return whether this expression has a negative sign\n    isNegative: function() { return false; },\n\n    // return a factor of this expression that is 100% positive\n    asPositiveFactor: function() {\n        return this.isPositive() ? this : Num.One;\n    },\n\n    // return a copy of the expression with a new hint set (preserves hints)\n    addHint: function(hint) {\n        if (!hint) {\n            return this;\n        }\n\n        var expr = this.construct(this.args());\n        expr.hints = _.clone(this.hints);\n        expr.hints[hint] = true;\n        return expr;\n    },\n\n    hints: {\n        parens: false\n    },\n\n    // currently unused!\n    asExpr: function() { return this; },\n\n    // complete parse by performing a few necessary transformations\n    completeParse: function() { return this.recurse(\"completeParse\"); },\n\n    abs: abstract,\n\n    negate: function() {\n        return new Mul(Num.Neg, this);\n    }\n});\n\n\n/* abstract sequence node */\nfunction Seq() {}\nSeq.prototype = new Expr();\n\n_.extend(Seq.prototype, {\n    args: function() { return this.terms; },\n\n    normalize: function() {\n        var terms = _.sortBy(_.invoke(this.terms, \"normalize\"), function(term) {\n            return term.print();\n        });\n\n        return new this.func(terms);\n    },\n\n    expand: function() {\n        return this.recurse(\"expand\").flatten();\n    },\n\n    // partition the sequence into its numeric and non-numeric parts\n    // makes no guarantees about the validity of either part!\n    partition: function() {\n        var terms = _.groupBy(this.terms, function(term) {\n            return term instanceof Num;\n        });\n\n        // XXX using a boolean as a key just converts it to a string. I don't\n        // think this code was written with that in mind. Probably doesn't\n        // matter except for readability.\n        var numbers = terms[true] || [];\n        var others = terms[false] || [];\n\n        return [new this.func(numbers), new this.func(others)];\n    },\n\n    // ensure that sequences have 2+ terms and no nested sequences of the same type\n    // this is a shallow flattening and will return a non-Seq if terms.length <= 1\n    flatten: function() {\n        var type = this;\n        var terms = _.reject(this.terms, function(term) {\n            return term.equals(type.identity);\n        });\n\n        if (terms.length === 0) {\n            return type.identity;\n        }\n        if (terms.length === 1) {\n            return terms[0];\n        }\n\n        var grouped = _.groupBy(terms, function(term) {\n            return term instanceof type.func;\n        });\n\n        // same contains the children which are Seqs of the same type as this Seq\n        var same = grouped[true] || [];\n        var others = grouped[false] || [];\n\n        var flattened = others.concat(_.flatten(_.pluck(same, \"terms\"), /* shallow: */ true));\n        return new type.func(flattened);\n    },\n\n    // the identity associated with the sequence\n    identity: undefined,\n\n    // reduce a numeric sequence to a Num\n    reduce: abstract,\n\n    isPositive: function() {\n        var terms = _.invoke(this.terms, \"collect\");\n        return _.all(_.invoke(terms, \"isPositive\"));\n    },\n\n    // return a new Seq with a given term replaced by a different term\n    // (or array of terms). given term can be passed directly, or by index\n    // if no new term is provided, the old one is simply removed\n    replace: function(oldTerm, newTerm) {\n        var index;\n\n        if (oldTerm instanceof Expr) {\n            index = _.indexOf(this.terms, oldTerm);\n        } else {\n            index = oldTerm;\n        }\n\n        var newTerms = [];\n        if (_.isArray(newTerm)) {\n            newTerms = newTerm;\n        } else if (newTerm) {\n            newTerms = [newTerm];\n        }\n\n        var terms = this.terms.slice(0, index)\n                    .concat(newTerms)\n                    .concat(this.terms.slice(index + 1));\n\n        return new this.func(terms);\n    },\n\n    // syntactic sugar for replace()\n    remove: function(term) {\n        return this.replace(term);\n    },\n\n    getDenominator: function() {\n        // TODO(alex): find and return LCM\n        return new Mul(_.invoke(this.terms, \"getDenominator\")).flatten();\n    }\n});\n\n\n/* sequence of additive terms */\nfunction Add() {\n    if (arguments.length === 1) {\n        this.terms = arguments[0];\n    } else {\n        this.terms = _.toArray(arguments);\n    }\n}\nAdd.prototype = new Seq();\n\n_.extend(Add.prototype, {\n    func: Add,\n\n    eval: function(vars, options) {\n        return _.reduce(this.terms, function(memo, term) { return memo + term.eval(vars, options); }, 0);\n    },\n\n    codegen: function() {\n        return _.map(this.terms, function(term) {\n            return \"(\" + term.codegen() + \")\";\n        }).join(\" + \") || \"0\";\n    },\n\n    print: function() {\n        return _.invoke(this.terms, \"print\").join(\"+\");\n    },\n\n    tex: function() {\n        var tex = \"\";\n\n        _.each(this.terms, function(term) {\n            if (!tex || term.isSubtract()) {\n                tex += term.tex();\n            } else {\n                tex += \"+\" + term.tex();\n            }\n        });\n\n        return tex;\n    },\n\n    collect: function(options) {\n        var terms = _.invoke(this.terms, \"collect\", options);\n\n        // [Expr expr, Num coefficient]\n        var pairs = [];\n\n        _.each(terms, function(term) {\n            if (term instanceof Mul) {\n                var muls = term.partition();\n                pairs.push([muls[1].flatten(), muls[0].reduce(options)]);\n            } else if (term instanceof Num) {\n                pairs.push([Num.One, term]);\n            } else {\n                pairs.push([term, Num.One]);\n            }\n        });\n\n        // { (Expr expr).print(): [[Expr expr, Num coefficient]] }\n        var grouped = _.groupBy(pairs, function(pair) {\n            return pair[0].normalize().print();\n        });\n\n        var collected = _.compact(_.map(grouped, function(pairs) {\n            var expr = pairs[0][0];\n            var sum = new Add(_.zip.apply(_, pairs)[1]);\n            var coefficient = sum.reduce(options);\n            return new Mul(coefficient, expr).collect(options);\n        }));\n\n        // TODO(alex): use the Pythagorean identity here\n        // e.g. x*sin^2(y) + x*cos^2(y) -> x\n\n        return new Add(collected).flatten();\n    },\n\n    // naively factor out anything that is common to all terms\n    // if options.keepNegative is specified, won't factor out a common -1\n    factor: function(options) {\n        options = _.extend({\n            keepNegative: false\n        }, options);\n\n        var terms = _.invoke(this.terms, \"collect\");\n        var factors;\n\n        if (terms[0] instanceof Mul) {\n            factors = terms[0].terms;\n        } else {\n            factors = [terms[0]];\n        }\n\n        _.each(_.rest(this.terms), function(term) {\n            factors = _.map(factors, function(factor) {\n                return term.findGCD(factor);\n            });\n        });\n\n        if (!options.keepNegative && this.isNegative()) {\n            factors.push(Num.Neg);\n        }\n\n        factors = new Mul(factors).flatten().collect();\n\n        var remainder = _.map(terms, function(term) {\n            return Mul.handleDivide(term, factors).simplify();\n        });\n        remainder = new Add(remainder).flatten();\n\n        return Mul.createOrAppend(factors, remainder).flatten();\n    },\n\n    reduce: function(options) {\n        return _.reduce(this.terms, function(memo, term) {\n            return memo.add(term, options);\n        }, this.identity);\n    },\n\n    needsExplicitMul: function() { return false; },\n\n    isNegative: function() {\n        var terms = _.invoke(this.terms, \"collect\");\n        return _.all(_.invoke(terms, \"isNegative\"));\n    },\n\n    negate: function() {\n        return new Add(_.invoke(this.terms, \"negate\"));\n    }\n});\n\n\n/* sequence of multiplicative terms */\nfunction Mul() {\n    if (arguments.length === 1) {\n        this.terms = arguments[0];\n    } else {\n        this.terms = _.toArray(arguments);\n    }\n}\nMul.prototype = new Seq();\n\n_.extend(Mul.prototype, {\n    func: Mul,\n\n    eval: function(vars, options) {\n        return _.reduce(this.terms, function(memo, term) { return memo * term.eval(vars, options); }, 1);\n    },\n\n    codegen: function() {\n        return _.map(this.terms, function(term) {\n            return \"(\" + term.codegen() + \")\";\n        }).join(\" * \") || \"0\";\n    },\n\n    print: function() {\n        return _.map(this.terms, function(term) {\n            return (term instanceof Add) ? \"(\" + term.print() + \")\" : term.print();\n        }).join(\"*\");\n    },\n\n    getUnits: function() {\n        var tmUnits = _(this.terms)\n            .chain()\n            .map(function(term) {\n                return term.getUnits();\n            })\n            .flatten()\n            .value();\n\n        tmUnits.sort(function(a, b) {\n            return a.unit < b.unit;\n        });\n\n        return tmUnits;\n    },\n\n    // since we don't care about commutativity, we can render a Mul any way we choose\n    // so we follow convention: first any negatives, then any numbers, then everything else\n    tex: function() {\n        var cdot = \" \\\\cdot \";\n\n        var terms = _.groupBy(this.terms, function(term) {\n            if (term.isDivide()) {\n                return \"inverse\";\n            } else if (term instanceof Num) {\n                return \"number\";\n            } else {\n                return \"other\";\n            }\n        });\n\n        var inverses = terms.inverse || [];\n        var numbers = terms.number || [];\n        var others = terms.other || [];\n\n        var negatives = \"\";\n        var numerator;\n\n        // check all the numbers to see if there is a rational we can extract,\n        // since we would like 1/2x/y to come out as \\frac{1}{2}\\frac{x}{y},\n        // and not \\frac{1x}{2y}.\n        for (var i = 0; i < numbers.length; i++) {\n            var isRational = numbers[i] instanceof Rational &&\n                                !(numbers[i] instanceof Int);\n            if (isRational && others.length > 0 && inverses.length > 0) {\n                var withThisRemoved = numbers.slice();\n                withThisRemoved.splice(i, 1);\n                var newTerms = withThisRemoved.concat(inverses).concat(others);\n                return numbers[i].tex() + new Mul(newTerms).tex();\n            }\n        }\n\n        numbers = _.compact(_.map(numbers, function(term) {\n            var hasDenom = (term instanceof Rational) && !(term instanceof Int);\n            var shouldPushDown = !term.hints.fraction || inverses.length > 0;\n            if (hasDenom && shouldPushDown) {\n                // e.g. 3x/4 -> 3/4*x (internally) -> 3x/4 (rendered)\n                inverses.push(new Pow(new Int(term.d), Num.Div));\n                var number = new Int(term.n);\n                number.hints = term.hints;\n                return _.any(term.hints) ? number : null;\n            } else {\n                return term;\n            }\n        }));\n\n        if (numbers.length === 0 && others.length === 1) {\n            // e.g. (x+y)/z -> \\frac{x+y}{z}\n            numerator = others[0].tex();\n        } else {\n            var tex = \"\";\n\n            _.each(numbers, function(term) {\n                if (term.hints.subtract && term.hints.entered) {\n                    negatives += \"-\";\n                    tex += (tex ? cdot : \"\") + term.abs().tex();\n                } else if ((term instanceof Int) && (term.n === -1) &&\n                    (term.hints.negate || term.hints.subtract)) {\n                    // e.g. -1*-1 -> --1\n                    // e.g. -1*x -> -x\n                    negatives += \"-\";\n                } else {\n                    // e.g. 2*3 -> 2(dot)3\n                    tex += (tex ? cdot : \"\") + term.tex();\n                }\n            });\n\n            _.each(others, function(term) {\n                if (term.needsExplicitMul()) {\n                    // e.g. 2*2^3 -> 2(dot)2^3\n                    tex += (tex ? cdot : \"\") + term.tex();\n                } else if (term instanceof Add) {\n                    // e.g. (a+b)*c -> (a+b)c\n                    tex += \"(\" + term.tex() + \")\";\n                } else {\n                    // e.g. a*b*c -> abc\n                    tex += term.tex();\n                }\n            });\n\n            numerator = tex ? tex : \"1\";\n        }\n\n        if (!inverses.length) {\n            return negatives + numerator;\n        } else {\n            var denominator = new Mul(_.invoke(inverses, \"asDivide\")).flatten().tex();\n            return negatives + \"\\\\frac{\" + numerator + \"}{\" + denominator + \"}\";\n        }\n    },\n\n    strip: function() {\n        var terms = _.map(this.terms, function(term) {\n            return term instanceof Num ? term.abs() : term.strip();\n        });\n        return new Mul(terms).flatten();\n    },\n\n    // expand numerator and denominator separately\n    expand: function() {\n\n        var isAdd = function(term) {\n            return term instanceof Add;\n        };\n\n        var isInverse = function(term) {\n            return term instanceof Pow && term.exp.isNegative();\n        };\n\n        var isInverseAdd = function(term) {\n            return isInverse(term) && isAdd(term.base);\n        };\n\n        var mul = this.recurse(\"expand\").flatten();\n\n        var hasAdd = _.any(mul.terms, isAdd);\n        var hasInverseAdd = _.any(mul.terms, isInverseAdd);\n\n        if (!(hasAdd || hasInverseAdd)) {\n            return mul;\n        }\n\n        var terms = _.groupBy(mul.terms, isInverse);\n        var normals = terms[false] || [];\n        var inverses = terms[true] || [];\n\n        if (hasAdd) {\n            var grouped = _.groupBy(normals, isAdd);\n            var adds = grouped[true] || [];\n            var others = grouped[false] || [];\n\n            // loop over each additive sequence\n            var expanded = _.reduce(adds, function(expanded, add) {\n                // loop over each expanded array of terms\n                return _.reduce(expanded, function(temp, array) {\n                    // loop over each additive sequence's terms\n                    return temp.concat(_.map(add.terms, function(term) {\n                        return array.concat(term);\n                    }));\n                }, []);\n            }, [[]]);\n\n            // join each fully expanded array of factors with remaining multiplicative factors\n            var muls = _.map(expanded, function(array) {\n                return new Mul(others.concat(array)).flatten();\n            });\n\n            normals = [new Add(muls)];\n        }\n\n        if (hasInverseAdd) {\n            var denominator = new Mul(_.invoke(inverses, \"getDenominator\")).flatten();\n            inverses = [new Pow(denominator.expand(), Num.Div)];\n        }\n\n        return new Mul(normals.concat(inverses)).flatten();\n    },\n\n    factor: function(options) {\n        var factored = this.recurse(\"factor\", options).flatten();\n        if (! (factored instanceof Mul)) {\n            return factored;\n        }\n\n        // Combine any factored out Rationals into one, but don't collect\n        var grouped = _.groupBy(factored.terms, function(term) {\n            return term instanceof Rational;\n        });\n\n        // Could also accomplish this by passing a new option\n        // e.g. return  memo.mul(term, {autocollect: false});\n        // TODO(alex): Decide whether this is a good use of options or not\n        var rational = _.reduce(grouped[true], function(memo, term) {\n            return {n: memo.n * term.n, d: memo.d * term.d};\n        }, {n: 1, d: 1});\n\n        if (rational.d === 1) {\n            rational = new Int(rational.n);\n        } else {\n            rational = new Rational(rational.n, rational.d);\n        }\n\n        return new Mul((grouped[false] || []).concat(rational)).flatten();\n    },\n\n    collect: function(options) {\n        var partitioned = this.recurse(\"collect\", options).partition();\n        var number = partitioned[0].reduce(options);\n\n        // e.g. 0*x -> 0\n        if (number.eval() === 0) {\n            return Num.Zero;\n        }\n\n        var others = partitioned[1].flatten();\n\n        // e.g. 2*2 -> 4\n        // e.g. 2*2*x -> 4*x\n        if (!(others instanceof Mul)) {\n            return new Mul(number, others).flatten();\n        }\n\n        others = others.terms;\n\n        // [Expr base, Expr exp]\n        var pairs = [];\n\n        _.each(others, function(term) {\n            if (term instanceof Pow) {\n                pairs.push([term.base, term.exp]);\n            } else {\n                pairs.push([term, Num.One]);\n            }\n        });\n\n        // {(Expr base).print(): [[Expr base, Expr exp]]}\n        var grouped = _.groupBy(pairs, function(pair) {\n            return pair[0].normalize().print();\n        });\n\n        // [[Expr base, Expr exp]]\n        var summed = _.compact(_.map(grouped, function(pairs) {\n            var base = pairs[0][0];\n            var sum = new Add(_.zip.apply(_, pairs)[1]);\n            var exp = sum.collect(options);\n\n            if (exp instanceof Num && exp.eval() === 0) {\n                return null;\n            } else {\n                return [base, exp];\n            }\n        }));\n\n        // XXX `pairs` is shadowed four or five times in this function\n        var pairs = _.groupBy(summed, function(pair) {\n            if (pair[0] instanceof Trig && pair[0].isBasic()) {\n                return \"trig\";\n            } else if (pair[0] instanceof Log) {\n                return \"log\";\n            } else {\n                return \"expr\";\n            }\n        });\n        var trigs = pairs.trig || [];\n        var logs = pairs.log || [];\n        var exprs = pairs.expr || [];\n\n        if (trigs.length > 1) {\n            // combine sines and cosines into other trig functions\n\n            // {Trig.arg.print(): [[Trig base, Expr exp]]}\n            var byArg = _.groupBy(trigs, function(pair) {\n                return pair[0].arg.normalize().print();\n            });\n\n            trigs = [];\n            _.each(byArg, function(pairs) {\n                var arg = pairs[0][0].arg;\n\n                // {Trig.type: Expr exp}\n                var funcs = {sin: Num.Zero, cos: Num.Zero};\n                _.each(pairs, function(pair) {\n                    funcs[pair[0].type] = pair[1];\n                });\n\n                if (Mul.handleNegative(funcs.sin).collect(options).equals(funcs.cos)) {\n                    // e.g. sin^x(y)/cos^x(y) -> tan^x(y)\n                    if (funcs.cos.isNegative()) {\n                        funcs = {tan: funcs.sin};\n                    } else {\n                        funcs = {cot: funcs.cos};\n                    }\n                }\n\n                // TODO(alex): combine even if exponents not a perfect match\n                // TODO(alex): transform 1/sin and 1/cos into csc and sec\n\n                _.each(funcs, function(exp, type) {\n                    trigs.push([new Trig(type, arg), exp]);\n                });\n            });\n        }\n\n        if (logs.length > 1) {\n            // combine logs with the same base\n\n            // {Log.base.print(): [[Log base, Expr exp]]}\n            var byBase = _.groupBy(logs, function(pair) {\n                return pair[0].base.normalize().print();\n            });\n\n            logs = [];\n\n            _.each(byBase, function(pairs) {\n                // only combine two logs of the same base, otherwise commutative\n                // differences result in different equally valid output\n                // e.g. ln(x)/ln(z)*ln(y) -> log_z(x)*ln(y)\n                // e.g. ln(x)*ln(y)/ln(z) -> ln(x)*log_z(y)\n                if (pairs.length === 2 &&\n                    Mul.handleNegative(pairs[0][1]).collect(options).equals(pairs[1][1])) {\n                    // e.g. ln(x)^y/ln(b)^y -> log_b(x)^y\n                    if (pairs[0][1].isNegative()) {\n                        logs.push([new Log(pairs[0][0].power, pairs[1][0].power), pairs[1][1]]);\n                    } else {\n                        logs.push([new Log(pairs[1][0].power, pairs[0][0].power), pairs[0][1]]);\n                    }\n                } else {\n                    logs = logs.concat(pairs);\n                }\n            });\n\n            // TODO(alex): combine if all inverses are the same e.g. ln(y)*ln(z)/ln(x)/ln(x)\n        }\n\n        pairs = trigs.concat(logs).concat(exprs);\n\n        var collected = _.map(pairs, function(pair) {\n            return new Pow(pair[0], pair[1]).collect(options);\n        });\n\n        return new Mul([number].concat(collected)).flatten();\n    },\n\n    isSubtract: function() {\n        return _.any(this.terms, function(term) {\n            return term instanceof Num && term.hints.subtract;\n        });\n    },\n\n    // factor a single -1 in to the Mul\n    // combine with a Num if all Nums are positive, else add as a term\n    factorIn: function(hint) {\n        var partitioned = this.partition();\n        var numbers = partitioned[0].terms;\n        var fold = numbers.length && _.all(numbers, function(num) {\n            return num.n > 0;\n        });\n\n        if (fold) {\n            // e.g. - x*2*3 -> x*-2*3\n            var num = numbers[0].negate();\n            num.hints = numbers[0].hints;\n            return this.replace(numbers[0], num.addHint(hint));\n        } else {\n            // e.g. - x*y -> -1*x*y\n            // e.g. - x*-2 -> -1*x*-2\n            return new Mul([Num.negativeOne(hint)].concat(this.terms));\n        }\n    },\n\n    // factor out a single hinted -1 (assume it is the division hint)\n    // TODO(alex): make more general or rename to be more specific\n    factorOut: function() {\n        var factored = false;\n        var terms = _.compact(_.map(this.terms, function(term, i, list) {\n            if (!factored && term instanceof Num && term.hints.divide) {\n                factored = true;\n                return term.n !== -1 ? term.negate() : null;\n            } else {\n                return term;\n            }\n        }));\n\n        if (terms.length === 1) {\n            return terms[0];\n        } else {\n            return new Mul(terms);\n        }\n    },\n\n    reduce: function(options) {\n        return _.reduce(this.terms, function(memo, term) {\n            return memo.mul(term, options);\n        }, this.identity);\n    },\n\n    findGCD: function(factor) {\n        return new Mul(_.invoke(this.terms, \"findGCD\", factor)).flatten();\n    },\n\n    asMul: function() {\n        return this;\n    },\n\n    asPositiveFactor: function() {\n        if (this.isPositive()) {\n            return this;\n        } else {\n            var terms = _.invoke(this.collect().terms, \"asPositiveFactor\");\n            return new Mul(terms).flatten();\n        }\n    },\n\n    isNegative: function() {\n        return _.any(_.invoke(this.collect().terms, \"isNegative\"));\n    },\n\n    fold: function() {\n        return Mul.fold(this);\n    },\n\n    negate: function() {\n        var isNum = function(expr) { return expr instanceof Num; };\n        if (_.any(this.terms, isNum)) {\n            var num = _.find(this.terms, isNum);\n            return this.replace(num, num.negate());\n        } else {\n            return new Mul([Num.Neg].concat(this.terms));\n        }\n    }\n});\n\n// static methods for the sequence types\n_.each([Add, Mul], function(type) {\n    _.extend(type, {\n        // create a new sequence unless left is already one (returns a copy)\n        createOrAppend: function(left, right) {\n            if (left instanceof type) {\n                return new type(left.terms.concat(right));\n            } else {\n                return new type(left, right);\n            }\n        }\n    });\n});\n\n_.extend(Mul, {\n    // negative signs should be folded into numbers whenever possible\n    // never fold into a Num that's already negative or a Mul that has a negative Num\n    // an optional hint is kept track of to properly render user input\n    // an empty hint means negation\n    handleNegative: function(expr, hint) {\n        if (expr instanceof Num && expr.n > 0) {\n            // e.g. - 2 -> -2\n            var negated = expr.negate();\n            // TODO(alex): rework hint system so that this isn't necessary\n            negated.hints = expr.hints;\n            return negated.addHint(hint);\n        } else if (expr instanceof Mul) {\n            // e.g. - x*2*3 -> x*-2*3\n            // e.g. - x*y -> -1*x*y\n            // e.g. - x*-2 -> -1*x*-2\n            return expr.factorIn(hint);\n        } else {\n            // e.g. - x -> -1*x\n            return new Mul(Num.negativeOne(hint), expr);\n        }\n    },\n\n    // division can create either a Rational or a Mul\n    handleDivide: function(left, right) {\n\n        // dividing by a Mul is the same as repeated division by its terms\n        if (right instanceof Mul) {\n            var first = Mul.handleDivide(left, right.terms[0]);\n            var rest = new Mul(_.rest(right.terms)).flatten();\n            return Mul.handleDivide(first, rest);\n        }\n\n        var isInt = function(expr) { return expr instanceof Int; };\n        var isRational = function(expr) { return expr instanceof Rational; };\n\n        // for simplification purposes, fold Ints into Rationals if possible\n        // e.g. 3x / 4 -> 3/4 * x (will still render as 3x/4)\n        if (isInt(right) && left instanceof Mul && _.any(left.terms, isInt)) {\n\n            // search from the right\n            var reversed = left.terms.slice().reverse();\n            var num = _.find(reversed, isRational);\n\n            if (!isInt(num)) {\n                return new Mul(left.terms.concat([new Rational(1, right.n).addHint(\"fraction\")]));\n            }\n\n            var rational = new Rational(num.n, right.n);\n            rational.hints = num.hints;\n\n            // in the case of something like 1/3 * 6/8, we want the\n            // 6/8 to be considered a fraction, not just a division\n            if (num === reversed[0]) {\n                rational = rational.addHint(\"fraction\");\n            }\n\n            var result;\n            if (num.n < 0 && right.n < 0) {\n                rational.d = -rational.d;\n                return left.replace(num, [Num.Neg, rational]);\n            } else {\n                return left.replace(num, rational);\n            }\n        }\n\n        var divide = function(a, b) {\n            if (b instanceof Int) {\n                if (a instanceof Int) {\n                    if (a.n < 0 && b.n < 0) {\n                        // e.g. -2 / -3 -> -1*-2/3\n                        return [Num.Neg, new Rational(a.n, -b.n).addHint(\"fraction\")];\n                    } else {\n                        // e.g. 2 / 3 -> 2/3\n                        // e.g. -2 / 3 -> -2/3\n                        // e.g. 2 / -3 -> -2/3\n                        return [new Rational(a.n, b.n).addHint(\"fraction\")];\n                    }\n                } else {\n                    // e.g. x / 3 -> x*1/3\n                    // e.g. x / -3 -> x*-1/3\n                    var inverse = new Rational(1, b.eval());\n                    if (b.eval() < 0) {\n                        return [a, inverse.addHint(\"negate\")];\n                    } else {\n                        return [a, inverse];\n                    }\n                }\n            } else {\n                var pow;\n\n                if (b instanceof Trig && b.exp) {\n                    // e.g. sin^2(x) -> sin(x)^2\n                    var exp = b.exp;\n                    b.exp = undefined;\n                    b = new Pow(b, exp);\n                }\n\n                if (b instanceof Pow) {\n                    // e.g. (x^2) ^ -1 -> x^-2\n                    // e.g. (x^y) ^ -1 -> x^(-1*y)\n                    // e.g. (x^(yz)) ^ -1 -> x^(-1*y*z)\n                    pow = new Pow(b.base, Mul.handleNegative(b.exp, \"divide\"));\n                } else {\n                    // e.g. x ^ -1 -> x^-1\n                    pow = new Pow(b, Num.Div);\n                }\n\n                if (a instanceof Int && a.n === 1) {\n                    // e.g. 1 / x -> x^-1\n                    return [pow];\n                } else {\n                    // e.g. 2 / x -> 2*x^-1\n                    return [a, pow];\n                }\n            }\n        };\n\n        if (left instanceof Mul) {\n            var divided = divide(_.last(left.terms), right);\n            return new Mul(_.initial(left.terms).concat(divided));\n        } else {\n            var divided = divide(left, right);\n            return new Mul(divided).flatten();\n        }\n    },\n\n    // fold negative signs into numbers if possible\n    // negative signs are not the same as multiplying by negative one!\n    // e.g. -x      ->  -1*x    simplified\n    // e.g. -2*x    ->  -2*x    simplified\n    // e.g. -x*2    ->  -1*x*2  not simplified -> x*-2 simplified\n    // e.g. -1*x*2  ->  -1*x*2  not simplified\n\n    // also fold multiplicative terms into open Trig and Log nodes\n    // e.g. (sin x)*x -> sin(x)*x\n    // e.g. sin(x)*x -> sin(x)*x\n    // e.g. sin(x)*(x) -> sin(x)*x\n    // e.g. sin(x)*sin(y) -> sin(x)*sin(y)\n    fold: function(expr) {\n        if (expr instanceof Mul) {\n            // assuming that this will be second to last\n            var trigLog = _.find(_.initial(expr.terms), function(term) {\n                return (term instanceof Trig || term instanceof Log) && term.hints.open;\n            });\n            var index = _.indexOf(expr.terms, trigLog);\n\n            if (trigLog) {\n                var last = _.last(expr.terms);\n                if (trigLog.hints.parens || last.hints.parens ||\n                          last.has(Trig) || last.has(Log)) {\n                    trigLog.hints.open = false;\n                } else {\n                    var newTrigLog;\n                    if (trigLog instanceof Trig) {\n                        newTrigLog = Trig.create([trigLog.type, trigLog.exp], Mul.createOrAppend(trigLog.arg, last).fold());\n                    } else {\n                        newTrigLog = Log.create(trigLog.base, Mul.createOrAppend(trigLog.power, last).fold());\n                    }\n\n                    if (index === 0) {\n                        return newTrigLog;\n                    } else {\n                        return new Mul(expr.terms.slice(0, index).concat(newTrigLog)).fold();\n                    }\n                }\n            }\n\n            var partitioned = expr.partition();\n            var numbers = partitioned[0].terms;\n\n            var pos = function(num) { return num.n > 0; };\n            var neg = function(num) { return num.n === -1 && num.hints.negate; };\n            var posOrNeg = function(num) { return pos(num) || neg(num); };\n\n            if (numbers.length > 1 &&\n                _.some(numbers, neg) &&\n                _.some(numbers, pos) &&\n                _.every(numbers, posOrNeg)) {\n\n                var firstNeg = _.indexOf(expr.terms, _.find(expr.terms, neg));\n                var firstNum = _.indexOf(expr.terms, _.find(expr.terms, pos));\n\n                // e.g. -x*2 -> x*-2\n                if (firstNeg < firstNum) {\n                    return expr.replace(firstNum,\n                                        expr.terms[firstNum].negate())\n                               .remove(firstNeg);\n                }\n            }\n        }\n\n        // in all other cases, make no change\n        return expr;\n    }\n});\n\n\n/* exponentiation */\nfunction Pow(base, exp) { this.base = base; this.exp = exp; }\nPow.prototype = new Expr();\n\n_.extend(Pow.prototype, {\n    func: Pow,\n    args: function() { return [this.base, this.exp]; },\n\n    eval: function(vars, options) {\n        var evaledBase = this.base.eval(vars, options);\n        var evaledExp = this.exp.eval(vars, options);\n\n        // Math.pow unequivocally returns NaN when provided with both a\n        // negative base and a fractional exponent. However, in some cases, we\n        // know that our exponent is actually valid for use with negative\n        // bases (e.g., (-5)^(1/3)).\n        //\n        // Here, we explicitly check for such cases. We really only handle a\n        // limited subset (by requiring that the exponent is rational with an\n        // odd denominator), but it's still useful.\n        //   See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n        if (evaledBase < 0) {\n            var simplifiedExp = this.exp.simplify();\n\n            // If Float, convert to a Rational to enable the logic below\n            if (simplifiedExp instanceof Float) {\n                var num = simplifiedExp.n;\n                var decimals = (num - num.toFixed()).toString().length - 2;\n                var denominator = Math.pow(10, decimals);\n                var rationalExp = new Rational(num * denominator, denominator);\n                simplifiedExp = rationalExp.simplify();\n            }\n            if (simplifiedExp instanceof Rational) {\n                var oddDenominator = Math.abs(simplifiedExp.d) % 2 === 1;\n                if (oddDenominator) {\n                    var oddNumerator = Math.abs(simplifiedExp.n) % 2 === 1;\n                    var sign = (oddNumerator) ? -1 : 1;\n                    return sign * Math.pow(-1 * evaledBase, evaledExp);\n                }\n            }\n        }\n        return Math.pow(evaledBase, evaledExp);\n    },\n\n    getUnits: function() {\n        return this.base.getUnits().map(function(unit) {\n            return {\n                unit: unit.unit,\n                pow: unit.pow * this.exp.n\n            };\n        }.bind(this));\n    },\n\n    codegen: function() {\n        return \"Math.pow(\" + this.base.codegen() +\n            \", \" + this.exp.codegen() + \")\";\n    },\n\n    print: function() {\n        var base = this.base.print();\n        if (this.base instanceof Seq || this.base instanceof Pow) {\n            base = \"(\" + base + \")\";\n        }\n        return base + \"^(\" + this.exp.print() + \")\";\n    },\n\n    tex: function() {\n        if (this.isDivide()) {\n\n            // e.g. x ^ -1 w/hint -> 1/x\n            return \"\\\\frac{1}{\" + this.asDivide().tex() + \"}\";\n\n        } else if (this.isRoot()) {\n\n            if (this.exp.n !== 1) {\n                error(\"Node marked with hint 'root' does not have exponent \" +\n                      \"of form 1/x.\");\n            }\n\n            if (this.exp.d === 2) {\n                // e.g. x ^ 1/2 w/hint -> sqrt{x}\n                return \"\\\\sqrt{\" + this.base.tex() + \"}\";\n            } else {\n                // e.g. x ^ 1/y w/hint -> sqrt[y]{x}\n                return \"\\\\sqrt[\" + this.exp.d + \"]{\" + this.base.tex() + \"}\";\n            }\n\n        } else if (this.base instanceof Trig && !this.base.isInverse() &&\n            this.exp instanceof Num && this.exp.isSimple() &&\n            this.exp.eval() >= 0) {\n\n            // e.g sin(x) ^ 2 -> sin^2(x)\n            var split = this.base.tex({split: true});\n            return split[0] + \"^{\" + this.exp.tex() + \"}\" + split[1];\n\n        } else {\n\n            // e.g. x ^ y -> x^y\n            var base = this.base.tex();\n            if (this.base instanceof Seq || this.base instanceof Pow ||\n                (this.base instanceof Num && !this.base.isSimple())) {\n                // e.g. a+b ^ c -> (a+b)^c\n                base = \"(\" + base + \")\";\n            } else if (this.base instanceof Trig || this.base instanceof Log) {\n                // e.g. ln(x) ^ 2 -> [ln(x)]^2\n                base = \"[\" + base + \"]\";\n            }\n            return base + \"^{\" + this.exp.tex() + \"}\";\n        }\n    },\n\n    needsExplicitMul: function() {\n        return this.isRoot() ? false : this.base.needsExplicitMul();\n    },\n\n    expand: function() {\n        var pow = this.recurse(\"expand\");\n\n        if (pow.base instanceof Mul) {\n            // e.g. (ab)^c -> a^c*b^c\n\n            var terms = _.map(pow.base.terms, function(term) {\n                return new Pow(term, pow.exp);\n            });\n\n            return new Mul(terms).expand();\n\n        } else if (pow.base instanceof Add && pow.exp instanceof Int && pow.exp.abs().eval() > 1) {\n            // e.g. (a+b)^2 -> a*a+a*b+a*b+b*b\n            // e.g. (a+b)^-2 -> (a*a+a*b+a*b+b*b)^-1\n\n            var positive = pow.exp.eval() > 0;\n            var n = pow.exp.abs().eval();\n\n            var signed = function(mul) {\n                return positive ? mul : new Pow(mul, Num.Div);\n            };\n\n            // compute and cache powers of 2 up to n\n            var cache = { 1: pow.base };\n            for (var i = 2; i <= n; i *= 2) {\n                var mul = new Mul(cache[i / 2], cache[i / 2]);\n                cache[i] = mul.expand().collect();\n            }\n\n            // if n is a power of 2, you're done!\n            if (_.has(cache, n)) {\n                return signed(cache[n]);\n            }\n\n            // otherwise decompose n into powers of 2 ...\n            var indices = _.map(n.toString(2).split(\"\"), function(str, i, list) {\n                return Number(str) * Math.pow(2, list.length - i - 1);\n            });\n            indices = _.without(indices, 0);\n\n            // ... then combine\n            var mul = new Mul(_.pick(cache, indices)).expand().collect();\n            return signed(mul);\n\n        } else if (pow.exp instanceof Add) { // DEFINITELY want behind super-simplify() flag\n            // e.g. x^(a+b) -> x^a*x^b\n\n            var terms = _.map(pow.exp.terms, function(term) {\n                return new Pow(pow.base, term).expand();\n            });\n\n            return new Mul(terms).expand();\n        } else {\n            return pow;\n        }\n    },\n\n    factor: function() {\n        var pow = this.recurse(\"factor\");\n        if (pow.base instanceof Mul) {\n            var terms = _.map(pow.base.terms, function(term) {\n                if (term instanceof Int && pow.exp.equals(Num.Div)) {\n                    // Anything that can be a Rational should be a Rational\n                    // e.g. 2^(-1) -> 1/2\n                    return new Rational(1, term.n);\n                } else {\n                    return new Pow(term, pow.exp);\n                }\n            });\n            return new Mul(terms);\n        } else {\n            return pow;\n        }\n    },\n\n    collect: function(options) {\n\n        if (this.base instanceof Pow) {\n            // collect this first to avoid having to deal with float precision\n            // e.g. sqrt(2)^2 -> 2, not 2.0000000000000004\n            // e.g. (x^y)^z -> x^(yz)\n            var base = this.base.base;\n            var exp = Mul.createOrAppend(this.base.exp, this.exp);\n            return new Pow(base, exp).collect(options);\n        }\n\n        var pow = this.recurse(\"collect\", options);\n\n        var isSimilarLog = function(term) {\n            return term instanceof Log && term.base.equals(pow.base);\n        };\n\n        if (pow.exp instanceof Num &&\n            pow.exp.eval() === 0) {\n\n            // e.g. x^0 -> 1\n            return Num.One;\n\n        } else if (pow.exp instanceof Num &&\n            pow.exp.eval() === 1) {\n\n            // e.g. x^1 -> x\n            return pow.base;\n\n        } else if (isSimilarLog(pow.exp)) {\n\n            // e.g. b^(log_b(x)) -> x\n            return pow.exp.power;\n\n        } else if (pow.exp instanceof Mul &&\n            _.any(pow.exp.terms, isSimilarLog)) {\n\n            // e.g. b^(2*y*log_b(x)) -> x^(2*y)\n            var log = _.find(pow.exp.terms, isSimilarLog);\n            var base = log.power;\n            var exp = pow.exp.remove(log).flatten();\n            return new Pow(base, exp).collect(options);\n\n        } else if (pow.base instanceof Num &&\n            pow.exp instanceof Num) {\n\n            // TODO(alex): Consider encapsualting this logic (and similar logic\n            // elsewhere) into a separate Decimal class for user-entered floats\n            if (options && options.preciseFloats) {\n                // Avoid creating an imprecise float\n                // e.g. 23^1.5 -> 12167^0.5, not ~110.304\n\n                // If you take the root as specified by the denominator and\n                // end up with more digits after the decimal point,\n                // the result is imprecise. This works for rationals as well\n                // as floats, but ideally rationals should be pre-processed\n                // e.g. (1/27)^(1/3) -> 1/3 to avoid most cases.\n                // TODO(alex): Catch such cases and avoid converting to floats.\n                var exp = pow.exp.asRational();\n                var decimalsInBase = pow.base.getDecimalPlaces();\n                var root = new Pow(pow.base, new Rational(1, exp.d));\n                var decimalsInRoot = root.collect().getDecimalPlaces();\n\n                if (decimalsInRoot > decimalsInBase) {\n                    // Collecting over this denominator would result in an\n                    // imprecise float, so avoid doing so.\n                    var newBase = new Pow(pow.base, new Int(exp.n)).collect();\n                    return new Pow(newBase, new Rational(1, exp.d));\n                }\n            }\n\n            // e.g. 4^1.5 -> 8\n            return pow.base.raiseToThe(pow.exp, options);\n        } else {\n            return pow;\n        }\n    },\n\n    // checks whether this Pow represents user-entered division\n    isDivide: function() {\n        var isDiv = function(arg) { return arg instanceof Num && arg.hints.divide; };\n        return isDiv(this.exp) || (this.exp instanceof Mul && _.any(this.exp.terms, isDiv));\n    },\n\n    // assuming this Pow represents user-entered division, returns the denominator\n    asDivide: function() {\n        if (this.exp instanceof Num) {\n            if (this.exp.eval() === -1) {\n                return this.base;\n            } else {\n                var negated = this.exp.negate();\n                negated.hints = _.clone(this.exp.hints);\n                negated.hints.divide = false;\n                return new Pow(this.base, negated);\n            }\n        } else if (this.exp instanceof Mul) {\n            return new Pow(this.base, this.exp.factorOut());\n        } else {\n            error(\"called asDivide() on an Expr that wasn't a Num or Mul\");\n        }\n    },\n\n    isRoot: function() {\n        return this.exp instanceof Rational && this.exp.hints.root;\n    },\n\n    isSquaredTrig: function() {\n        return this.base instanceof Trig && !this.base.isInverse() &&\n            this.exp instanceof Num && this.exp.eval() === 2;\n    },\n\n    // extract whatever denominator makes sense, ignoring hints\n    // if negative exponent, will recursively include the base's denominator as well\n    getDenominator: function() {\n        if (this.exp instanceof Num && this.exp.eval() === -1) {\n            return Mul.createOrAppend(this.base, this.base.getDenominator()).flatten();\n        } else if (this.exp.isNegative()) {\n            var pow = new Pow(this.base, Mul.handleNegative(this.exp).collect());\n            return Mul.createOrAppend(pow, pow.collect().getDenominator()).flatten();\n        } else if (this.base instanceof Num) {\n            return new Pow(this.base.getDenominator(), this.exp).collect();\n        } else {\n            return Num.One;\n        }\n    },\n\n    findGCD: function(factor) {\n        var base, exp;\n        if (factor instanceof Pow) {\n            base = factor.base;\n            exp = factor.exp;\n        } else {\n            base = factor;\n            exp = Num.One;\n        }\n\n        // GCD is only relevant if same base\n        if (this.base.equals(base)) {\n            if (this.exp.equals(exp)) {\n                // exact match\n                // e.g. GCD(x^y^z, x^y^z) -> x^y^z\n                return this;\n            } else if (this.exp instanceof Num && exp instanceof Num) {\n                // two numerical exponents\n                // e.g. GCD(x^3, x^2) -> x^2\n                return new Pow(this.base, Num.min(this.exp, exp)).collect();\n            } else if (this.exp instanceof Num || exp instanceof Num) {\n                // one numerical exponent\n                // e.g. GCD(x^2, x^y) -> 1\n                return Num.One;\n            }\n\n            var expA = this.exp.asMul().partition();\n            var expB = exp.asMul().partition();\n\n            if (expA[1].equals(expB[1])) {\n                // exponents match except for coefficient\n                // e.g. GCD(x^3y, x^y) -> x^y\n                var coefficient = Num.min(expA[0].reduce(), expB[0].reduce());\n                var mul = new Mul(coefficient, expA[1].flatten()).flatten();\n                return new Pow(base, mul).collect();\n            }\n        }\n\n        return Num.One;\n    },\n\n    isPositive: function() {\n        if (this.base.isPositive()) {\n            return true;\n        }\n\n        var exp = this.exp.simplify();\n        return exp instanceof Int && exp.eval() % 2 === 0;\n    },\n\n    asPositiveFactor: function() {\n        if (this.isPositive()) {\n            return this;\n        } else {\n            var exp = this.exp.simplify();\n            if (exp instanceof Int) {\n                var n = exp.eval();\n                if (n > 2) {\n                    // e.g. x^3 -> x^2\n                    return new Pow(this.base, new Int(n-1));\n                } else if (n < -2) {\n                    // e.g. x^-3 -> x^-2\n                    return new Pow(this.base, new Int(n+1));\n                }\n            }\n            return Num.One;\n        }\n    }\n});\n\n_.extend(Pow, {\n    sqrt: function(arg) {\n        return new Pow(arg, Num.Sqrt);\n    },\n\n    nthroot: function(radicand, degree) {\n        var exp = Mul.fold(Mul.handleDivide(new Int(1), degree));\n\n        // FIXME(johnsullivan): If oneOverDegree ends up being a pow object,\n        //     this \"root\" hint is lost between here and when tex() is called.\n        return new Pow(radicand, exp.addHint(\"root\"));\n    },\n});\n\n\n/* logarithm */\nfunction Log(base, power) { this.base = base; this.power = power; }\nLog.prototype = new Expr();\n\n_.extend(Log.prototype, {\n    func: Log,\n    args: function() { return [this.base, this.power]; },\n\n    eval: function(vars, options) {\n        return Math.log(this.power.eval(vars, options)) / Math.log(this.base.eval(vars, options));\n    },\n\n    codegen: function() {\n        return \"(Math.log(\" + this.power.codegen() +\n            \") / Math.log(\" + this.base.codegen() + \"))\";\n    },\n\n    print: function() {\n        var power = \"(\" + this.power.print() + \")\";\n        if (this.isNatural()) {\n            return \"ln\" + power;\n        } else {\n            return \"log_(\" + this.base.print() + \") \" + power;\n        }\n    },\n\n    tex: function() {\n        var power = \"(\" + this.power.tex() + \")\";\n        if (this.isNatural()) {\n            return \"\\\\ln\" + power;\n        } else {\n            return \"\\\\log_{\" + this.base.tex() + \"}\" + power;\n        }\n    },\n\n    collect: function(options) {\n        var log = this.recurse(\"collect\", options);\n\n        if (log.power instanceof Num && log.power.eval() === 1) {\n\n            // e.g. ln(1) -> 0\n            return Num.Zero;\n\n        } else if (log.base.equals(log.power)) {\n\n            // e.g. log_b(b) -> 1\n            return Num.One;\n\n        } else if (log.power instanceof Pow &&\n            log.power.base.equals(log.base)) {\n\n            // e.g. log_b(b^x) -> x\n            return log.power.exp;\n        } else {\n            return log;\n        }\n    },\n\n    expand: function() {\n        var log = this.recurse(\"expand\");\n\n        if (log.power instanceof Mul) {  // might want behind super-simplify() flag\n            // e.g. ln(xy) -> ln(x) + ln(y)\n\n            var terms = _.map(log.power.terms, function(term) {\n                // need to expand again in case new log powers are Pows\n                return new Log(log.base, term).expand();\n            });\n\n            return new Add(terms);\n\n        } else if (log.power instanceof Pow) {\n            // e.g. ln(x^y) -> y*ln(x)\n\n            return new Mul(log.power.exp, new Log(log.base, log.power.base).expand()).flatten();\n        } else if (!log.isNatural()) {\n            // e.g. log_b(x) -> ln(x)/ln(b)\n\n            return Mul.handleDivide(new Log(Const.e, log.power), new Log(Const.e, log.base));\n        } else {\n            return log;\n        }\n    },\n\n    hints: _.extend(Log.prototype.hints, {\n        open: false\n    }),\n\n    isPositive: function() {\n        var log = this.collect();\n\n        if (log.base instanceof Num &&\n            log.power instanceof Num) {\n            return this.eval() > 0;\n        } else {\n            return false;\n        }\n    },\n\n    needsExplicitMul: function() { return false; },\n\n    isNatural: function() { return this.base.equals(Const.e); }\n});\n\n_.extend(Log, {\n    natural: function() { return Const.e; },\n    common: function() { return Num.Ten; },\n\n    create: function(base, power) {\n        var log = new Log(base, power);\n        if (!power.hints.parens) {\n            log = log.addHint(\"open\");\n        }\n        return log;\n    }\n});\n\n\n/* trigonometric functions */\nfunction Trig(type, arg) { this.type = type; this.arg = arg; }\nTrig.prototype = new Expr();\n\n_.extend(Trig.prototype, {\n    func: Trig,\n    args: function() { return [this.type, this.arg]; },\n\n    functions: {\n        sin: {\n            eval: Math.sin,\n            codegen: \"Math.sin((\",\n            tex: \"\\\\sin\",\n            expand: function() { return this; }\n        },\n        cos: {\n            eval: Math.cos,\n            codegen: \"Math.cos((\",\n            tex: \"\\\\cos\",\n            expand: function() { return this; }\n        },\n        tan: {\n            eval: Math.tan,\n            codegen: \"Math.tan((\",\n            tex: \"\\\\tan\",\n            expand: function() {\n                return Mul.handleDivide(Trig.sin(this.arg), Trig.cos(this.arg));\n            }\n        },\n        csc: {\n            eval: function(arg) { return 1 / Math.sin(arg); },\n            codegen: \"(1/Math.sin(\",\n            tex: \"\\\\csc\",\n            expand: function() {\n                return Mul.handleDivide(Num.One, Trig.sin(this.arg));\n            }\n        },\n        sec: {\n            eval: function(arg) { return 1 / Math.cos(arg); },\n            codegen: \"(1/Math.cos(\",\n            tex: \"\\\\sec\",\n            expand: function() {\n                return Mul.handleDivide(Num.One, Trig.cos(this.arg));\n            }\n        },\n        cot: {\n            eval: function(arg) { return 1 / Math.tan(arg); },\n            codegen: \"(1/Math.tan(\",\n            tex: \"\\\\cot\",\n            expand: function() {\n                return Mul.handleDivide(Trig.cos(this.arg), Trig.sin(this.arg));\n            }\n        },\n        arcsin: {\n            eval: Math.asin,\n            codegen: \"Math.asin((\",\n            tex: \"\\\\arcsin\"\n        },\n        arccos: {\n            eval: Math.acos,\n            codegen: \"Math.acos((\",\n            tex: \"\\\\arccos\"\n        },\n        arctan: {\n            eval: Math.atan,\n            codegen: \"Math.atan((\",\n            tex: \"\\\\arctan\"\n        },\n        arccsc: {\n            eval: function(arg) { return Math.asin(1 / arg); },\n            codegen: \"Math.asin(1/(\",\n            tex: \"\\\\operatorname{arccsc}\"\n        },\n        arcsec: {\n            eval: function(arg) { return Math.acos(1 / arg); },\n            codegen: \"Math.acos(1/(\",\n            tex: \"\\\\operatorname{arcsec}\"\n        },\n        arccot: {\n            eval: function(arg) { return Math.atan(1 / arg); },\n            codegen: \"Math.atan(1/(\",\n            tex: \"\\\\operatorname{arccot}\"\n        },\n        sinh: {\n            eval: function(arg) {\n                return (Math.exp(arg) - Math.exp(-arg)) / 2;\n            },\n            codegen: function(argStr) {\n                return \"((Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \"))) / 2)\";\n            },\n            tex: \"\\\\sinh\",\n            expand: function() { return this; }\n        },\n        cosh: {\n            eval: function(arg) {\n                return (Math.exp(arg) + Math.exp(-arg)) / 2;\n            },\n            codegen: function(argStr) {\n                return \"((Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \"))) / 2)\";\n            },\n            tex: \"\\\\cosh\",\n            expand: function() { return this; }\n        },\n        tanh: {\n            eval: function(arg) {\n                return (Math.exp(arg) - Math.exp(-arg)) / (Math.exp(arg) + Math.exp(-arg));\n            },\n            codegen: function(argStr) {\n                return \"(\" +\n                    \"(Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \")))\" +\n                    \" / \" +\n                    \"(Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \")))\" +\n                    \")\";\n            },\n            tex: \"\\\\tanh\",\n            expand: function() {\n                return Mul.handleDivide(Trig.sinh(this.arg), Trig.cosh(this.arg));\n            }\n        },\n        csch: {\n            eval: function(arg) { return 2 / (Math.exp(arg) - Math.exp(-arg)); },\n            codegen: function(argStr) {\n                return \"(2 / (Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \"))))\";\n            },\n            tex: \"\\\\csch\",\n            expand: function() {\n                return Mul.handleDivide(Num.One, Trig.sinh(this.arg));\n            }\n        },\n        sech: {\n            eval: function(arg) { return 2 / (Math.exp(arg) + Math.exp(-arg)); },\n            codegen: function(argStr) {\n                return \"(2 / (Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \"))))\";\n            },\n            tex: \"\\\\sech\",\n            expand: function() {\n                return Mul.handleDivide(Num.One, Trig.cosh(this.arg));\n            }\n        },\n        coth: {\n            eval: function(arg) {\n                return (Math.exp(arg) + Math.exp(-arg)) / (Math.exp(arg) - Math.exp(-arg));\n            },\n            codegen: function(argStr) {\n                return \"(\" +\n                    \"(Math.exp(\" + argStr + \") + Math.exp(-(\" + argStr + \")))\" +\n                    \" / \" +\n                    \"(Math.exp(\" + argStr + \") - Math.exp(-(\" + argStr + \")))\" +\n                    \")\";\n            },\n            tex: \"\\\\coth\",\n            expand: function() {\n                return Mul.handleDivide(Trig.cosh(this.arg), Trig.sinh(this.arg));\n            }\n        },\n    },\n\n    isEven: function() {\n        return _.contains([\"cos\", \"sec\"], this.type);\n    },\n\n    isInverse: function() {\n        return this.type.indexOf(\"arc\") === 0;\n    },\n\n    isBasic: function() {\n        return _.contains([\"sin\", \"cos\"], this.type);\n    },\n\n    eval: function(vars, options) {\n        var func = this.functions[this.type].eval;\n        var arg = this.arg.eval(vars, options);\n        return func(arg);\n    },\n\n    codegen: function() {\n        var func = this.functions[this.type].codegen;\n        if (typeof func === \"function\") {\n            return func(this.arg.codegen());\n        } else if (typeof func === \"string\") {\n            return func + this.arg.codegen() + \"))\";\n        } else {\n            throw new Error(\"codegen not implemented for \" + this.type);\n        }\n    },\n\n    print: function() {\n        return this.type + \"(\" + this.arg.print() + \")\";\n    },\n\n    tex: function(options) {\n        var func = this.functions[this.type].tex;\n        var arg = \"(\" + this.arg.tex() + \")\";\n        return (options && options.split) ? [func, arg] : func + arg;\n    },\n\n    hints: _.extend(Trig.prototype.hints, {\n        open: false\n    }),\n\n    isPositive: function() {\n        var trig = this.collect();\n\n        if (trig.arg instanceof Num) {\n            return this.eval() > 0;\n        } else {\n            return false;\n        }\n    },\n\n    completeParse: function() {\n        if (this.exp) {\n            var pow = new Pow(this, this.exp);\n            this.exp = undefined;\n            return pow;\n        } else {\n            return this;\n        }\n    },\n\n    // TODO(alex): does every new node type need to redefine these?\n    needsExplicitMul: function() { return false; },\n\n    expand: function() {\n        var trig = this.recurse(\"expand\");\n        if (!trig.isInverse()) {\n            // e.g. tan(x) -> sin(x)/cos(x)\n            var expand = trig.functions[trig.type].expand;\n            return _.bind(expand, trig)();\n        } else {\n            return trig;\n        }\n    },\n\n    collect: function(options) {\n        var trig = this.recurse(\"collect\", options);\n        if (!trig.isInverse() && trig.arg.isNegative()) {\n            var arg;\n            if (trig.arg instanceof Num) {\n                arg = trig.arg.abs();\n            } else {\n                arg = Mul.handleDivide(trig.arg, Num.Neg).collect(options);\n            }\n\n            if (trig.isEven()) {\n                // e.g. cos(-x) -> cos(x)\n                return new Trig(trig.type, arg);\n\n            } else {\n                // e.g. sin(-x) -> -sin(x)\n                return new Mul(Num.Neg, new Trig(trig.type, arg));\n            }\n        } else {\n            return trig;\n        }\n    }\n});\n\n_.extend(Trig, {\n    create: function(pair, arg) {\n        var type = pair[0];\n        var exp = pair[1];\n\n        if (exp && exp.equals(Num.Neg)) {\n            // e.g. sin^-1(x) -> arcsin(x)\n            type = \"arc\" + type;\n            exp = undefined;\n        }\n\n        var trig = new Trig(type, arg);\n        if (!arg.hints.parens) {\n            trig = trig.addHint(\"open\");\n        }\n\n        if (exp) {\n            trig.exp = exp;\n        }\n\n        return trig;\n    },\n\n    sin: function(arg) {\n        return new Trig(\"sin\", arg);\n    },\n\n    cos: function(arg) {\n        return new Trig(\"cos\", arg);\n    },\n\n    sinh: function(arg) {\n        return new Trig(\"sinh\", arg);\n    },\n\n    cosh: function(arg) {\n        return new Trig(\"cosh\", arg);\n    }\n});\n\n\nfunction Abs(arg) { this.arg = arg; }\nAbs.prototype = new Expr();\n\n_.extend(Abs.prototype, {\n    func: Abs,\n    args: function() { return [this.arg]; },\n    eval: function(vars, options) { return Math.abs(this.arg.eval(vars, options)); },\n    codegen: function() { return \"Math.abs(\" + this.arg.codegen() + \")\"; },\n    print: function() { return \"abs(\" + this.arg.print() + \")\"; },\n\n    tex: function() {\n        return \"\\\\left|\" + this.arg.tex() + \"\\\\right|\";\n    },\n\n    collect: function(options) {\n        var abs = this.recurse(\"collect\", options);\n\n        if (abs.arg.isPositive()) {\n            // e.g. |2^x| -> 2^x\n            return abs.arg;\n        } else if (abs.arg instanceof Num) {\n            // e.g. |-2| -> 2\n            return abs.arg.abs();\n        } else if (abs.arg instanceof Mul) {\n            // e.g. |-2*pi*x| -> 2*pi*|x|\n            var terms = _.groupBy(abs.arg.terms, function(term) {\n                if (term.isPositive()) {\n                    return \"positive\";\n                } else if (term instanceof Num) {\n                    return \"number\";\n                } else {\n                    return \"other\";\n                }\n            });\n\n            var positives = terms.positive.concat(_.invoke(terms.number, \"abs\"));\n\n            if (terms.other.length) {\n                positives.push(new Abs(new Mul(terms.other).flatten()));\n            }\n\n            return new Mul(positives).flatten();\n        } else {\n            return abs;\n        }\n    },\n\n    // this should definitely be behind a super-simplify flag\n    expand: function() {\n        var abs = this.recurse(\"expand\");\n\n        if (abs.arg instanceof Mul) {\n            // e.g. |xyz| -> |x|*|y|*|z|\n            var terms = _.map(abs.arg.terms, function(term) {\n                return new Abs(term);\n            });\n            return new Mul(terms);\n        } else {\n            return abs;\n        }\n    },\n\n    isPositive: function() { return true; }\n});\n\n\n/* equation */\nfunction Eq(left, type, right) {\n    this.left = left;\n    this.type = type;\n    this.right = right;\n}\nEq.prototype = new Expr();\n\n_.extend(Eq.prototype, {\n    func: Eq,\n    args: function() { return [this.left, this.type, this.right]; },\n\n    needsExplicitMul: function() { return false; },\n\n    print: function() {\n        return this.left.print() + this.type + this.right.print();\n    },\n\n    signs: {\n        \"=\": \" = \",\n        \"<\": \" < \",\n        \">\": \" > \",\n        \"<>\": \" \\\\ne \",\n        \"<=\": \" \\\\le \",\n        \">=\": \" \\\\ge \"\n    },\n\n    tex: function() {\n        return this.left.tex() + this.signs[this.type] + this.right.tex();\n    },\n\n    normalize: function() {\n        var eq = this.recurse(\"normalize\");\n\n        if (_.contains([\">\", \">=\"], eq.type)) {\n            // inequalities should have the smaller side on the left\n            return new Eq(eq.right, eq.type.replace(\">\", \"<\"), eq.left);\n        } else {\n            return eq;\n        }\n    },\n\n    // convert this equation to an expression set to zero\n    // the expression is normalized to a canonical form\n    // e.g. y/2=x/4 -> y/2-x/4(=0) -> 2y-x(=0)\n    // unless unfactored is specified, will then divide through\n    asExpr: function(unfactored) {\n        var isZero = function(expr) {\n            return expr instanceof Num && expr.isSimple() && expr.eval() === 0;\n        };\n\n        // first convert to a sequence of additive terms\n        var terms = [];\n\n        if (this.left instanceof Add) {\n            terms = _.clone(this.left.terms);\n        } else if (!isZero(this.left)) {\n            terms = [this.left];\n        }\n\n        if (this.right instanceof Add) {\n            terms = terms.concat(this.right.negate().terms);\n        } else if (!isZero(this.right)) {\n            terms.push(this.right.negate());\n        }\n\n        var isInequality = !this.isEquality();\n\n        // Collect over each term individually to transform simple expressions\n        // into numbers that might have denominators, taking into account\n        // float precision. We have to be very careful to not introduce any\n        // irrational floats before asExpr() returns, because by definition\n        // they do not have exact denominators...\n        terms = _.invoke(terms, \"collect\", {preciseFloats: true});\n\n        // ...and we multiply through by every denominator.\n        for (var i = 0; i < terms.length; i++) {\n            var denominator = terms[i].getDenominator();\n\n            // Can't multiply inequalities by non 100% positive factors\n            if (isInequality && !denominator.isPositive()) {\n                denominator = denominator.asPositiveFactor();\n            }\n\n            if (!denominator.equals(Num.One)) {\n                terms = _.map(terms, function(term) {\n                    return Mul.createOrAppend(term, denominator).simplify({\n                        once: true,\n                        preciseFloats: true\n                    });\n                });\n            }\n        }\n\n        var add = new Add(terms).flatten();\n        return unfactored ? add : this.divideThrough(add);\n    },\n\n    // divide through by every common factor in the expression\n    // e.g. 2y-4x(=0) -> y-2x(=0)\n    // TODO(alex): Make it an option to only divide by variables/expressions\n    // guaranteed to be nonzero\n    divideThrough: function(expr) {\n        var isInequality = !this.isEquality();\n\n        var simplified = expr.simplify({once: true});\n        var factored = simplified.factor({keepNegative: isInequality});\n\n        if (!(factored instanceof Mul)) {\n            return expr;\n        }\n\n        var terms = factored.terms;\n\n        var isAdd = function(term) { return term instanceof Add; };\n        var hasVar = function(term) { return !!term.getVars().length; };\n        var isOne = function(term) { return term.equals(Num.One); };\n\n        var grouped = _.groupBy(terms, isAdd);\n        var adds = grouped[true] || [];\n        var others = grouped[false] || [];\n\n        if (adds.length && this.isEquality()) {\n            // keep only Adds\n            // e.g. 2xy(z+1)(=0) -> z+1(=0)\n            return new Mul(adds).flatten();\n        }\n\n        var denominator = others;\n\n        if (!adds.length) {\n            // if no Adds, keep all variable terms to preserve meaning\n            // e.g. 42xyz(=0) -> xyz(=0)\n            denominator = _.reject(denominator, hasVar);\n        }\n\n        if (isInequality) {\n            // can't divide inequalities by non 100% positive factors\n            // e.g. 42x^2y(z+1)(=0) -> y(z+1)(=0)\n            denominator = _.invoke(denominator, \"asPositiveFactor\");\n        }\n\n        // don't need to divide by one\n        denominator = _.reject(denominator, isOne);\n\n        denominator = _.map(denominator, function(term) {\n            return new Pow(term, Num.Div);\n        });\n\n        var dividedResult = new Mul(terms.concat(denominator)).collect();\n\n        // If the end result is the same as the original factoring,\n        // rollback the factoring and discard all intermediate steps.\n        if (dividedResult.equals(factored)) {\n            return simplified;\n        } else {\n            return dividedResult;\n        }\n    },\n\n    isEquality: function() {\n        return _.contains([\"=\", \"<>\"], this.type);\n    },\n\n    compare: function(other) {\n        // expression comparisons are handled by Expr.compare()\n        if (!(other instanceof Eq)) {\n            return false;\n        }\n\n        var eq1 = this.normalize();\n        var eq2 = other.normalize();\n\n        if (eq1.type !== eq2.type) {\n            return false;\n        }\n\n        // need to collect to properly factor out common factors\n        // e.g x+2x=6 -> 3x=6 -> 3x-6(=0) -> x-2(=0)\n        var expr1 = eq1.divideThrough(eq1.asExpr(/* unfactored */ true).collect());\n        var expr2 = eq2.divideThrough(eq2.asExpr(/* unfactored */ true).collect());\n\n        if (eq1.isEquality()) {\n            // equals and not-equals can be subtracted either way\n            return expr1.compare(expr2) ||\n                   expr1.compare(Mul.handleNegative(expr2));\n        } else {\n            return expr1.compare(expr2);\n        }\n    },\n\n    // should only be done after compare() returns true to avoid false positives\n    sameForm: function(other) {\n        var eq1 = this.normalize();\n        var eq2 = other.normalize();\n\n        var same = eq1.left.sameForm(eq2.left) && eq1.right.sameForm(eq2.right);\n\n        if (eq1.isEquality()) {\n            // equals and not-equals can be commutative with respect to the sign\n            return same || (eq1.left.sameForm(eq2.right) && eq1.right.sameForm(eq2.left));\n        } else {\n            return same;\n        }\n    },\n\n    // we don't want to override collect because it would turn y=x into y-x(=0)\n    // instead, we ask if the equation was in that form, would it be simplified?\n    isSimplified: function() {\n        var expr = this.asExpr(/* unfactored */ true);\n        var simplified = this.divideThrough(expr).simplify();\n        return expr.equals(simplified) &&\n               this.left.isSimplified() &&\n               this.right.isSimplified();\n    }\n});\n\n_.extend(Eq.prototype, {\n    // Assumptions: Expression is of the form a+bx, and we solve for x\n    solveLinearEquationForVariable: function(variable) {\n        var expr = this.asExpr();\n        if (!expr.is(Add) || expr.terms.length !== 2) {\n            throw new Error(\"Can only handle linear equations of the form \" +\n                            \"a + bx (= 0)\");\n        }\n\n        var hasVar = function(term) {\n            return term.has(Var) && _.contains(term.getVars(), variable.symbol);\n        };\n\n        var a, b;\n\n        if (hasVar(expr.terms[0])) {\n            a = Mul.handleNegative(expr.terms[1]);\n            b = Mul.handleDivide(expr.terms[0], variable);\n        } else {\n            a = Mul.handleNegative(expr.terms[0]);\n            b = Mul.handleDivide(expr.terms[1], variable);\n        }\n\n        return Mul.handleDivide(a, b).simplify();\n    }\n});\n\n\n/* abstract symbol node */\nfunction Symbol() {}\nSymbol.prototype = new Expr();\n\n_.extend(Symbol.prototype, {\n\n    needsExplicitMul: function() { return false; },\n\n    findGCD: function(factor) {\n        if (factor instanceof Symbol || factor instanceof Num) {\n            return this.equals(factor) ? this : Num.One;\n        } else {\n            return factor.findGCD(this);\n        }\n    }\n});\n\n\n/* function variable */\nfunction Func(symbol, arg) {\n    this.symbol = symbol; this.arg = arg;\n}\nFunc.prototype = new Symbol();\n\n_.extend(Func.prototype, {\n    func: Func,\n    args: function() { return [this.symbol, this.arg]; },\n\n    print: function() {\n        return this.symbol + \"(\" + this.arg.print() + \")\";\n    },\n\n    tex: function() {\n        return this.symbol + \"(\" + this.arg.tex() + \")\";\n    },\n\n    eval: function(vars, options) {\n        var arg = this.arg;\n        var func = vars[this.symbol];\n        var newVars = _.extend(_.clone(vars), {\n            x: arg.eval(vars, options)\n        });\n        var parsedFunc = KAS.parse(func, options);\n        if (parsedFunc.parsed) {\n            return parsedFunc.expr.eval(newVars, options);\n        }\n        // If parsedFunc isn't actually parsed, return its error\n        return parsedFunc;\n    },\n\n    codegen: function() {\n        return 'vars[\"' + this.symbol + '\"](' +\n            this.arg.codegen() + ')';\n    },\n\n    getUnits: function() {\n        return this.arg.getUnits();\n    },\n\n    getVars: function(excludeFunc) {\n        if (excludeFunc) {\n            return this.arg.getVars();\n        } else {\n            return _.union(this.arg.getVars(), [this.symbol]).sort();\n        }\n    },\n\n    getConsts: function() {\n        return this.arg.getConsts();\n    },\n});\n\n\n/* variable */\nfunction Var(symbol, subscript) {\n    this.symbol = symbol;\n    this.subscript = subscript;\n}\nVar.prototype = new Symbol();\n\n_.extend(Var.prototype, {\n    func: Var,\n    args: function() { return [this.symbol, this.subscript]; },\n\n    exprArgs: function() { return []; },\n    recurse: function() { return this; },\n\n    print: function() {\n        var sub = \"\";\n        if (this.subscript) {\n            sub = \"_(\" + this.subscript.print() + \")\";\n        }\n        return this.symbol + sub;\n    },\n\n    // Provide a way to easily evalate expressions with the common case,\n    // subscripts that consist of a single number or symbol e.g. x_a or x_42\n    prettyPrint: function() {\n        var sub = this.subscript;\n        if (sub && (sub instanceof Num || sub instanceof Symbol)) {\n            return this.symbol + \"_\" + sub.print();\n        } else {\n            return this.print();\n        }\n    },\n\n    tex: function() {\n        var sub = \"\";\n        if (this.subscript) {\n            sub = \"_{\" + this.subscript.tex() + \"}\";\n        }\n        var prefix = this.symbol.length > 1 ? \"\\\\\" : \"\";\n        return prefix + this.symbol + sub;\n    },\n\n    repr: function() { return \"Var(\" + this.print() + \")\"; },\n\n    eval: function(vars, options) {\n        return vars[this.prettyPrint()];\n    },\n\n    codegen: function() {\n        return 'vars[\"' + this.prettyPrint() + '\"]';\n    },\n\n    getVars: function() { return [this.prettyPrint()]; },\n\n    isPositive: function() { return false; }\n});\n\n\n/* constant */\nfunction Const(symbol) { this.symbol = symbol; }\nConst.prototype = new Symbol();\n\n_.extend(Const.prototype, {\n    func: Const,\n    args: function() { return [this.symbol]; },\n    recurse: function() { return this; },\n\n    eval: function(vars, options) {\n        if (this.symbol === \"pi\") {\n            return Math.PI;\n        } else if (this.symbol === \"e\") {\n            return Math.E;\n        }\n    },\n\n    codegen: function() {\n        if (this.symbol === \"pi\") {\n            return \"Math.PI\";\n        } else if (this.symbol === \"e\") {\n            return \"Math.E\";\n        }\n    },\n\n    print: function() { return this.symbol; },\n\n    tex: function() {\n        if (this.symbol === \"pi\") {\n            return \"\\\\pi \";\n        } else if (this.symbol === \"e\") {\n            return \"e\";\n        }\n    },\n\n    isPositive: function() {\n        return this.eval() > 0;\n    },\n\n    abs: function() {\n        if (this.eval() > 0) {\n            return this;\n        } else {\n            return Mul.handleNegative(this);\n        }\n    },\n\n    getConsts: function() {\n        return [this.print()];\n    },\n});\n\nConst.e = new Const(\"e\");\nConst.pi = new Const(\"pi\");\n\n\n/* abstract number node */\nfunction Num() {}\nNum.prototype = new Expr();\n\n_.extend(Num.prototype, {\n    repr: function() { return this.print(); },\n    strip: function() { return this.abs(); },\n    recurse: function() { return this; },\n    codegen: function() { return this.print(); },\n\n    // takes another Num and returns a new Num\n    add: abstract,\n    mul: abstract,\n\n    // returns this Num's additive inverse\n    negate: abstract,\n\n    isSubtract: function() { return this.hints.subtract; },\n\n    // return the absolute value of the number\n    abs: abstract,\n\n    needsExplicitMul: function() { return true; },\n\n    findGCD: abstract,\n\n    isPositive: function() {\n        return this.eval() > 0;\n    },\n\n    isNegative: function() {\n        return this.eval() < 0;\n    },\n\n    asPositiveFactor: function() {\n        return this.isPositive() ? this : this.abs();\n    },\n\n    // hints for interpreting and rendering user input\n    hints: _.extend(Num.prototype.hints, {\n        negate: false,\n        subtract: false,\n        divide: false,\n        root: false,\n        fraction: false,\n        entered: false\n    }),\n\n    // whether a number is considered simple (one term)\n    // e.g. for reals, ints and floats are simple\n    isSimple: abstract,\n\n    // Based on http://stackoverflow.com/a/10454560/2571482\n    getDecimalPlaces: function() {\n        var match = (\"\" + this.n).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n        if (match) {\n            return Math.max(\n                0,\n                // Number of digits right of decimal point\n                (match[1] ? match[1].length : 0) -\n                // Adjust for scientific notation\n                (match[2] ? +match[2] : 0)\n            );\n        } else {\n            return 0;\n        }\n    },\n\n    asRational: abstract\n});\n\n\n/* rational number (n: numerator, d: denominator) */\nfunction Rational(numerator, denominator) {\n    var n = numerator; var d = denominator;\n    if (d < 0) {\n        n = -n; d = -d;\n    }\n    this.n = n; this.d = d;\n}\nRational.prototype = new Num();\n\n_.extend(Rational.prototype, {\n    func: Rational,\n    args: function() { return [this.n, this.d]; },\n    eval: function() { return this.n / this.d; },\n\n    print: function() {\n        return this.n.toString() + \"/\" + this.d.toString();\n    },\n\n    tex: function() {\n        var tex = \"\\\\frac{\" + Math.abs(this.n).toString() + \"}{\" + this.d.toString() + \"}\";\n        return this.n < 0 ? \"-\" + tex : tex;\n    },\n\n    add: function(num, options) {\n        if (num instanceof Rational) {\n            return new Rational(this.n * num.d + this.d * num.n, this.d * num.d).collect();\n        } else {\n            return num.add(this, options);\n        }\n    },\n\n    mul: function(num, options) {\n        if (num instanceof Rational) {\n            return new Rational(this.n * num.n, this.d * num.d).collect();\n        } else {\n            return num.mul(this, options);\n        }\n    },\n\n    collect: function() {\n        var gcd = Num.findGCD(this.n, this.d);\n\n        var n = this.n / gcd;\n        var d = this.d / gcd;\n\n        if (d === 1) {\n            return new Int(n);\n        } else {\n            return new Rational(n, d);\n        }\n    },\n\n    negate: function() {\n        return new Rational(-this.n, this.d);\n    },\n\n    abs: function() {\n        return new Rational(Math.abs(this.n), this.d);\n    },\n\n    findGCD: function(factor) {\n        // Attempt to factor out common numerators and denominators to return\n        // a Rational instead of a Float\n        if (factor instanceof Rational) {\n            // For more background, see\n            // http://math.stackexchange.com/questions/151081/gcd-of-rationals\n            var numerator = Num.findGCD(this.n * factor.d, factor.n * this.d);\n            var denominator = this.d * factor.d;\n            // Create the rational, then call .collect() to simplify it\n            return new Rational(numerator, denominator).collect();\n        } else if (factor instanceof Int) {\n            return new Rational(Num.findGCD(this.n, factor.n), this.d);\n        } else {\n            return factor.findGCD(this);\n        }\n    },\n\n    // for now, assuming that exp is a Num\n    raiseToThe: function(exp) {\n        if (exp instanceof Int) {\n            var positive = exp.eval() > 0;\n            var abs = exp.abs().eval();\n            var n = Math.pow(this.n, abs);\n            var d = Math.pow(this.d, abs);\n            if (positive) {\n                return new Rational(n, d).collect();\n            } else {\n                return new Rational(d, n).collect();\n            }\n        } else {\n            return new Float(this.eval()).raiseToThe(exp);\n        }\n    },\n\n    getDenominator: function() {\n        return new Int(this.d);\n    },\n\n    isSimple: function() { return false; },\n\n    asRational: function() { return this; }\n});\n\n\n/* integer (n: numerator/number) */\nfunction Int(number) { this.n = number; }\nInt.prototype = new Rational(0, 1);\n\n_.extend(Int.prototype, {\n    func: Int,\n    args: function() { return [this.n]; },\n    print: function() { return this.n.toString(); },\n    tex: function() { return this.n.toString(); },\n    negate: function() { return new Int(-this.n); },\n    abs: function() { return new Int(Math.abs(this.n)); },\n    isSimple: function() { return true; },\n    findGCD: function(factor) {\n        if (factor instanceof Int) {\n            return new Int(Num.findGCD(this.n, factor.n));\n        } else {\n            return factor.findGCD(this);\n        }\n    }\n});\n\n_.extend(Int, {\n    create: function(n) { return new Int(n).addHint(\"entered\"); }\n});\n\n/* float (n: number) */\nfunction Float(number) { this.n = number; }\nFloat.prototype = new Num();\n\n_.extend(Float.prototype, {\n    func: Float,\n    args: function() { return [this.n]; },\n    eval: function() { return this.n; },\n\n    // TODO(alex): when we internationalize number parsing/display\n    // we should make sure to use the appropriate decimal mark here\n    print: function() { return this.n.toString(); },\n    tex: function() { return this.n.toString(); },\n\n    add: function(num, options) {\n        if (options && options.preciseFloats) {\n            return Float.toDecimalPlaces(\n                this.n + num.eval(),\n                Math.max(this.getDecimalPlaces(), num.getDecimalPlaces())\n            );\n        } else {\n            return new Float(this.n + num.eval()).collect();\n        }\n    },\n\n    mul: function(num, options) {\n        if (options && options.preciseFloats) {\n            return Float.toDecimalPlaces(\n                this.n * num.eval(),\n                this.getDecimalPlaces() + num.getDecimalPlaces()\n            );\n        } else {\n            return new Float(this.n * num.eval()).collect();\n        }\n    },\n\n    collect: function() {\n        // We used to simplify Floats to Ints here whenever possible, but no\n        // longer do so in order to preserve significant figures.\n        return this;\n    },\n\n    negate: function() { return new Float(-this.n); },\n    abs: function() { return new Float(Math.abs(this.n)); },\n\n    findGCD: function(factor) {\n        if (factor instanceof Num) {\n            return new Float(Num.findGCD(this.eval(), factor.eval())).collect();\n        } else {\n            return factor.findGCD(this);\n        }\n    },\n\n    // for now, assuming that exp is a Num\n    raiseToThe: function(exp, options) {\n        if (options && options.preciseFloats &&\n                exp instanceof Int && exp.n > 1) {\n            return Float.toDecimalPlaces(\n                new Pow(this, exp).eval(),\n                this.getDecimalPlaces() * exp.n\n            );\n        } else {\n            return new Float(new Pow(this, exp).eval()).collect();\n        }\n    },\n\n    // only to be used on non-repeating decimals (e.g. user-provided)\n    asRational: function() {\n        var parts = this.n.toString().split(\".\");\n        if (parts.length === 1) {\n            return new Rational(this.n, 1);\n        } else {\n            var numerator = Number(parts.join(\"\"));\n            var denominator = Math.pow(10, parts[1].length);\n            return new Rational(numerator, denominator).collect();\n        }\n    },\n\n    getDenominator: function() {\n        return this.asRational().getDenominator();\n    },\n\n    isSimple: function() { return true; }\n});\n\n_.extend(Float, {\n    create: function(n) { return new Float(n).addHint(\"entered\"); },\n\n    // Account for floating point imprecision by explicitly controlling the\n    // number of decimal places in common operations (e.g. +, *, ^)\n    toDecimalPlaces: function(n, places) {\n        return new Float(+n.toFixed(Math.min(places, 20))).collect();\n    }\n});\n\n// static methods and fields that are best defined on Num\n_.extend(Num, {\n    negativeOne: function(hint) {\n        if (hint === \"subtract\") {\n            return Num.Sub;\n        } else if (hint === \"divide\") {\n            return Num.Div;\n        } else {\n            return Num.Neg;\n        }\n    },\n\n    // find the greatest common denominator\n    findGCD: function(a, b) {\n        var mod;\n\n        a = Math.abs(a);\n        b = Math.abs(b);\n\n        // Euclid's method doesn't handle non-integers very well. For now\n        // we just say we can't pull out a common factor. It might be\n        // reasonable to do better than this in the future.\n        if (a !== Math.floor(a) || b !== Math.floor(b)) {\n            return 1;\n        }\n\n        while (b) {\n            mod = a % b;\n            a = b;\n            b = mod;\n        }\n\n        return a;\n    },\n\n    min: function() {\n        return _.min(_.toArray(arguments), function(num) {\n            return num.eval();\n        });\n    },\n\n    max: function() {\n        return _.max(_.toArray(arguments), function(num) {\n            return num.eval();\n        });\n    }\n});\n\nNum.Neg = new Int(-1).addHint(\"negate\");\nNum.Sub = new Int(-1).addHint(\"subtract\");\nNum.Div = new Int(-1).addHint(\"divide\");\n\nNum.Sqrt = new Rational(1, 2).addHint(\"root\");\n\nNum.Zero = new Int(0);\nNum.One = new Int(1);\nNum.Ten = new Int(10);\n\n\n// set identities here\nAdd.prototype.identity = Num.Zero;\nMul.prototype.identity = Num.One;\n\n\nvar parser = KAS.parser;\n\nvar parseError = function(str, hash) {\n    // return int location of parsing error\n    throw new Error(hash.loc.first_column);\n};\n\n// expose concrete nodes to parser scope\n// see http://zaach.github.io/jison/docs/#sharing-scope\nparser.yy = {\n    Add: Add,\n    Mul: Mul,\n    Pow: Pow,\n    Log: Log,\n    Trig: Trig,\n    Eq: Eq,\n    Abs: Abs,\n    Func: Func,\n    Const: Const,\n    Var: Var,\n    Int: Int,\n    Float: Float,\n    parseError: parseError,\n\n    constants: [\"e\"],\n    symbolLexer: function(symbol) {\n        if (_.contains(parser.yy.constants, symbol)) {\n            return \"CONST\";\n        } else if (_.contains(parser.yy.functions, symbol)) {\n            return \"FUNC\";\n        } else {\n            return \"VAR\";\n        }\n    }\n};\n\nKAS.parse = function(input, options) {\n    try {\n        if (options && options.functions) {\n            // reserve the symbol \"i\" for complex numbers\n            parser.yy.functions = _.without(options.functions, \"i\");\n        } else {\n            parser.yy.functions = [];\n        }\n\n        // If ',' is the decimal dividor in your country, replace any ','s\n        // with '.'s.\n        // This isn't perfect, since the output will all still have '.'s.\n        // TODO(jack): Fix the output to have ','s in this case\n        if (options && options.decimal_separator) {\n            input = input.split(options.decimal_separator).join(\".\");\n        }\n\n        var expr = parser.parse(input).completeParse();\n        return { parsed: true, expr: expr };\n    } catch (e) {\n        return { parsed: false, error: e.message };\n    }\n};\n\n/* unit */\nfunction Unit(symbol) {\n    this.symbol = symbol;\n}\nUnit.prototype = new Symbol();\n\n// If possible, replace unit prefixes with a multiplication.\n//\n// \"g\" -> Unit(\"g\")\n// \"kg\" -> 1000 * Unit(\"g\")\nvar unprefixify = function(symbol) {\n    if (_(baseUnits).has(symbol) || _(derivedUnits).has(symbol)) {\n        return new Unit(symbol);\n    }\n\n    // check for prefix\n    var prefix = _(_(siPrefixes).keys()).find(function(testPrefix) {\n        return new RegExp(\"^\" + testPrefix).test(symbol);\n    });\n\n    if (prefix) {\n        var base = symbol.replace(new RegExp(\"^\" + prefix), \"\");\n\n        // It's okay to be here if either:\n        // * `base` is a base unit (the seven units listed in baseUnits)\n        // * `base` is a derived unit which allows prefixes\n        //\n        // Otherwise, we're trying to parse a unit label which is not\n        // allowed (mwk, mBTU, etc).\n        if (_(baseUnits).has(base) ||\n            (derivedUnits[base] &&\n             derivedUnits[base].prefixes === hasPrefixes)) {\n\n            return new Mul(siPrefixes[prefix], new Unit(base));\n        } else {\n            throw new Error(base + \" does not allow prefixes\");\n        }\n    } else {\n        return new Unit(symbol);\n    }\n};\n\nKAS.unitParse = function(input) {\n    try {\n        var parseResult = KAS.unitParser.parse(input);\n\n        // parseResult looks like:\n        // {\n        //   magnitude: \"5\",\n        //   unit: {\n        //     num: [\n        //       { name: \"s\", pow: 2 }\n        //     ],\n        //     denom: [\n        //       { name: \"kg\", pow: 1 }\n        //     ]\n        //   }\n        // }\n        //\n        // denom is optionally null\n\n        var unitArray = [];\n\n        _(parseResult.unit.num).each(function(unitSpec) {\n            unitArray.push(\n                new Pow(unprefixify(unitSpec.name), new Int(unitSpec.pow))\n            );\n        });\n\n        _(parseResult.unit.denom).each(function(unitSpec) {\n            unitArray.push(\n                new Pow(unprefixify(unitSpec.name), new Int(-1 * unitSpec.pow))\n            );\n        });\n\n        var unit = new Mul(unitArray).flatten();\n\n        if (parseResult.type === \"unitMagnitude\") {\n            // in the first case we have a magnitude coefficient as well as the\n            // unit itself.\n            var coefArray =\n                [new Float(+parseResult.magnitude)].concat(unitArray);\n            var expr = new Mul(coefArray);\n            return {\n                parsed: true,\n                unit: unit,\n                expr: expr,\n                coefficient: parseResult.magnitude,\n                type: parseResult.type\n            };\n        } else {\n\n            // in the second case it's just the unit with no magnitude.\n            return {\n                parsed: true,\n                unit: unit,\n                type: parseResult.type,\n            };\n        }\n    } catch (e) {\n        return { parsed: false, error: e.message };\n    }\n};\n\n_.extend(Unit.prototype, {\n    func: Unit,\n    args: function() { return [this.symbol]; },\n    recurse: function() { return this; },\n\n    eval: function(vars, options) {\n        // This is called when comparing units. A unit doesn't affect the\n        // numerical value of its coefficient, so this needs to be 1.\n        //\n        // On the other hand, things must not evaluate to the same thing if\n        // they don't have the same type. I believe that's also true - form is\n        // checked before numerical equivalence. I do not know where, though.\n        // However, there are a couple tests checking this.\n        return 1;\n    },\n\n    getUnits: function() { return [{ unit: this.symbol, pow: 1 }]; },\n\n    codegen: function() { return \"1\"; },\n\n    print: function() { return this.symbol; },\n\n    tex: function() { return this.symbol; },\n\n    // Simplify units by replacing prefixes with multiplication\n    collect: function(options) {\n        if (_(baseUnits).has(this.symbol)) {\n            return this;\n        } else if (_(derivedUnits).has(this.symbol)) {\n            return derivedUnits[this.symbol].conversion;\n        } else {\n            throw new Error(\"could not understand unit: \" + this.symbol);\n        }\n    },\n});\n\nvar baseUnits = {\n    m: new Unit(\"m\"),\n    // Note: kg is the SI base unit but we use g for consistency\n    g: new Unit(\"g\"),\n    s: new Unit(\"s\"),\n    A: new Unit(\"A\"),\n    K: new Unit(\"K\"),\n    mol: new Unit(\"mol\"),\n    cd: new Unit(\"cd\"),\n};\n\nvar siPrefixes = {\n    a: new Pow(new Int(10), new Int(-18)),\n    f: new Pow(new Int(10), new Int(-15)),\n    p: new Pow(new Int(10), new Int(-12)),\n    n: new Pow(new Int(10), new Int(-9)),\n    u: new Pow(new Int(10), new Int(-6)),\n    m: new Pow(new Int(10), new Int(-3)),\n    c: new Pow(new Int(10), new Int(-2)),\n    d: new Pow(new Int(10), new Int(-1)),\n    da: new Int(10),\n    h: new Pow(new Int(10), new Int(2)),\n    k: new Pow(new Int(10), new Int(3)),\n    M: new Pow(new Int(10), new Int(6)),\n    G: new Pow(new Int(10), new Int(9)),\n    T: new Pow(new Int(10), new Int(12)),\n    P: new Pow(new Int(10), new Int(15)),\n    E: new Pow(new Int(10), new Int(18)),\n    // http://en.wikipedia.org/wiki/Metric_prefix#.22Hella.22_prefix_proposal\n    hella: new Pow(new Int(10), new Int(27)),\n};\n\n// Use these two values to mark a unit as either SI-prefixable or not.\nvar hasPrefixes = {};\nvar hasntPrefixes = {};\n\nvar makeAlias = function(str, prefixes) {\n    var splits = str.split(\"|\");\n    var coefficientStr = splits[0].trim();\n    var unitsStr = splits[1].trim();\n\n    var coefficient = Num.One;\n    if (coefficientStr !== \"\") {\n        coefficient = KAS.parse(coefficientStr).expr;\n    }\n\n    var numdenomStr = unitsStr.split(\"/\");\n    var numdenom = [coefficient];\n\n    if (numdenomStr[0]) {\n        numdenomStr[0]\n            .split(\" \")\n            .filter(function(x) {\n                return x !== \"\";\n            }).map(function(x) {\n                numdenom.push(new Unit(x));\n            });\n    }\n\n    if (numdenomStr[1]) {\n        numdenomStr[1]\n            .split(\" \")\n            .filter(function(x) {\n                return x !== \"\";\n            }).map(function(x) {\n                numdenom.push(new Pow(new Unit(x), Num.Div));\n            });\n    }\n\n    return {\n        conversion: new Mul(numdenom),\n        prefixes: prefixes,\n    };\n};\n\n// This is a mapping of derived units (or different names for a unit) to their\n// definitions. For example, an inch is defined as 0.0254 m.\n//\n// Definitions don't need to be in terms of base units. For example, tsp is\n// defined in terms of tbsp (which is defined in terms of cup -> gal -> L ->\n// m^3). However, units must get simpler. I.e. there's no loop checking.\n//\n// makeAlias takes two parameters:\n// * a string specifying the simplification to perform\n//   - a required pipe separates the constant factor from the base units\n//   - the constant factor is parsed by KAS\n//   - the base units are in a simple format which disallows exponents and\n//     requires multiplicands to be space-separated (\"m m\" rather than \"m^2)\n//     with an optional \"/\" separating numerator and denominator\n//   - prefixes are not allowed to be used in the converted to units\n//     (note that this restriction, the format of the string, and the choice to\n//     use a string in the first place are made out of laziness to minimize\n//     both typing and parsing)\n// * a boolean specifying whether or not it's acceptable to use SI units\n//\n// Where possible, these units are taken from \"The International System of\n// Units (SI)\" 8th edition (2006).\nvar derivedUnits = {\n    // mass\n    // The atomic mass unit / dalton.\n    Da: makeAlias(\"1.6605388628 x 10^-24 | g\", hasPrefixes),\n    u: makeAlias(\"| Da\", hasntPrefixes),\n\n    // length\n    \"meter\": makeAlias(\"| m\", hasntPrefixes),\n    \"meters\": makeAlias(\"| m\", hasntPrefixes),\n    \"in\": makeAlias(\"254 / 10000 | m\", hasntPrefixes),\n    \"ft\": makeAlias(\"3048  / 10000 | m\", hasntPrefixes),\n    \"yd\": makeAlias(\"9144  / 10000 | m\", hasntPrefixes),\n    \"mi\": makeAlias(\"1609344 / 1000 | m\", hasntPrefixes),\n    \"ly\": makeAlias(\"9.4607 x 10^15 | m\", hasntPrefixes),\n    \"nmi\": makeAlias(\"1852 | m\", hasntPrefixes),\n    \"Å\": makeAlias(\"10^-10 | m\", hasntPrefixes),\n    \"pc\": makeAlias(\"3.0857 x 10^16 | m\", hasntPrefixes),\n\n    // time\n    \"min\": makeAlias(\"60 | s\", hasntPrefixes),\n    \"hr\": makeAlias(\"3600 | s\", hasntPrefixes),\n    \"sec\": makeAlias(\"| s\", hasntPrefixes),\n    // TODO(joel) make day work\n    \"day\": makeAlias(\"86400 | s\", hasntPrefixes),\n    \"wk\": makeAlias(\"604800 | s\", hasntPrefixes),\n    \"fortnight\": makeAlias(\"14 | day\", hasntPrefixes),\n    \"shake\": makeAlias(\"10^-8 | s\", hasntPrefixes),\n    \"olympiad\": makeAlias(\"126200000 | s\", hasntPrefixes),\n\n    // temperature\n    \"°C\": makeAlias(\"1 | K\", hasntPrefixes),\n    \"°F\": makeAlias(\"5/9 | K\", hasntPrefixes),\n    \"°R\": makeAlias(\"5/9 | K\", hasntPrefixes),\n\n    // electric charge\n    \"e\": makeAlias(\"1.6021765314 x 10^-19 | C\", hasntPrefixes),\n\n    // speed\n    \"c\": makeAlias(\"299792458 | m / s\", hasntPrefixes),\n    \"kn\": makeAlias(\"514/1000 | m / s\", hasntPrefixes),\n    \"kt\": makeAlias(\"| kn\", hasntPrefixes),\n    \"knot\": makeAlias(\"| kn\", hasntPrefixes),\n\n    // energy\n    \"J\": makeAlias(\"| N m\", hasPrefixes),\n    \"BTU\": makeAlias(\"1060 | J\", hasntPrefixes),\n    \"cal\": makeAlias(\"4184 / 1000 | J\", hasPrefixes),\n    \"eV\": makeAlias(\"1.602176514 x 10^-19 | J\", hasPrefixes),\n    \"erg\": makeAlias(\"10^−7 | J\", hasPrefixes),\n\n    // power\n    \"W\": makeAlias(\"| J / s\", hasPrefixes),\n    \"H-e\": makeAlias(\"80 | W\", hasntPrefixes),\n\n    // force\n    \"N\": makeAlias(\"1000 | g m / s s\", hasPrefixes),\n    // \"lb\": makeAlias(\"4448 / 1000 | N\", hasntPrefixes),\n    // 4.4482216152605\n    \"lb\": makeAlias(\"4448221615 / 1000000000 | N\", hasntPrefixes),\n    \"dyn\": makeAlias(\"10^-5 | N\", hasntPrefixes),\n\n    // pressure\n    \"Pa\": makeAlias(\"1 | N / m m m\", hasPrefixes),\n    \"bar\": makeAlias(\"10^5 | Pa\", hasPrefixes),\n    \"㏔\": makeAlias(\"1/1000 | bar\", hasntPrefixes),\n    \"㍴\": makeAlias(\"| bar\", hasntPrefixes),\n    \"atm\": makeAlias(\"101325 | Pa\", hasntPrefixes),\n    \"Torr\": makeAlias(\"1/760 | atm\", hasntPrefixes),\n    \"mmHg\": makeAlias(\"| Torr\", hasntPrefixes),\n\n    // area\n    \"ha\": makeAlias(\"10^4 | m m\", hasntPrefixes),\n    \"b\": makeAlias(\"10^−28 | m m\", hasPrefixes),\n    \"barn\": makeAlias(\"| b\", hasPrefixes),\n    \"acre\": makeAlias(\"4046.87 | m m\", hasntPrefixes),\n    \"skilodge\": makeAlias(\"10^-31 | m m\", hasntPrefixes),\n    \"outhouse\": makeAlias(\"10^-34 | m m\", hasntPrefixes),\n    \"shed\": makeAlias(\"10^-52 | m m\", hasntPrefixes),\n\n    // volume\n    \"L\": makeAlias(\"1/1000 | m m m\", hasPrefixes),\n    \"gal\": makeAlias(\"3785/1000 | L\", hasPrefixes),\n    \"cup\": makeAlias(\"1/16 | gal\", hasntPrefixes),\n    \"qt\": makeAlias(\"1/4 | gal\", hasntPrefixes),\n    \"quart\": makeAlias(\"| qt\", hasntPrefixes),\n    \"p\": makeAlias(\"1/8 | gal\", hasntPrefixes),\n    \"pt\": makeAlias(\"| p\", hasntPrefixes),\n    \"pint\": makeAlias(\"| p\", hasntPrefixes),\n    \"fl oz\": makeAlias(\"1/8 | cup\", hasntPrefixes),\n    \"fl. oz.\": makeAlias(\"1/8 | cup\", hasntPrefixes),\n    \"tbsp\": makeAlias(\"1/16 | cup\", hasntPrefixes),\n    \"tsp\": makeAlias(\"1/3 | tbsp\", hasntPrefixes),\n\n    // rotational\n    // \"rad\":\n    \"rev\": makeAlias(\"2 pi | rad\", hasntPrefixes),\n    \"deg\": makeAlias(\"180 pi | rad\", hasntPrefixes),\n    \"°\": makeAlias(\"| deg\", hasntPrefixes),\n    \"arcminute\": makeAlias(\"1/60 | deg\", hasntPrefixes),\n    \"arcsec\": makeAlias(\"1/3600 | deg\", hasntPrefixes),\n\n    // dimensionless\n    // \"B\": makeAlias(\"10 | dB\", hasntPrefixes), // XXX danger - logarithmic\n    // \"dB\"\n    // \"nP\"\n    \"Hu\": makeAlias(\"1000 | dB\", hasPrefixes),\n    \"dozen\": makeAlias(\"12 |\", hasntPrefixes),\n    // XXX\n    \"mol\": makeAlias(\"6.0221412927 x 10^23 |\", hasPrefixes),\n    \"%\": makeAlias(\"1/100 |\", hasntPrefixes),\n    \"percent\": makeAlias(\"| %\", hasntPrefixes),\n    \"ppm\": makeAlias(\"1/1000000 |\", hasntPrefixes),\n\n    // electric / magnetic\n    \"V\": makeAlias(\"1000 | g m m / s s C\", hasPrefixes),\n    \"C\": makeAlias(\"| A s\", hasPrefixes),\n    \"ampere\": makeAlias(\"| A\", hasntPrefixes),\n    \"Ω\": makeAlias(\"| V / A\", hasPrefixes),\n    \"ohm\": makeAlias(\"| Ω\", hasntPrefixes),\n    \"F\": makeAlias(\"| C / V\", hasPrefixes),\n    \"H\": makeAlias(\"| ohm s\", hasPrefixes),\n    \"T\": makeAlias(\"1000 | g / C s\", hasPrefixes),\n    \"Wb\": makeAlias(\"1000 | g m m / C s\", hasPrefixes),\n\n    // photometry\n    // TODO not sure this is right\n    \"lm\": makeAlias(\"pi x 10^4 | cd / m m\", hasntPrefixes),\n    \"lx\": makeAlias(\"| lm / m m\", hasntPrefixes),\n    \"nit\": makeAlias(\"| cd / m m\", hasntPrefixes),\n    \"sb\": makeAlias(\"10^4 | cd / m m\", hasntPrefixes),\n    \"stilb\": makeAlias(\"1 | sb\", hasntPrefixes),\n    \"apostilb\": makeAlias(\"1 / pi x 10^(-4) | sb\", hasntPrefixes),\n    \"blondel\": makeAlias(\"| apostilb\", hasntPrefixes),\n    \"asb\": makeAlias(\"| apostilb\", hasntPrefixes),\n    \"la\": makeAlias(\"| lm\", hasntPrefixes),\n    \"Lb\": makeAlias(\"| lm\", hasntPrefixes),\n    \"sk\": makeAlias(\"10^-7 | lm\", hasntPrefixes),\n    \"skot\": makeAlias(\"| sk\", hasntPrefixes),\n    \"bril\": makeAlias(\"10^-11 | lm\", hasntPrefixes),\n\n    // other\n    \"Hz\": makeAlias(\"| / s\", hasPrefixes),\n};\n\nKAS.Add = Add;\nKAS.Mul = Mul;\nKAS.Pow = Pow;\nKAS.Log = Log;\nKAS.Eq = Eq;\nKAS.Trig = Trig;\nKAS.Abs = Abs;\nKAS.Func = Func;\nKAS.Var = Var;\nKAS.Const = Const;\nKAS.Unit = Unit;\nKAS.Rational = Rational;\nKAS.Int = Int;\nKAS.Float = Float;\nKAS.Zero = Num.Zero;\nKAS.One = Num.One;\n\n})(KAS);\n\n/* TODO(charlie): fix these lint errors (http://eslint.org/docs/rules): */\n/* eslint-disable no-var, no-undef, comma-dangle, indent, max-len */\n\n(function(KAS) {\n\n// assumes that both expressions have already been parsed\n// TODO(alex): be able to pass a random() function to compare()\nKAS.compare = function(expr1, expr2, options) {\n    var defaults = {\n        form: false,        // check that the two expressions have the same form\n        simplify: false     // check that the second expression is simplified\n    };\n\n    /* more possible options:\n        allow ratios e.g. 3/1 and 3 should both be accepted for something like slope\n        allow student to choose their own variables names\n    */\n\n    if (options !== undefined) {\n        options = _.extend(defaults, options);\n    } else {\n        options = defaults;\n    }\n\n    // variable check\n    var vars = expr1.sameVars(expr2);\n    if (!vars.equal) {\n        var message = null;\n        if (vars.equalIgnoringCase) {\n            message = \"Some of your variables are in the wrong case (upper vs. lower).\";\n        }\n        return {equal: false, message: message};\n    }\n\n    // semantic check\n    if (!expr1.compare(expr2)) {\n        return {equal: false, message: null};\n    }\n\n    // syntactic check\n    if (options.form && !expr1.sameForm(expr2)) {\n        return {equal: false, message: \"Your answer is not in the correct form.\"};\n    }\n\n    // syntactic check\n    if (options.simplify && !expr1.isSimplified()) {\n        return {equal: false, message: \"Your answer is not fully expanded and simplified.\"};\n    }\n\n    return {equal: true, message: null};\n};\n\n})(KAS);\n"]},"metadata":{},"sourceType":"module"}